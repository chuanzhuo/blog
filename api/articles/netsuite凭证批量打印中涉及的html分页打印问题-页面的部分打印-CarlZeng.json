{"title":"netsuite凭证批量打印中涉及的html分页打印问题,页面的部分打印-CarlZeng","slug":"netsuite凭证批量打印中涉及的html分页打印问题-页面的部分打印-CarlZeng","date":"2009-01-06T13:10:00.000Z","updated":"2023-10-08T13:38:52.659Z","comments":true,"path":"api/articles/netsuite凭证批量打印中涉及的html分页打印问题-页面的部分打印-CarlZeng.json","excerpt":"zeng.cz在打印HTML页面时控制分页，可以使用层来动态控制。 具体的方法是，在需要分页的地方动态添加如下代码： 这是一个经典应用，如果netsuite中涉及的批量凭证打印 需要用这个来控制每张凭证的页面的。很重要，因为html打印是无法像pdf那样的位置决定性。如果一个页面中的表格被分摊到不同的页面来打印了：无标题文档每页都有的表头表格内容表格内容表格内容表格内容表格内容表格内容表格内容...","covers":null,"content":"<p>zeng.cz在打印HTML页面时控制分页，可以使用层来动态控制。 具体的方法是，在需要分页的地方动态添加如下代码： 这是一个经典应用，如果netsuite中涉及的批量凭证打印 需要用这个来控制每张凭证的页面的。很重要，因为html打印是无法像pdf那样的位置决定性。如果一个页面中的表格被分摊到不同的页面来打印了：无标题文档每页都有的表头表格内容表格内容表格内容表格内容表格内容表格内容表格内容…</p>\n<!-- more -->\n<p>zeng.cz</p>\n<p>在打印HTML页面时控制分页，可以使用层来动态控制。</p>\n<p>　　具体的方法是，在需要分页的地方动态添加如下代码：</p>\n<p>　　<div style=\"PAGE-BREAK-AFTER: always\"></div></p>\n<p>这是一个经典应用，如果netsuite中涉及的批量凭证打印 需要用这个来控制每张凭证的页面的。很重要，因为html打印是无法像pdf那样的位置决定性。</p>\n<p>如果一个页面中的表格被分摊到不同的页面来打印了：</p>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"><html>  \n<head>  \n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">  \n<title>无标题文档</title>  \n<style>  \n@media print{  \nINPUT {display:none}  \n}  \n</style>  \n</head>\n\n<body>\n\n<TABLE border=\"0\" style=\"font-size:9pt;\" width=\"300px\" align=\"center\">  \n<THEAD style=\"display:table-header-group;font-weight:bold\">  \n<TR><TD colspan=\"2\" align=\"center\" style=\"font-weight:bold;border:3px double red\">每页都有的表头</TD></TR>  \n</THEAD>  \n<TBODY style=\"text-align:center\"\">  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR style=\"page-break-after:always;\"><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR style=\"page-break-after:always;\"><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR style=\"page-break-after:always;\"><TD>表格内容</TD><TD>表格内容</TD></TR>  \n</TBODY>  \n<TFOOT style=\"display:table-footer-group;font-weight:bold\">  \n<TR>  \n<TD colspan=\"2\" align=\"center\" style=\"font-weight:bold;border:3px double blue\">每页都有的表尾</TD>  \n</TR>  \n</TFOOT>  \n</TABLE>  \n<input type=button value=\" 打 印 \" onclick=javascript:window.print()>  \n</body>  \n</html>\n\n<p>总体方案的确认：</p>\n<p>一、<strong>浏览器的打印功能菜单</strong><br>这种方案的优势是不需要对浏览器作任何扩充，是最简单的办法，但问题也最多，如：<br>1. 不能精确分页。<br>浏览器一般是根据用户设置的页面大小，web页面的内容多少，来自行决定分页位置，程序员很难控制。会有页脚页眉干扰。<br>2. 不能准确对齐边边距及打印文字。<br>3. 不能解决连续打印。<br>比如，不是仅打印一张票据，而是连续一次打印若干个票据。  </p>\n<p>二、<strong>使用webbrowser****控件+ javascript</strong><br>这实际上，是浏览器打印功能菜单的一种程序调用，与打印功能菜单没什么两样。分页的问题仍然存在，只不过，可以让用户不用去点菜单，直接在网页中的一个按钮，或一个链接里面调用罢了。  </p>\n<p>三、<strong>使用print css</strong><br>这是一种最理想的实现web套打的方法。这种方法通过在html文档中，嵌入打印相关的css样式，来实现对html文档输出打印的控制，比如设置纸张大小，纸张纵横方向，打印边距，分页等。显而易见，这种方式成本小，不需要下载任何插件，而且跨平台性非常好。print css推出已经有些时日，但遗憾的是，至今<br>没有一个厂商的浏览器很好地实现了这些标准，这使得程序员目前还不能利用print css进行实际的开发。关于打印css，参见<a href=\"http://css-discuss.incutio.com/?page=PrintStylesheets\">http://css-discuss.incutio.com/?page=PrintStylesheets</a>  </p>\n<p>四、<strong>使用pdf文件</strong><br>用这种方式，就是从服务器端下载一个pdf文件流，在IE中用adobe插件打开，然后用adobe的打印菜单进行打印，虽然这种方案，也能实现精确套打，但需要下载adobe插件。这是国外报表工具经常推荐的一种打印方法，但在pdf不那么普及的中国，这种方案不是最好选择。</p>\n<p>七、<strong>轻量级的ActiveX****打印方式</strong><br>这是本公司应客户要求，最新推出的一种最具创意的web套打解决方案。<br>杰表作为一款纯java的报表工具，以前的提供的web套打方案也是基于Applet的，Applet也做到了尽可能的小(只有24kb)，但用户还是抱怨，因为jre太大，安装需要耐心。另外，用Applet方式，很难实现客户端的批量打印功能。  </p>\n<p>我们采用轻量级的ActiveX打印方案，很好地解决了客户的问题。以下是一个典型的该种方案的示例。</p>\n<p>轻量级的ActiveX打印方案的<strong>优点</strong>是：<br>1．效率高。可以直接打印指定的html文档，不必向后台再次提起请求。<br>2．能做到精确打印，分页；<br>3．功能丰富。可以利用该控件，实现对当前票据文档的打印，预览，及多个html文档的连续打印。<br>4．成本低廉，ActiveX只有20kb。、</p>\n<p><a href=\"http://www.jatools.com/print/\">http://www.jatools.com/print/</a> 这是一个收费的东西，可以找找那些绿色版的，</p>\n<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<strong>netsuite凭证批量打印中涉及的html分页打印问题,页面的部分打印</strong></p>\n<p>window.print() 实际上，是浏览器打印功能菜单的一种程序调用。与点击打印功能菜单一样，不能精确分页，不能设置纸型，套打的问题更加无从谈起，只不过，可以让用户不用去点菜单，直接点击网页中的一个按钮，或一个链接里面调用罢了。事实上，很多用户都是采用这种方式打印，但是这种方式最致命的缺点是不能设置打印参数，比如纸型，页边距，选择打印机等等。</p>\n<p>需要指出的是这种方法提供一个打印前和打印后的事件onbeforeprint、onafterprint。可以在打印前的时候重新编辑一些格式，专门送去打印，打印后又处理回来。<br>function window.onbeforeprint()<br>{<br>&#x2F;&#x2F;将一些不需要打印的隐藏<br>}<br>function window.onafterprint()<br>{<br>&#x2F;&#x2F;放开隐藏的元素<br>}</p>\n<p>通过这两个方法，就可以实现页面的部分打印</p>\n","more":"<p>zeng.cz在打印HTML页面时控制分页，可以使用层来动态控制。 具体的方法是，在需要分页的地方动态添加如下代码： 这是一个经典应用，如果netsuite中涉及的批量凭证打印 需要用这个来控制每张凭证的页面的。很重要，因为html打印是无法像pdf那样的位置决定性。如果一个页面中的表格被分摊到不同的页面来打印了：无标题文档每页都有的表头表格内容表格内容表格内容表格内容表格内容表格内容表格内容…</p>\n<!-- more -->\n<p>zeng.cz</p>\n<p>在打印HTML页面时控制分页，可以使用层来动态控制。</p>\n<p>　　具体的方法是，在需要分页的地方动态添加如下代码：</p>\n<p>　　<div style=\"PAGE-BREAK-AFTER: always\"></div></p>\n<p>这是一个经典应用，如果netsuite中涉及的批量凭证打印 需要用这个来控制每张凭证的页面的。很重要，因为html打印是无法像pdf那样的位置决定性。</p>\n<p>如果一个页面中的表格被分摊到不同的页面来打印了：</p>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"><html>  \n<head>  \n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">  \n<title>无标题文档</title>  \n<style>  \n@media print{  \nINPUT {display:none}  \n}  \n</style>  \n</head>\n\n<body>\n\n<TABLE border=\"0\" style=\"font-size:9pt;\" width=\"300px\" align=\"center\">  \n<THEAD style=\"display:table-header-group;font-weight:bold\">  \n<TR><TD colspan=\"2\" align=\"center\" style=\"font-weight:bold;border:3px double red\">每页都有的表头</TD></TR>  \n</THEAD>  \n<TBODY style=\"text-align:center\"\">  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR style=\"page-break-after:always;\"><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR style=\"page-break-after:always;\"><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR><TD>表格内容</TD><TD>表格内容</TD></TR>  \n<TR style=\"page-break-after:always;\"><TD>表格内容</TD><TD>表格内容</TD></TR>  \n</TBODY>  \n<TFOOT style=\"display:table-footer-group;font-weight:bold\">  \n<TR>  \n<TD colspan=\"2\" align=\"center\" style=\"font-weight:bold;border:3px double blue\">每页都有的表尾</TD>  \n</TR>  \n</TFOOT>  \n</TABLE>  \n<input type=button value=\" 打 印 \" onclick=javascript:window.print()>  \n</body>  \n</html>\n\n<p>总体方案的确认：</p>\n<p>一、<strong>浏览器的打印功能菜单</strong><br>这种方案的优势是不需要对浏览器作任何扩充，是最简单的办法，但问题也最多，如：<br>1. 不能精确分页。<br>浏览器一般是根据用户设置的页面大小，web页面的内容多少，来自行决定分页位置，程序员很难控制。会有页脚页眉干扰。<br>2. 不能准确对齐边边距及打印文字。<br>3. 不能解决连续打印。<br>比如，不是仅打印一张票据，而是连续一次打印若干个票据。  </p>\n<p>二、<strong>使用webbrowser****控件+ javascript</strong><br>这实际上，是浏览器打印功能菜单的一种程序调用，与打印功能菜单没什么两样。分页的问题仍然存在，只不过，可以让用户不用去点菜单，直接在网页中的一个按钮，或一个链接里面调用罢了。  </p>\n<p>三、<strong>使用print css</strong><br>这是一种最理想的实现web套打的方法。这种方法通过在html文档中，嵌入打印相关的css样式，来实现对html文档输出打印的控制，比如设置纸张大小，纸张纵横方向，打印边距，分页等。显而易见，这种方式成本小，不需要下载任何插件，而且跨平台性非常好。print css推出已经有些时日，但遗憾的是，至今<br>没有一个厂商的浏览器很好地实现了这些标准，这使得程序员目前还不能利用print css进行实际的开发。关于打印css，参见<a href=\"http://css-discuss.incutio.com/?page=PrintStylesheets\">http://css-discuss.incutio.com/?page=PrintStylesheets</a>  </p>\n<p>四、<strong>使用pdf文件</strong><br>用这种方式，就是从服务器端下载一个pdf文件流，在IE中用adobe插件打开，然后用adobe的打印菜单进行打印，虽然这种方案，也能实现精确套打，但需要下载adobe插件。这是国外报表工具经常推荐的一种打印方法，但在pdf不那么普及的中国，这种方案不是最好选择。</p>\n<p>七、<strong>轻量级的ActiveX****打印方式</strong><br>这是本公司应客户要求，最新推出的一种最具创意的web套打解决方案。<br>杰表作为一款纯java的报表工具，以前的提供的web套打方案也是基于Applet的，Applet也做到了尽可能的小(只有24kb)，但用户还是抱怨，因为jre太大，安装需要耐心。另外，用Applet方式，很难实现客户端的批量打印功能。  </p>\n<p>我们采用轻量级的ActiveX打印方案，很好地解决了客户的问题。以下是一个典型的该种方案的示例。</p>\n<p>轻量级的ActiveX打印方案的<strong>优点</strong>是：<br>1．效率高。可以直接打印指定的html文档，不必向后台再次提起请求。<br>2．能做到精确打印，分页；<br>3．功能丰富。可以利用该控件，实现对当前票据文档的打印，预览，及多个html文档的连续打印。<br>4．成本低廉，ActiveX只有20kb。、</p>\n<p><a href=\"http://www.jatools.com/print/\">http://www.jatools.com/print/</a> 这是一个收费的东西，可以找找那些绿色版的，</p>\n<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<strong>netsuite凭证批量打印中涉及的html分页打印问题,页面的部分打印</strong></p>\n<p>window.print() 实际上，是浏览器打印功能菜单的一种程序调用。与点击打印功能菜单一样，不能精确分页，不能设置纸型，套打的问题更加无从谈起，只不过，可以让用户不用去点菜单，直接点击网页中的一个按钮，或一个链接里面调用罢了。事实上，很多用户都是采用这种方式打印，但是这种方式最致命的缺点是不能设置打印参数，比如纸型，页边距，选择打印机等等。</p>\n<p>需要指出的是这种方法提供一个打印前和打印后的事件onbeforeprint、onafterprint。可以在打印前的时候重新编辑一些格式，专门送去打印，打印后又处理回来。<br>function window.onbeforeprint()<br>{<br>&#x2F;&#x2F;将一些不需要打印的隐藏<br>}<br>function window.onafterprint()<br>{<br>&#x2F;&#x2F;放开隐藏的元素<br>}</p>\n<p>通过这两个方法，就可以实现页面的部分打印</p>\n","categories":[{"name":"NetSuite","path":"api/categories/NetSuite.json"}],"tags":[{"name":"NetSuite","path":"api/tags/NetSuite.json"}]}