{"title":"NAS安装及应用supervisor进程守护","slug":"NAS安装及应用supervisor进程守护","date":"2024-08-13T08:18:23.000Z","updated":"2024-10-25T12:35:05.919Z","comments":true,"path":"api/articles/NAS安装及应用supervisor进程守护.json","excerpt":" [Figure] 学会安装并使用supervisor进程守护, 再也不用担心进程无故消失&#x2F;退出","covers":["https://img.carlzeng.com:3/i/2024/08/13/66bb799d6ca43.png"],"content":"<img class=\"lozad\" data-src=\"https://img.carlzeng.com:3/i/2024/08/13/66bb799d6ca43.png\">\n\n<p>学会安装并使用supervisor进程守护, 再也不用担心进程无故消失&#x2F;退出</p>\n<span id=\"more\"></span>\n\n<div> \n<button onclick=\"synthesizeSpeech()\">朗读全文</button>\n</div>\n<audio controls id=\"audioPlayer\">Your browser does not support the audio element.</audio>      \n<script>\n  function synthesizeSpeech() { \n    var inputText = document.getElementsByClassName('post-block')[0].innerText;\n    var voice = \"ZH\";\n    var url = 'https://tts.carlzeng.com:3/speech?text=' + encodeURIComponent(inputText.substring(0,3000)) + '&voice=' + voice;\n    var audioPlayer = document.getElementById('audioPlayer');          \n    audioPlayer.src = url;\n    audioPlayer.load();\n    audioPlayer.play();\n  }\n</script>\n\n\n<h1 id=\"背景-有什么用\"><a href=\"#背景-有什么用\" class=\"headerlink\" title=\"背景&#x2F;有什么用\"></a>背景&#x2F;有什么用</h1><p>NAS中进程守护的实践应用(Debian中也一样)</p>\n<p>前文讲了在群晖NAS的后台中运行如下命令来实现推流</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ffmpeg -re -i &quot;rtsp://admin:d****@192.168.6.126:554/cam/realmonitor?channel=1&amp;subtype=1&quot; -c copy -f flv -y rtmp://192.168.6.116:1935/live/livestream 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>推流 将摄像头的视频音频流 推到SRS服务器端(做为视频内容的输入口)</p>\n<p>可是这个命令几度优化后(比如nohup让其进入后台运行, 不输出日志等), 还存在一个弊端: 运行几天以后, 这个进程会自动消失&#x2F;退出. 不知道进程是如何退出的, 但结论就是自动退出并消失了.</p>\n<p>想起可以使用一些进程守护的解决方案, 比如:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. supervisor 进程守护</span><br><span class=\"line\"></span><br><span class=\"line\">2. pm2 实现的“进程守护</span><br><span class=\"line\">PM2是开源的基于Nodejs的进程管理器，包括守护进程，监控，日志的一整套完整的功能，基本是Nodejs应用程序不二的守护进程选择</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Supervisor安装与配置(linux&#x2F;unix进程管理工具) Supervisor（<a href=\"http://supervisord.org)是用python开发的一个client/server%E6%9C%8D%E5%8A%A1%EF%BC%8C%E6%98%AFLinux/Unix%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%EF%BC%8C%E4%B8%8D%E6%94%AF%E6%8C%81Windows%E7%B3%BB%E7%BB%9F%E3%80%82%E5%AE%83%E5%8F%AF%E4%BB%A5%E5%BE%88%E6%96%B9%E4%BE%BF%E7%9A%84%E7%9B%91%E5%90%AC%E3%80%81%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E9%87%8D%E5%90%AF%E4%B8%80%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AA%E8%BF%9B%E7%A8%8B%E3%80%82%E7%94%A8Supervisor%E7%AE%A1%E7%90%86%E7%9A%84%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E6%84%8F%E5%A4%96%E8%A2%AB%E6%9D%80%E6%AD%BB%EF%BC%8Csupervisort%E7%9B%91%E5%90%AC%E5%88%B0%E8%BF%9B%E7%A8%8B%E6%AD%BB%E5%90%8E%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86%E5%AE%83%E9%87%8D%E6%96%B0%E6%8B%89%E8%B5%B7%EF%BC%8C%E5%BE%88%E6%96%B9%E4%BE%BF%E7%9A%84%E5%81%9A%E5%88%B0%E8%BF%9B%E7%A8%8B%E8%87%AA%E5%8A%A8%E6%81%A2%E5%A4%8D%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%8C%E4%B8%8D%E5%86%8D%E9%9C%80%E8%A6%81%E8%87%AA%E5%B7%B1%E5%86%99shell%E8%84%9A%E6%9C%AC%E6%9D%A5%E6%8E%A7%E5%88%B6%E3%80%82\">http://supervisord.org）是用Python开发的一个client/server服务，是Linux/Unix系统下的一个进程管理工具，不支持Windows系统。它可以很方便的监听、启动、停止、重启一个或多个进程。用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。</a></p>\n<blockquote>\n<p>使用2天的感受: 非常给力! 推流进程一直持续着, 再也不用手动去启动ffmpeg. </p>\n<p>supervisorctl status输出了守护的进程信息</p>\n</blockquote>\n<h1 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h1><p>先安装pip<br>    wget  <a href=\"https://bootstrap.pypa.io/get-pip.py\">https://bootstrap.pypa.io/get-pip.py</a><br>    python3  get-pip.py </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最后输入 pip3 -V验证是否成功！</span><br><span class=\"line\"></span><br><span class=\"line\">pip3 -V</span><br><span class=\"line\">pip 24.2 from /usr/lib/python3.8/site-packages/pip (python 3.8)</span><br><span class=\"line\"></span><br><span class=\"line\">pip3 install supervisor</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置Supervisor\"><a href=\"#配置Supervisor\" class=\"headerlink\" title=\"配置Supervisor\"></a>配置Supervisor</h2><ol>\n<li>mddir &#x2F;etc&#x2F;supervisord.d<ol>\n<li>创建管理目录</li>\n</ol>\n</li>\n<li>cat &#x2F;etc&#x2F;supervisord.conf<ol>\n<li>显示默认的配置文件内容(如下所示)</li>\n</ol>\n</li>\n<li>然后复制模版(默认配置文件内容)以后去新建一个自己的守护的进程, 就是在这个模版的结尾 添加这样的章节 [program:ffmpeg] <ol>\n<li>其中ffmpeg就是程序唯一名称, 也就是命名一个特定的指令</li>\n</ol>\n</li>\n<li>最后使用命令运行 supervisord -c &#x2F;etc&#x2F;supervisord.d&#x2F;ffmpeg.conf</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[supervisord]</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span>=/tmp/supervisord.log <span class=\"comment\">; main log file; default $CWD/supervisord.log</span></span><br><span class=\"line\"><span class=\"attr\">logfile_maxbytes</span>=<span class=\"number\">5</span>MB        <span class=\"comment\">; max main logfile bytes b4 rotation; default 50MB</span></span><br><span class=\"line\"><span class=\"attr\">logfile_backups</span>=<span class=\"number\">1</span>           <span class=\"comment\">; # of main logfile backups; 0 means none, default 10</span></span><br><span class=\"line\"><span class=\"attr\">loglevel</span>=warn                <span class=\"comment\">; log level; default info; others: debug,warn,trace</span></span><br><span class=\"line\"><span class=\"attr\">pidfile</span>=/tmp/supervisord.pid <span class=\"comment\">; supervisord pidfile; default supervisord.pid</span></span><br><span class=\"line\"><span class=\"attr\">nodaemon</span>=<span class=\"literal\">false</span>               <span class=\"comment\">; start in foreground if true; default false</span></span><br><span class=\"line\"><span class=\"attr\">silent</span>=<span class=\"literal\">false</span>                 <span class=\"comment\">; no logs to stdout if true; default false</span></span><br><span class=\"line\"><span class=\"attr\">minfds</span>=<span class=\"number\">102</span>                  <span class=\"comment\">; min. avail startup file descriptors; default 1024</span></span><br><span class=\"line\"><span class=\"attr\">minprocs</span>=<span class=\"number\">20</span>                 <span class=\"comment\">; min. avail process descriptors;default 200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[supervisorctl]</span></span><br><span class=\"line\"><span class=\"attr\">serverurl</span>=unix:///tmp/supervisor.sock <span class=\"comment\">; use a unix:// URL  for a unix socket</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[program:ffmpeg]</span>                                        <span class=\"comment\">#程序唯一名称</span></span><br><span class=\"line\"><span class=\"attr\">directory</span>=/bin/                                         <span class=\"comment\">#程序路径</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=ffmpeg -re -i <span class=\"string\">&quot;rtsp://admin:d****@192.168.6.126:554/cam/realmonitor?channel=1&amp;subtype=1&quot;</span> -c copy -f flv -y rtmp://<span class=\"number\">192.168</span>.<span class=\"number\">6.116</span>:<span class=\"number\">1935</span>/live/livestream           <span class=\"comment\">#运行程序的命令</span></span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">true</span>                                          <span class=\"comment\">#是否在supervisord启动后tomcat也启动</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span>=<span class=\"number\">10</span>                                            <span class=\"comment\">#启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">true</span>                                        <span class=\"comment\">#程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启；意思为如果不是supervisord来关闭的该进程则认为不正当关闭，supervisord会再次把该进程给启动起来，只能使用该supervisorctl来进行关闭、启动、重启操作</span></span><br><span class=\"line\"><span class=\"attr\">startretries</span>=<span class=\"number\">3</span>                                          <span class=\"comment\">#启动失败自动重试次数，默认是3</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root                                               <span class=\"comment\">#用哪个用户启动进程，默认是root</span></span><br><span class=\"line\"><span class=\"attr\">priority</span>=<span class=\"number\">999</span>                                            <span class=\"comment\">#进程启动优先级，默认999，假如Supervisord需要管理多个进程，那么值小的优先启动</span></span><br><span class=\"line\"><span class=\"attr\">stopsignal</span>=INT</span><br><span class=\"line\"><span class=\"attr\">redirect_stderr</span>=<span class=\"literal\">true</span>                                    <span class=\"comment\">#把stderr重定向到stdout标准输出，默认false</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span>=<span class=\"number\">200</span>MB                           <span class=\"comment\">#stdout标准输出日志文件大小，日志文件大小到200M后则进行切割，切割后的日志文件会标示为catalina.out1,catalina.out2,catalina.out3...，默认50MB</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span> = <span class=\"number\">1</span>                            <span class=\"comment\">#stdout标准输出日志文件备份数，保存100个200MB的日志文件，超过100个后老的将被删除，默认为10保存10个</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/volume2/KingchuxingSSD512G/Maintenance/catalina.out      <span class=\"comment\">#标准日志输出位置，如果输出位置不存在则会启动失败</span></span><br><span class=\"line\"><span class=\"attr\">stopasgroup</span>=<span class=\"literal\">false</span>                                       <span class=\"comment\">#默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span></span><br><span class=\"line\"><span class=\"attr\">killasgroup</span>=<span class=\"literal\">false</span>                                       <span class=\"comment\">#默认为false，向进程组发送kill信号，包括子进程</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>#supervisord启动<br>supervisord -c &#x2F;etc&#x2F;supervisord.d&#x2F;ffmpeg.conf               </p>\n<p>#启动supervisord进程，我们在配置文件中设置了 autostart&#x3D;true 参数，在supervisord启动的时候 ffmpeg也随之启动</p>\n<p>ps -ef|grep ffmpeg      </p>\n<p><strong>程序管理</strong>　　</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status ffmpeg</span><br><span class=\"line\"></span><br><span class=\"line\">supervisorctl start ffmpeg</span><br></pre></td></tr></table></figure>\n\n\n\n<p>错误:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.d/ffmpeg.conf            </span><br><span class=\"line\">Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.                                                         </span><br><span class=\"line\">For help, use /bin/supervisord -h                       </span><br></pre></td></tr></table></figure>\n\n<p>解决办法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo unlink /tmp/supervisor.sock</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h1><iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://query.carlzeng.com:3/appsearch?q=python\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"500\"></iframe>\n\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><p>命令以及日志输出(实例)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget  https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root@DS918:/etc# python3  get-pip.py                                                                          </span><br><span class=\"line\">Collecting pip                                                                                                </span><br><span class=\"line\">  WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection bro</span><br><span class=\"line\">ken by &#x27;NewConnectionError(&#x27;: Failed </span><br><span class=\"line\">to establish a new connection: [Errno -3] Temporary failure in name resolution&#x27;)&#x27;: /packages/d4/55/90db48d85f7</span><br><span class=\"line\">689ec6f81c0db0622d704306c5284850383c090e6c7195a5c/pip-24.2-py3-none-any.whl.metadata                          </span><br><span class=\"line\">  Downloading pip-24.2-py3-none-any.whl.metadata (3.6 kB)                                                     </span><br><span class=\"line\">Collecting setuptools                                                                                         </span><br><span class=\"line\">  Downloading setuptools-72.1.0-py3-none-any.whl.metadata (6.6 kB)                                            </span><br><span class=\"line\">Collecting wheel                                                                                              </span><br><span class=\"line\">  Downloading wheel-0.44.0-py3-none-any.whl.metadata (2.3 kB)                                                 </span><br><span class=\"line\">Downloading pip-24.2-py3-none-any.whl (1.8 MB)                                                                </span><br><span class=\"line\">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.8/1.8 MB 40.6 kB/s eta 0:00:00                                  </span><br><span class=\"line\">Downloading setuptools-72.1.0-py3-none-any.whl (2.3 MB)                                                       </span><br><span class=\"line\">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.3/2.3 MB 38.3 kB/s eta 0:00:00                                  </span><br><span class=\"line\">Downloading wheel-0.44.0-py3-none-any.whl (67 kB)                                                             </span><br><span class=\"line\">Installing collected packages: wheel, setuptools, pip                                                         </span><br><span class=\"line\">Successfully installed pip-24.2 setuptools-72.1.0 wheel-0.44.0                                                </span><br><span class=\"line\">WARNING: Running pip as the &#x27;root&#x27; user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing an</span><br><span class=\"line\">d want to suppress this warning. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root@DS918:/etc# pip3 -V                                                                                      </span><br><span class=\"line\">pip 24.2 from /usr/lib/python3.8/site-packages/pip (python 3.8)  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root@DS918:/etc# pip3 install supervisor                                                                      </span><br><span class=\"line\">Collecting supervisor                                                                                         </span><br><span class=\"line\">  Downloading supervisor-4.2.5-py2.py3-none-any.whl.metadata (86 kB)                                          </span><br><span class=\"line\">Requirement already satisfied: setuptools in /usr/lib/python3.8/site-packages (from supervisor) (72.1.0)      </span><br><span class=\"line\">Downloading supervisor-4.2.5-py2.py3-none-any.whl (319 kB)                                                    </span><br><span class=\"line\">Installing collected packages: supervisor                                                                     </span><br><span class=\"line\">Successfully installed supervisor-4.2.5                                                                       </span><br><span class=\"line\">WARNING: Running pip as the &#x27;root&#x27; user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment i</span><br><span class=\"line\">nstead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.   </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.d/ffmpeg.conf            </span><br><span class=\"line\">Error: .ini file does not include supervisord section                                                         </span><br><span class=\"line\">For help, use /bin/supervisord -h                       </span><br></pre></td></tr></table></figure>\n\n<p>错误解决办法: 在配置文件中添加supervisord section&#x2F;章节</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl start ffmpeg                               </span><br><span class=\"line\">unix:///tmp/supervisor.sock no such file </span><br></pre></td></tr></table></figure>\n\n<p>解决办法是: </p>\n<p>运行时使用:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.d/ffmpeg.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/supervisord.d/ffmpeg.conf   </span><br><span class=\"line\">1. 使用默认的模版</span><br><span class=\"line\">2. 在最后面添加一个章节 [program:ffmpeg]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>发现推流没有正常, 查询进程status, 一切正常; 期间的外网IP变化多次, 网络也不稳定了DDNS错误(重启了猫以后, wan3没有拨号成功, 导致所有的网络服务都失去正确的ip, ddns无法灵活动态获取成功拨号了的虚拟wan口IP, 怎么解决?)</p>\n<p>解决办法:</p>\n<p>supervisorctl restart ffmpeg </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@DS:~# supervisorctl status ffmpeg</span><br><span class=\"line\">ffmpeg                           RUNNING   pid 11310, uptime 19 days, 6:37:39</span><br><span class=\"line\">root@DS:~# supervisorctl restart ffmpeg</span><br><span class=\"line\">ffmpeg: stopped</span><br><span class=\"line\">ffmpeg: started</span><br></pre></td></tr></table></figure>\n\n<p>这样重启后, 推流马上正常了, 很方便, 直接了当略过了ffmpeg里面的细节.</p>\n<h3 id=\"推流异常\"><a href=\"#推流异常\" class=\"headerlink\" title=\"推流异常\"></a>推流异常</h3><p>后来发现不是这个supervisor进程守护故障, 由于中继K2P将上游的K2P路由器无故攻击下线(由于WIFI的信道变化, 而下游K2P用正确的密码去不停连接错误信道的上游K2P路由器), 导致上游的K2P路由器变成无法上网的状态</p>\n<p>这样的外围出错, 导致了上游K2P路由器无法上网而使TP1Z摄像头的断开了网络(它变成无法上网), 我不明白无法上网, 应该是并且导致它无法连接到SRS本地服务器, 这样就导致推流失败了.</p>\n<p>当我找到推流异常问题的根源后, 通过 <a href=''>WIFI远程无线中继之K2P刷机Padavan无线桥接功能</a> 来锁定信道后, 让上游的K2P路由器工作正常, 然后需要手动重新使用以下命令:</p>\n<p>supervisorctl restart ffmpeg</p>\n<p>来重新开启正常的推流. 通过这类外围故障, 更加印证了这个supervisor进程守护是可靠的.</p>\n<p>然而进程虽然一直正常存在, 但不代表它一直正常按预期完成指定的任务!</p>\n<h3 id=\"摄像头IP改变后重新配置推流\"><a href=\"#摄像头IP改变后重新配置推流\" class=\"headerlink\" title=\"摄像头IP改变后重新配置推流\"></a>摄像头IP改变后重新配置推流</h3><p>ffmpeg: ERROR (spawn error) 摄像头IP地址改变以后(从6.115 到 6.211), 需要先</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. <span class=\"built_in\">kill</span> 所有supervisord的进程ID</span><br><span class=\"line\">2. supervisord -c /etc/supervisord.d/ffmpeg.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后才能使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl restart ffmpeg</span><br></pre></td></tr></table></figure>\n\n\n\n<p>否则会一直报错: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@DS918:/tmp<span class=\"comment\"># supervisorctl restart ffmpeg                                                                               </span></span><br><span class=\"line\">ffmpeg: ERROR (not running)                                                                                                 </span><br><span class=\"line\">ffmpeg: ERROR (spawn error)</span><br></pre></td></tr></table></figure>\n\n<p>为了避免DHCP进一步改变, 我到OpenWrt中, 设置了摄像头的静态IP地址.</p>\n<p>这样即便下一次我改变AP路由器设备, 摄像头利润上也会分配到最新的ip地址: 192.168.6.211</p>\n<h1 id=\"灵感来源\"><a href=\"#灵感来源\" class=\"headerlink\" title=\"灵感来源\"></a>灵感来源</h1><p><a href=\"https://www.cnblogs.com/dalianpai/p/13151952.html\">Supervisor安装与配置二</a></p>\n<p><a href=\"https://www.carlzeng.top/202304131736.html\">动态公网IP 和 SRS-CarlZeng</a></p>\n","more":"<div> \n<button onclick=\"synthesizeSpeech()\">朗读全文</button>\n</div>\n<audio controls id=\"audioPlayer\">Your browser does not support the audio element.</audio>      \n<script>\n  function synthesizeSpeech() { \n    var inputText = document.getElementsByClassName('post-block')[0].innerText;\n    var voice = \"ZH\";\n    var url = 'https://tts.carlzeng.com:3/speech?text=' + encodeURIComponent(inputText.substring(0,3000)) + '&voice=' + voice;\n    var audioPlayer = document.getElementById('audioPlayer');          \n    audioPlayer.src = url;\n    audioPlayer.load();\n    audioPlayer.play();\n  }\n</script>\n\n\n<h1 id=\"背景-有什么用\"><a href=\"#背景-有什么用\" class=\"headerlink\" title=\"背景&#x2F;有什么用\"></a>背景&#x2F;有什么用</h1><p>NAS中进程守护的实践应用(Debian中也一样)</p>\n<p>前文讲了在群晖NAS的后台中运行如下命令来实现推流</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ffmpeg -re -i &quot;rtsp://admin:d****@192.168.6.126:554/cam/realmonitor?channel=1&amp;subtype=1&quot; -c copy -f flv -y rtmp://192.168.6.116:1935/live/livestream 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>推流 将摄像头的视频音频流 推到SRS服务器端(做为视频内容的输入口)</p>\n<p>可是这个命令几度优化后(比如nohup让其进入后台运行, 不输出日志等), 还存在一个弊端: 运行几天以后, 这个进程会自动消失&#x2F;退出. 不知道进程是如何退出的, 但结论就是自动退出并消失了.</p>\n<p>想起可以使用一些进程守护的解决方案, 比如:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. supervisor 进程守护</span><br><span class=\"line\"></span><br><span class=\"line\">2. pm2 实现的“进程守护</span><br><span class=\"line\">PM2是开源的基于Nodejs的进程管理器，包括守护进程，监控，日志的一整套完整的功能，基本是Nodejs应用程序不二的守护进程选择</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Supervisor安装与配置(linux&#x2F;unix进程管理工具) Supervisor（<a href=\"http://supervisord.org)是用python开发的一个client/server%E6%9C%8D%E5%8A%A1%EF%BC%8C%E6%98%AFLinux/Unix%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%EF%BC%8C%E4%B8%8D%E6%94%AF%E6%8C%81Windows%E7%B3%BB%E7%BB%9F%E3%80%82%E5%AE%83%E5%8F%AF%E4%BB%A5%E5%BE%88%E6%96%B9%E4%BE%BF%E7%9A%84%E7%9B%91%E5%90%AC%E3%80%81%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E9%87%8D%E5%90%AF%E4%B8%80%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AA%E8%BF%9B%E7%A8%8B%E3%80%82%E7%94%A8Supervisor%E7%AE%A1%E7%90%86%E7%9A%84%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E6%84%8F%E5%A4%96%E8%A2%AB%E6%9D%80%E6%AD%BB%EF%BC%8Csupervisort%E7%9B%91%E5%90%AC%E5%88%B0%E8%BF%9B%E7%A8%8B%E6%AD%BB%E5%90%8E%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86%E5%AE%83%E9%87%8D%E6%96%B0%E6%8B%89%E8%B5%B7%EF%BC%8C%E5%BE%88%E6%96%B9%E4%BE%BF%E7%9A%84%E5%81%9A%E5%88%B0%E8%BF%9B%E7%A8%8B%E8%87%AA%E5%8A%A8%E6%81%A2%E5%A4%8D%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%8C%E4%B8%8D%E5%86%8D%E9%9C%80%E8%A6%81%E8%87%AA%E5%B7%B1%E5%86%99shell%E8%84%9A%E6%9C%AC%E6%9D%A5%E6%8E%A7%E5%88%B6%E3%80%82\">http://supervisord.org）是用Python开发的一个client/server服务，是Linux/Unix系统下的一个进程管理工具，不支持Windows系统。它可以很方便的监听、启动、停止、重启一个或多个进程。用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。</a></p>\n<blockquote>\n<p>使用2天的感受: 非常给力! 推流进程一直持续着, 再也不用手动去启动ffmpeg. </p>\n<p>supervisorctl status输出了守护的进程信息</p>\n</blockquote>\n<h1 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h1><p>先安装pip<br>    wget  <a href=\"https://bootstrap.pypa.io/get-pip.py\">https://bootstrap.pypa.io/get-pip.py</a><br>    python3  get-pip.py </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最后输入 pip3 -V验证是否成功！</span><br><span class=\"line\"></span><br><span class=\"line\">pip3 -V</span><br><span class=\"line\">pip 24.2 from /usr/lib/python3.8/site-packages/pip (python 3.8)</span><br><span class=\"line\"></span><br><span class=\"line\">pip3 install supervisor</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置Supervisor\"><a href=\"#配置Supervisor\" class=\"headerlink\" title=\"配置Supervisor\"></a>配置Supervisor</h2><ol>\n<li>mddir &#x2F;etc&#x2F;supervisord.d<ol>\n<li>创建管理目录</li>\n</ol>\n</li>\n<li>cat &#x2F;etc&#x2F;supervisord.conf<ol>\n<li>显示默认的配置文件内容(如下所示)</li>\n</ol>\n</li>\n<li>然后复制模版(默认配置文件内容)以后去新建一个自己的守护的进程, 就是在这个模版的结尾 添加这样的章节 [program:ffmpeg] <ol>\n<li>其中ffmpeg就是程序唯一名称, 也就是命名一个特定的指令</li>\n</ol>\n</li>\n<li>最后使用命令运行 supervisord -c &#x2F;etc&#x2F;supervisord.d&#x2F;ffmpeg.conf</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[supervisord]</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span>=/tmp/supervisord.log <span class=\"comment\">; main log file; default $CWD/supervisord.log</span></span><br><span class=\"line\"><span class=\"attr\">logfile_maxbytes</span>=<span class=\"number\">5</span>MB        <span class=\"comment\">; max main logfile bytes b4 rotation; default 50MB</span></span><br><span class=\"line\"><span class=\"attr\">logfile_backups</span>=<span class=\"number\">1</span>           <span class=\"comment\">; # of main logfile backups; 0 means none, default 10</span></span><br><span class=\"line\"><span class=\"attr\">loglevel</span>=warn                <span class=\"comment\">; log level; default info; others: debug,warn,trace</span></span><br><span class=\"line\"><span class=\"attr\">pidfile</span>=/tmp/supervisord.pid <span class=\"comment\">; supervisord pidfile; default supervisord.pid</span></span><br><span class=\"line\"><span class=\"attr\">nodaemon</span>=<span class=\"literal\">false</span>               <span class=\"comment\">; start in foreground if true; default false</span></span><br><span class=\"line\"><span class=\"attr\">silent</span>=<span class=\"literal\">false</span>                 <span class=\"comment\">; no logs to stdout if true; default false</span></span><br><span class=\"line\"><span class=\"attr\">minfds</span>=<span class=\"number\">102</span>                  <span class=\"comment\">; min. avail startup file descriptors; default 1024</span></span><br><span class=\"line\"><span class=\"attr\">minprocs</span>=<span class=\"number\">20</span>                 <span class=\"comment\">; min. avail process descriptors;default 200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[supervisorctl]</span></span><br><span class=\"line\"><span class=\"attr\">serverurl</span>=unix:///tmp/supervisor.sock <span class=\"comment\">; use a unix:// URL  for a unix socket</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[program:ffmpeg]</span>                                        <span class=\"comment\">#程序唯一名称</span></span><br><span class=\"line\"><span class=\"attr\">directory</span>=/bin/                                         <span class=\"comment\">#程序路径</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=ffmpeg -re -i <span class=\"string\">&quot;rtsp://admin:d****@192.168.6.126:554/cam/realmonitor?channel=1&amp;subtype=1&quot;</span> -c copy -f flv -y rtmp://<span class=\"number\">192.168</span>.<span class=\"number\">6.116</span>:<span class=\"number\">1935</span>/live/livestream           <span class=\"comment\">#运行程序的命令</span></span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">true</span>                                          <span class=\"comment\">#是否在supervisord启动后tomcat也启动</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span>=<span class=\"number\">10</span>                                            <span class=\"comment\">#启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">true</span>                                        <span class=\"comment\">#程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启；意思为如果不是supervisord来关闭的该进程则认为不正当关闭，supervisord会再次把该进程给启动起来，只能使用该supervisorctl来进行关闭、启动、重启操作</span></span><br><span class=\"line\"><span class=\"attr\">startretries</span>=<span class=\"number\">3</span>                                          <span class=\"comment\">#启动失败自动重试次数，默认是3</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root                                               <span class=\"comment\">#用哪个用户启动进程，默认是root</span></span><br><span class=\"line\"><span class=\"attr\">priority</span>=<span class=\"number\">999</span>                                            <span class=\"comment\">#进程启动优先级，默认999，假如Supervisord需要管理多个进程，那么值小的优先启动</span></span><br><span class=\"line\"><span class=\"attr\">stopsignal</span>=INT</span><br><span class=\"line\"><span class=\"attr\">redirect_stderr</span>=<span class=\"literal\">true</span>                                    <span class=\"comment\">#把stderr重定向到stdout标准输出，默认false</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span>=<span class=\"number\">200</span>MB                           <span class=\"comment\">#stdout标准输出日志文件大小，日志文件大小到200M后则进行切割，切割后的日志文件会标示为catalina.out1,catalina.out2,catalina.out3...，默认50MB</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span> = <span class=\"number\">1</span>                            <span class=\"comment\">#stdout标准输出日志文件备份数，保存100个200MB的日志文件，超过100个后老的将被删除，默认为10保存10个</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/volume2/KingchuxingSSD512G/Maintenance/catalina.out      <span class=\"comment\">#标准日志输出位置，如果输出位置不存在则会启动失败</span></span><br><span class=\"line\"><span class=\"attr\">stopasgroup</span>=<span class=\"literal\">false</span>                                       <span class=\"comment\">#默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span></span><br><span class=\"line\"><span class=\"attr\">killasgroup</span>=<span class=\"literal\">false</span>                                       <span class=\"comment\">#默认为false，向进程组发送kill信号，包括子进程</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>#supervisord启动<br>supervisord -c &#x2F;etc&#x2F;supervisord.d&#x2F;ffmpeg.conf               </p>\n<p>#启动supervisord进程，我们在配置文件中设置了 autostart&#x3D;true 参数，在supervisord启动的时候 ffmpeg也随之启动</p>\n<p>ps -ef|grep ffmpeg      </p>\n<p><strong>程序管理</strong>　　</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status ffmpeg</span><br><span class=\"line\"></span><br><span class=\"line\">supervisorctl start ffmpeg</span><br></pre></td></tr></table></figure>\n\n\n\n<p>错误:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.d/ffmpeg.conf            </span><br><span class=\"line\">Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.                                                         </span><br><span class=\"line\">For help, use /bin/supervisord -h                       </span><br></pre></td></tr></table></figure>\n\n<p>解决办法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo unlink /tmp/supervisor.sock</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h1><iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://query.carlzeng.com:3/appsearch?q=python\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"500\"></iframe>\n\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><p>命令以及日志输出(实例)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget  https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root@DS918:/etc# python3  get-pip.py                                                                          </span><br><span class=\"line\">Collecting pip                                                                                                </span><br><span class=\"line\">  WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection bro</span><br><span class=\"line\">ken by &#x27;NewConnectionError(&#x27;: Failed </span><br><span class=\"line\">to establish a new connection: [Errno -3] Temporary failure in name resolution&#x27;)&#x27;: /packages/d4/55/90db48d85f7</span><br><span class=\"line\">689ec6f81c0db0622d704306c5284850383c090e6c7195a5c/pip-24.2-py3-none-any.whl.metadata                          </span><br><span class=\"line\">  Downloading pip-24.2-py3-none-any.whl.metadata (3.6 kB)                                                     </span><br><span class=\"line\">Collecting setuptools                                                                                         </span><br><span class=\"line\">  Downloading setuptools-72.1.0-py3-none-any.whl.metadata (6.6 kB)                                            </span><br><span class=\"line\">Collecting wheel                                                                                              </span><br><span class=\"line\">  Downloading wheel-0.44.0-py3-none-any.whl.metadata (2.3 kB)                                                 </span><br><span class=\"line\">Downloading pip-24.2-py3-none-any.whl (1.8 MB)                                                                </span><br><span class=\"line\">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.8/1.8 MB 40.6 kB/s eta 0:00:00                                  </span><br><span class=\"line\">Downloading setuptools-72.1.0-py3-none-any.whl (2.3 MB)                                                       </span><br><span class=\"line\">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.3/2.3 MB 38.3 kB/s eta 0:00:00                                  </span><br><span class=\"line\">Downloading wheel-0.44.0-py3-none-any.whl (67 kB)                                                             </span><br><span class=\"line\">Installing collected packages: wheel, setuptools, pip                                                         </span><br><span class=\"line\">Successfully installed pip-24.2 setuptools-72.1.0 wheel-0.44.0                                                </span><br><span class=\"line\">WARNING: Running pip as the &#x27;root&#x27; user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing an</span><br><span class=\"line\">d want to suppress this warning. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root@DS918:/etc# pip3 -V                                                                                      </span><br><span class=\"line\">pip 24.2 from /usr/lib/python3.8/site-packages/pip (python 3.8)  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root@DS918:/etc# pip3 install supervisor                                                                      </span><br><span class=\"line\">Collecting supervisor                                                                                         </span><br><span class=\"line\">  Downloading supervisor-4.2.5-py2.py3-none-any.whl.metadata (86 kB)                                          </span><br><span class=\"line\">Requirement already satisfied: setuptools in /usr/lib/python3.8/site-packages (from supervisor) (72.1.0)      </span><br><span class=\"line\">Downloading supervisor-4.2.5-py2.py3-none-any.whl (319 kB)                                                    </span><br><span class=\"line\">Installing collected packages: supervisor                                                                     </span><br><span class=\"line\">Successfully installed supervisor-4.2.5                                                                       </span><br><span class=\"line\">WARNING: Running pip as the &#x27;root&#x27; user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment i</span><br><span class=\"line\">nstead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.   </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.d/ffmpeg.conf            </span><br><span class=\"line\">Error: .ini file does not include supervisord section                                                         </span><br><span class=\"line\">For help, use /bin/supervisord -h                       </span><br></pre></td></tr></table></figure>\n\n<p>错误解决办法: 在配置文件中添加supervisord section&#x2F;章节</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl start ffmpeg                               </span><br><span class=\"line\">unix:///tmp/supervisor.sock no such file </span><br></pre></td></tr></table></figure>\n\n<p>解决办法是: </p>\n<p>运行时使用:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.d/ffmpeg.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/supervisord.d/ffmpeg.conf   </span><br><span class=\"line\">1. 使用默认的模版</span><br><span class=\"line\">2. 在最后面添加一个章节 [program:ffmpeg]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>发现推流没有正常, 查询进程status, 一切正常; 期间的外网IP变化多次, 网络也不稳定了DDNS错误(重启了猫以后, wan3没有拨号成功, 导致所有的网络服务都失去正确的ip, ddns无法灵活动态获取成功拨号了的虚拟wan口IP, 怎么解决?)</p>\n<p>解决办法:</p>\n<p>supervisorctl restart ffmpeg </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@DS:~# supervisorctl status ffmpeg</span><br><span class=\"line\">ffmpeg                           RUNNING   pid 11310, uptime 19 days, 6:37:39</span><br><span class=\"line\">root@DS:~# supervisorctl restart ffmpeg</span><br><span class=\"line\">ffmpeg: stopped</span><br><span class=\"line\">ffmpeg: started</span><br></pre></td></tr></table></figure>\n\n<p>这样重启后, 推流马上正常了, 很方便, 直接了当略过了ffmpeg里面的细节.</p>\n<h3 id=\"推流异常\"><a href=\"#推流异常\" class=\"headerlink\" title=\"推流异常\"></a>推流异常</h3><p>后来发现不是这个supervisor进程守护故障, 由于中继K2P将上游的K2P路由器无故攻击下线(由于WIFI的信道变化, 而下游K2P用正确的密码去不停连接错误信道的上游K2P路由器), 导致上游的K2P路由器变成无法上网的状态</p>\n<p>这样的外围出错, 导致了上游K2P路由器无法上网而使TP1Z摄像头的断开了网络(它变成无法上网), 我不明白无法上网, 应该是并且导致它无法连接到SRS本地服务器, 这样就导致推流失败了.</p>\n<p>当我找到推流异常问题的根源后, 通过 <a href=''>WIFI远程无线中继之K2P刷机Padavan无线桥接功能</a> 来锁定信道后, 让上游的K2P路由器工作正常, 然后需要手动重新使用以下命令:</p>\n<p>supervisorctl restart ffmpeg</p>\n<p>来重新开启正常的推流. 通过这类外围故障, 更加印证了这个supervisor进程守护是可靠的.</p>\n<p>然而进程虽然一直正常存在, 但不代表它一直正常按预期完成指定的任务!</p>\n<h3 id=\"摄像头IP改变后重新配置推流\"><a href=\"#摄像头IP改变后重新配置推流\" class=\"headerlink\" title=\"摄像头IP改变后重新配置推流\"></a>摄像头IP改变后重新配置推流</h3><p>ffmpeg: ERROR (spawn error) 摄像头IP地址改变以后(从6.115 到 6.211), 需要先</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. <span class=\"built_in\">kill</span> 所有supervisord的进程ID</span><br><span class=\"line\">2. supervisord -c /etc/supervisord.d/ffmpeg.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后才能使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl restart ffmpeg</span><br></pre></td></tr></table></figure>\n\n\n\n<p>否则会一直报错: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@DS918:/tmp<span class=\"comment\"># supervisorctl restart ffmpeg                                                                               </span></span><br><span class=\"line\">ffmpeg: ERROR (not running)                                                                                                 </span><br><span class=\"line\">ffmpeg: ERROR (spawn error)</span><br></pre></td></tr></table></figure>\n\n<p>为了避免DHCP进一步改变, 我到OpenWrt中, 设置了摄像头的静态IP地址.</p>\n<p>这样即便下一次我改变AP路由器设备, 摄像头利润上也会分配到最新的ip地址: 192.168.6.211</p>\n<h1 id=\"灵感来源\"><a href=\"#灵感来源\" class=\"headerlink\" title=\"灵感来源\"></a>灵感来源</h1><p><a href=\"https://www.cnblogs.com/dalianpai/p/13151952.html\">Supervisor安装与配置二</a></p>\n<p><a href=\"https://www.carlzeng.top/202304131736.html\">动态公网IP 和 SRS-CarlZeng</a></p>","categories":[{"name":"NAS","path":"api/categories/NAS.json"}],"tags":[{"name":"NAS","path":"api/tags/NAS.json"},{"name":"linux","path":"api/tags/linux.json"},{"name":"Python","path":"api/tags/Python.json"},{"name":"supervisor","path":"api/tags/supervisor.json"}]}