{"title":"云盘转NAS，云盘转化为本地磁盘，跨平台跨设备同步-CarlZeng","slug":"云盘转NAS，云盘转化为本地磁盘，跨平台跨设备同步-CarlZeng","date":"2023-08-26T13:04:00.000Z","updated":"2024-04-10T12:15:17.340Z","comments":true,"path":"api/articles/云盘转NAS，云盘转化为本地磁盘，跨平台跨设备同步-CarlZeng.json","excerpt":" [Figure] （20231004更新：发现NAS收集展示15年+的个人所有照片后，赞赞赞）音乐文件的跨平台同步需求越来越急切。各大平台对音乐版权的收紧，使得我不在寻找播放软件APP的解决方案，转而更希望保存我喜爱的歌曲。存储在网盘中不占用手机内存和电脑硬盘是个不错的选择（电影文件显然也是类似的）介绍下载器Aria2c，开启无限制下载参数，为某网盘下载提速超6倍","covers":["https://www.evernote.com/shard/s122/sh/050f3b8c-d29b-4e2c-92fa-49c631a2cfb3/V1SujW0XEuoOodXuQnwJIS1TjB6Qmkq2kAfXaKd5uDrgRBOiAJ06ykBWIg/deep/0/image.png","https://img.carlzeng.top:3/i/2024/02/28/65df1aaa5994d.png","https://www.evernote.com/shard/s122/sh/9abacbba-59d7-4b76-a067-816ce42549fc/AGLvh1hpEOIgvktrp73X36krNuRVl43i7FPKouiXx7V0h4veVuPBghRayw/deep/0/image.png"],"content":"<img class=\"lozad\" data-src=\"https://www.evernote.com/shard/s122/sh/050f3b8c-d29b-4e2c-92fa-49c631a2cfb3/V1SujW0XEuoOodXuQnwJIS1TjB6Qmkq2kAfXaKd5uDrgRBOiAJ06ykBWIg/deep/0/image.png\">\n\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>对软路由硬件J4125之类的关注，想要它虚拟出另外一个系统实现NAS本地云存储的功能，<br>可是碍于广大群众对这种集成方案的实用性、稳定性、低维护性产生实践中的顾虑和问题，更倾向于独立的NAS硬件。<br>我也一直在思考NAS在日常生活中除了备份旧文件用处的其他实用性考究。<br>（20231004更新：发现NAS收集展示15年+的个人所有照片后，赞赞赞）</p>\n<p>音乐文件的跨平台同步需求越来越急切。各大平台对音乐版权的收紧，使得我不在寻找播放软件APP的解决方案，转而更希望保存我喜爱的歌曲。存储在网盘中不占用手机内存和电脑硬盘是个不错的选择（电影文件显然也是类似的）</p>\n<p><em><strong>介绍下载器Aria2c，开启无限制下载参数，为某网盘下载提速超6倍</strong></em></p>\n<span id=\"more\"></span>\n\n<p>20240129 新增 “最大尝试次数(max-tries)与重试等待时间(retry-wait)”</p>\n<p>20240410 发现aria2对某度网盘的提速失效（而尴尬的是许多Switch游戏都是放在某度网盘），找到临时解决方案：<br>        磁力下载mega.nz；比如: <a href=\"https://darthsternie.net/switch-firmwares/\">Darthsternie’s Firmware Archive</a>，选MEGA的链接，记过2-3分钟下载到某度网盘需要1h的18.0.0固件.<br>        qBittorrent；比如：<a href=\"https://yyrtt.com/game\">悠游任天堂</a>，搜索点击特定游戏后用BT下载</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ol>\n<li><p>将 阿里云盘 开放出 WebDAV 服务</p>\n</li>\n<li><p>将 rclone 用于同步 电脑中 和 阿里云盘 中的文件和目录</p>\n</li>\n<li><p>将 nplayer 用于播放 WebDAV中的音乐（电影也是一样）<br>　　安卓手机手机都可以的，电脑上用Potplayer之类的。</p>\n</li>\n</ol>\n<h1 id=\"技术步骤汇总\"><a href=\"#技术步骤汇总\" class=\"headerlink\" title=\"技术步骤汇总\"></a>技术步骤汇总</h1><ol>\n<li>工具#1： <a href=\"https://github.com/messense/aliyundrive-webdav\">https://github.com/messense/aliyundrive-webdav</a></li>\n</ol>\n<p>根据您平台的构架来选择不同的可执行文件（以我的MAC为例，下载：<a href=\"https://github.com/messense/aliyundrive-webdav/releases/tag/v2.3.2\">aliyundrive-webdav-v2.3.2.apple-darwin.tar.gz</a>）</p>\n<p>1.1 解压缩后得到文件：aliyundrive-webdav</p>\n<p>1.2 Terimal运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliyundrive-webdav -r eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIzYjg0YzM0OTczNjA0OTk4OTRjYjI3OWUzOTM1ZTA0OSIsImF1ZCI6IjczZTYxMTgzMWE3YzRkODdhYzQ5Yzg0ODFiZjlmMmM0IiwiZXhwIjoxNzAwNzI5MTM4LCJpYXQiOjE2OTI5NTMxMzgsImp0aSI6IjJjNDVlZDdhNWUyZjQxOTg5ZTk2NDA4NmQ1OTE1MzhiIn0.LcDVLaeqaQWpvE7eBbEv-KnA27JP6bmk7Rxw1vK6ZD3EqSGQuaH-DVE6lU8NneiN1h0z8mW1ImrkjFQ1234</span><br></pre></td></tr></table></figure>\n\n<p>如何获取这个refresh-token，作者在页面做了详细的说明：<a href=\"https://github.com/messense/aliyundrive-webdav%E3%80%82\">https://github.com/messense/aliyundrive-webdav。</a><br>实测也可以使用Chrome登录云盘后<a href=\"https://www.aliyundrive.com/drive/file/backup%EF%BC%8C\">https://www.aliyundrive.com/drive/file/backup，</a><br>在Chrome &gt; Application &gt; Local Storage &gt; share_token 中复制。  </p>\n<p>成功运行后的日志类似：</p>\n<pre><code>    2023-08-25T21:10:27.769474+08:00 INFO aliyundrive\\_webdav::drive: refresh token succeed\n    \n    2023-08-25T21:10:30.984144+08:00 INFO aliyundrive\\_webdav::drive: found default drive _drive\\_id_\\=71999\\*\\*\\*\\*\n    \n    2023-08-25T21:10:30.985527+08:00 INFO aliyundrive\\_webdav::webdav: listening on http://0.0.0.0:8080\n</code></pre>\n<p>1.3 运行后WebDAV就启用了，可以通过Mac的Finder来验证：Finder &gt; Go &gt; Connect to Server</p>\n<p>输入<a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080</a></p>\n<p>在提示的用户名密码都输入：admin</p>\n<ol start=\"2\">\n<li>工具#2：<a href=\"https://github.com/rclone/rclone\">https://github.com/rclone/rclone</a></li>\n</ol>\n<p>获取：根据您平台的构架来选择不同的可执行文件（以我的MAC为例，下载：rclone-v1.63.1-osx-arm64.zip）</p>\n<p>2.1 解压缩后得到文件：rclone</p>\n<p>2.2 Terimal运行配置（一次性）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rclone config</span><br><span class=\"line\">        name\\&gt; webdav</span><br><span class=\"line\">        Storage\\&gt; 47 url\\&gt; http://127.0.0.1:8080</span><br><span class=\"line\">        vendor&gt; 6 user\\&gt; admin</span><br><span class=\"line\">        password: admin  </span><br></pre></td></tr></table></figure>\n\n<p>其他的参数都直接回车，默认即可。<br>第二步中的47指向webdav</p>\n<p>47 &#x2F; WebDAV<br> \\ (webdav)</p>\n<p>2.3 Terimal运行配置（日常同步）：</p>\n<pre><code>    rclone lsd webdav:\n            列出目录\n    \n    rclone ls webdav:\n            列出根目录下所有文件\n    \n    rclone copy /Users/\\*\\*\\*/MusicSyncCar webdav:MusicSyncCar\n</code></pre>\n<p>​<br>​        rclone sync --interactive &#x2F;Users&#x2F;***&#x2F;MusicSyncCar webdav:MusicSyncCar<br>​                works great, will ask for new files to sync<br>​<br>​        rclone sync &#x2F;Users&#x2F;***&#x2F;MusicSyncCar webdav:MusicSyncCar<br>​                works great too, without any question, but minor error.  </p>\n<p>详细的说明：<a href=\"https://rclone.org/docs/\">https://rclone.org/docs/</a><br>如下（注意下面列子的remote就是webdav的创建时的名称）  </p>\n<p>rclone uses a system of subcommands. For example</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rclone ls remote:path                                   # lists a remote</span><br><span class=\"line\">rclone copy /local/path remote:path                     # copies /local/path to the remote</span><br><span class=\"line\">rclone sync --interactive /local/path remote:path       # syncs /local/path to the remote</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>工具#3：<a href=\"https://www.52pojie.cn/thread-1240738-1-1.html\">Nplayer安卓版</a></li>\n</ol>\n<p>直接把链接中的apk下载后，在手机中安装添加WebDAV, 主要的参数：</p>\n<p>主机：选择运行aliyundrive-webdav的电脑的局域网IP地址（<a href=\"http://192.168.6.221:8080）\">http://192.168.6.221:8080）</a></p>\n<p>用户名&#x2F;密码：admin</p>\n<p>端口：8080</p>\n<h2 id=\"如何获取这个阿里云盘refresh-token\"><a href=\"#如何获取这个阿里云盘refresh-token\" class=\"headerlink\" title=\"如何获取这个阿里云盘refresh-token\"></a>如何获取这个阿里云盘refresh-token</h2><p>可以用于影视或TVBOX中提示时的Refresh_Token</p>\n<ol>\n<li>浏览器打开并登录阿里云<a href=\"https://www.aliyundrive.com/drive/\">https://www.aliyundrive.com/drive/</a></li>\n<li>在Chrome &gt; Application &gt; Local Storage &gt; share_token 中复制<br>或者打开console（开发者工具中）运行下面的JS<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;share_token&#x27;</span>)).<span class=\"property\">access_token</span></span><br></pre></td></tr></table></figure>\n此方法已失效，最新的必须扫码登录或短信验证，后用工具显示：<br>方法一<br> <a href=\"https://aliyundriver-refresh-token.vercel.app/\">https://aliyundriver-refresh-token.vercel.app/</a></li>\n</ol>\n<p>具体的项目地址：<a href=\"https://github.com/itxve/aliyundriver-refresh-token\">https://github.com/itxve/aliyundriver-refresh-token</a></p>\n<p>方法二：<br>        用Webdav那个安卓APP，登录阿里云盘；设置里面有可以复制Refresh_Token的地方</p>\n<p>二者都是通过API的方式获取的Refresh_Token</p>\n<h1 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h1><p>NAS是网络接入存储（Network Attached Storage）的简称，也就是存储系统直接接入网络，通过网络交换机，将服务器与存储连接在一起，用户可以通过TCPIP协议访问数据，并通过标准的业界文件共享协议，如CIFS、NFS来实现目录级的共享。</p>\n<h1 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h1><p>感谢所有以上工具的作者与参与者，感恩。</p>\n<h1 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h1><p>文章分享没有几天，聪明的朋友就寻出了不便之处：上面这个方案，需要电脑上开启WebDAV服务然后手机才能连接上去播放媒体文件等访问网盘的内容。</p>\n<p>那么有没有办法直接把WebDAV架设在手机上呢？这样就不需要一台‘服务器’开着。答案是有的：</p>\n<p><a href=\"https://github.com/eritpchy/aliyundrive-webdav/releases\">https://github.com/eritpchy/aliyundrive-webdav/releases</a></p>\n<p>下载这个apk文件<a href=\"https://github.com/eritpchy/aliyundrive-webdav/releases/download/3.1.0/net.xdow.webdavaliyundriver.3.1.0.release.apk\">net.xdow.webdavaliyundriver.3.1.0.release.apk</a></p>\n<p>（视频介绍：<a href=\"https://www.bilibili.com/video/BV1zu411D7mi/\">通过安卓手机启用阿里云盘webdav服务，实现把云盘资料挂载为本地硬盘使用，无压缩播放原画质视频</a>）</p>\n<p>安装到安卓手机上，打开这个APP，设置好Refresh_token（扫码获取），手机上点击启动WebDAV服务。</p>\n<p>在切换到手机上nplayer，同理，建立新的连接到手机本机（127.0.0.1）8080端口上的WebDAV即可。</p>\n<hr>\n<hr>\n<h1 id=\"NAS安装Aria2下载服务器\"><a href=\"#NAS安装Aria2下载服务器\" class=\"headerlink\" title=\"NAS安装Aria2下载服务器\"></a>NAS安装Aria2下载服务器</h1><p>J4125的下载器？如何提交远程下载任务？应用baidu网盘下载<br>    <a href=\"https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html\">https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html</a></p>\n<pre><code>[Aria2 Pro Docker](https://hub.docker.com/r/p3terx/aria2-pro)\n会在Mac的docker中开启两个container，可是6800怎么也无法映射出来。\n各种尝试以后还是最终放弃。\n\nhttp://127.0.0.1:8080/#!/downloading    \n终于找打一个可用的+运行在docker里面的[aria2](https://hub.docker.com/r/wahyd4/aria2-ui)\n</code></pre>\n<p>为了方便映射到NAS中目录，在NAS的docker中安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker run -d --restart=always --name aria2-webui -p 8080:80 -p 6800:6800 -v /volume2/KingchuxingSSD512G/Download:/data onisuly/aria2-with-webui</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这样运行后</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Aria2: http://yourip/ui/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">FileManger: http://yourip</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Rclone: http://yourip/rclone</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Please use admin/admin as username and password to login <span class=\"keyword\">for</span> the first time.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>考虑到大文件下载还是放到NAS的大容量固态硬盘中存储，还是把这个aria2安装到docker中去，\n用web的形式打开管理界面，查询或者提交下载任务。\n\n更改 User Agent from\naria2/1.36.0\nto\npan.baidu.com\n\n\n首先在控制面板——终端机和SNMP里面启用SSH功能\n\n紧接着输入sudo -i回车，获取root权限，这一步还要再一次输入密码，也是不显示\n\n接下来输入docker pull XXX/XXX（X代表的就是你索要拉取的镜像名称），例如我要拉取jellyfin的docker镜像，就输入docker pull jellyfin/jellyfin即可，然后回车，接下来你会发现镜像开始下载了\n</code></pre>\n<p><a href=\"https://www.moewah.com/archives/3147.html\">https://www.moewah.com/archives/3147.html</a><br>    docker run -d –name aria2-webui -p 8080:80 -p 6800:6800 -v &#x2F;volume2&#x2F;KingchuxingSSD512G&#x2F;Download:&#x2F;data onisuly&#x2F;aria2-with-webui</p>\n<pre><code>成功了 http://192.168.6.203:8080/#!/downloading 测试提交某度网盘的5G+文件下载，正常龟速90+KB/s\n总结：\n    请忽略上面的其他的docker镜像， NAS的SSH中用 \nsudo docker pull onisuly/aria2-with-webui\n    然后\nsudo docker run -d --name aria2-webui -p 8080:80 -p 6800:6800 -v /volume2/KingchuxingSSD512G/Download:/data onisuly/aria2-with-webui\n</code></pre>\n<p>实践多任务从某度网盘下载NS大游戏文件，下载列表惊讶的发现（与默认的龟速相比），持续地平均速度竟然达到了860KB&#x2F;s<br>        1. 用浏览器插件中的API下载（适用于 IDM，NDM 以及浏览器自带下载）获取网盘中的链接<br>        2. 设置（Settings）》Aria2 Setting 〉 Http&#x2F;FTP&#x2F;SFTP Settings 》 Max Connection Per Server<br>                设置为10，单个server10个链接；正在测试调整为15，持续观察新任务的下载速度。</p>\n<h2 id=\"改进这个NAS中的docker-aria2-webui\"><a href=\"#改进这个NAS中的docker-aria2-webui\" class=\"headerlink\" title=\"改进这个NAS中的docker aria2-webui\"></a>改进这个NAS中的docker aria2-webui</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#设置了自动重启</span><br><span class=\"line\">docker update --restart=always aria2-webui</span><br><span class=\"line\"></span><br><span class=\"line\">docker start aria2-webui</span><br><span class=\"line\">#发现端口映射并没有映射出期待的端口</span><br><span class=\"line\"></span><br><span class=\"line\">#继续设置保存到docker中，下次自动就映射出来</span><br><span class=\"line\">root@DS918:~# docker update -p 8080:80 -p 6800:6800 aria2-webui</span><br><span class=\"line\">aria2-webui</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程提交下载任务至NAS\"><a href=\"#远程提交下载任务至NAS\" class=\"headerlink\" title=\"远程提交下载任务至NAS\"></a>远程提交下载任务至NAS</h2><p>Nginx Proxy Manager(NPM)反代aria2的下载工具至外网管理<br>人在宽带的外网时候可以提交下载任务至NAS，这样可以不受地理位置限制的下载，充当下载服务器的目的。<br>通过Nginx Proxy Manager来反代两个地址</p>\n<ol>\n<li><a href=\"http://192.168.*.*:8080/\">http://192.168.*.*:8080</a><br> 这是aria2的web面板UI（AriaNg）的本地管理地址，把这个地址反代到外网比如 https:&#x2F;&#x2F;@.@@@@@.com:port<br> 这样就可以带SSL证书的情况下原创访问aria2面板。<br> NPM中新增上面这样一条的反代记录<br>         <a href=\"http://192.168.*.*:8080/\">http://192.168.*.*:8080</a> -&gt; https:&#x2F;&#x2F;@aria@.@@@@@.com:port<br> Note: 这个8080端口是从docker中映射出来的, 下面的6800端口也是同样道理<br> 这个面板也可以使用网络上公开的公共的面板，因为它只是一个UI。<br> 真正的下载服务器服务是RPC的服务信息。</li>\n<li><a href=\"http://192.168.*.*:6800/jsonrpc\">http://192.168.*.*:6800/jsonrpc</a><br> 这是aria2后台服务的地址，Aria2 PRC Address，协议http，Aria2 RPC Http Request Method POST（默认）<br> 在第一步的外网面板地址（https:&#x2F;&#x2F;@.@@@@@.com:port）中配置Aria2 RPC信息，也必须是https协议（已被默认强制）<br> NPM中新增上面这样一条的反代记录<br>         <a href=\"http://192.168.*.*:6800/jsonrpc\">http://192.168.*.*:6800/jsonrpc</a> -&gt; <a href=\"https://rpc@.@@@@@.com:port\">https://rpc@.@@@@@.com:port</a></li>\n</ol>\n<p>这样2条反代配置以后，返回第一步的Aria2面板（AriaNg）设置RPC地信息为反代以后的https信息（地址和端口), 即可<br>实现外网时也可提交下载任务至NAS。</p>\n<p><img data-src=\"https://img.carlzeng.top:3/i/2024/02/28/65df1aaa5994d.png\"></p>\n<h3 id=\"RPC下载的’保存路径’\"><a href=\"#RPC下载的’保存路径’\" class=\"headerlink\" title=\"RPC下载的’保存路径’\"></a>RPC下载的’保存路径’</h3><p>油猴插件的发送至RPC非常方便，然后速度也快也稳定不断流（夸克480KB&#x2F;s），可是发现RPC的文件下载后在docker的映射目录找不到。<br>检查PRC的详细信息才知道，原来文件信息携带了Windows的目录信息 D:@@@.nsp，这直接导致NAS的docker下载成功后，文件根本找不到。<br>估计停留在了内存里面了，也不知道怎么取下来 :-)</p>\n<p>测试尝试解决（SSH中）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --name aria2-webui -p 8080:80 -p 6800:6800 -v /volume2/KingchuxingSSD512G/Download:/data onisuly/aria2-with-webui</span><br><span class=\"line\"></span><br><span class=\"line\">        docker: Error response from daemon: Conflict. The container name &quot;/aria2-webui&quot; is already in use by container &quot;3878b3e6c566c395ee8ffe2538a4ee3de892458facd72c5c6eb7a0995545deef&quot;. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">进入docker里面的命令行</span></span><br><span class=\"line\">sudo docker exec -it aria2-webui /bin/bash</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后还是到Docker的UI界面，操作》重置，操作》启动。这才重启成功</p>\n<img class=\"lozad\" data-src=\"https://www.evernote.com/shard/s122/sh/9abacbba-59d7-4b76-a067-816ce42549fc/AGLvh1hpEOIgvktrp73X36krNuRVl43i7FPKouiXx7V0h4veVuPBghRayw/deep/0/image.png\">\n最后竟然在插件助手的PRC配置中找到一个'保存路径'的设置, 就是这个配置告知了aria2c应该保存文件到那个目录。\n在个人的配置环境，我要配置到docker里面的目录/data，然后就能看到映射出来的目录中看到下载的文件了。\n     \n\n<h2 id=\"最大尝试次数-max-tries-与重试等待时间-retry-wait\"><a href=\"#最大尝试次数-max-tries-与重试等待时间-retry-wait\" class=\"headerlink\" title=\"最大尝试次数(max-tries)与重试等待时间(retry-wait)\"></a>最大尝试次数(max-tries)与重试等待时间(retry-wait)</h2><p>下载某度网盘的单文件大于10G时（速度一般在800 - 900KB&#x2F;s，实际下载过程要超过24h），无人值守的下载过程中经常遇到错误（比如status 403，或者链接被某度网盘重置）</p>\n<p>​\t手动重试：</p>\n<ol>\n<li>点击AriaNg的左侧菜单 &gt; 已完成&#x2F;已停止 &gt; 点击 重试。即可有一次开始断点续传继续下载。</li>\n<li>有时即便重试仍然无法正常继续下载（这是往往是链接地址自动无效了），需要手动去网盘页面重新获取新的“API下载”下载地址，然后新建下载（系统自动判断后会断电续传）</li>\n</ol>\n<p>尝试通过设置一下设置缓解这种手动重试的动作：</p>\n<ol>\n<li>最大尝试次数(max-tries) 从 5 修改为：8</li>\n<li>重试等待时间(retry-wait) 从 0 修改为：120秒</li>\n</ol>\n<p>20240129 等待验证是否能有效减少人工干预重试的次数….</p>\n<h1 id=\"突破aria2c的16连接数限制\"><a href=\"#突破aria2c的16连接数限制\" class=\"headerlink\" title=\"突破aria2c的16连接数限制\"></a>突破aria2c的16连接数限制</h1><p>max-connection-per-server，如上图所示某度下载默认的下载92KB&#x2F;s，只打开了5个链接数。<br>目标：突破aria2的16连接数限制，这个16是aria2原作者做的默认。<br>网上出现很多关于这样设置默认的讨论（有的说是为了防止DOS）<br>同时也出现各种解决方法，比如：<br>Linux<br><a href=\"https://aur.archlinux.org/packages/aria2-unlimited\">https://aur.archlinux.org/packages/aria2-unlimited</a><br><a href=\"https://github.com/P3TERX/Aria2-Pro-Core\">https://github.com/P3TERX/Aria2-Pro-Core</a><br>增强版安装(适用于旁路由已经@墙的情况下)<br>curl -fsSL git.io&#x2F;aria2c.sh | bash</p>\n<p>Windows 用法<br>aria2c.exe –max-connection-per-server&#x3D;64 –split&#x3D;64</p>\n<p>下面讲解如何在以上的NAS中，NAS内docker环境来利用Aria2-Pro-Core来突破链接数限制</p>\n<h2 id=\"步骤1-SSH进NAS\"><a href=\"#步骤1-SSH进NAS\" class=\"headerlink\" title=\"步骤1: SSH进NAS\"></a>步骤1: SSH进NAS</h2><p>然后进docker的bash：<br>sudo docker exec -it aria2-webui &#x2F;bin&#x2F;bash</p>\n<p>其实程序的部署都写在docker的start.sh文件中了，观察docker的进程主要有：</p>\n<ol>\n<li>aria2c –conf-path&#x3D;$conf –log&#x3D;&#x2F;conf&#x2F;aria2.log &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</li>\n<li>darkhttpd &#x2F;aria2-ng –port 80 –daemon –no-listing –no-server-id $ipv6</li>\n</ol>\n<h2 id=\"升级aria2c主程序\"><a href=\"#升级aria2c主程序\" class=\"headerlink\" title=\"升级aria2c主程序\"></a>升级aria2c主程序</h2><p>由于只有一个docker，直接(适用于旁路由已经@墙的情况下)<br>curl -fsSL git.io&#x2F;aria2c.sh | bash<br>我的情况无法链接（下载超时），直接下载好aria2c.sh文件，之后放到&#x2F;data（这个文件夹已经映射到NAS的某个文件目录），<br>在NAS中这很容易操作（比如分享到其他电脑为局域网内共享文件夹，从其他的系统中传入文件）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在docker的 /bin/bash 中运行</span><br><span class=\"line\">./aria2c.sh </span><br><span class=\"line\">        [INFO] Get CPU architecture ...</span><br><span class=\"line\">        [INFO] Architecture: x86_64 (apk)</span><br><span class=\"line\">        [INFO] Get Aria2 Pro Core download URL ...</span><br><span class=\"line\">        [INFO] Download URL: https://github.com/P3TERX/Aria2-Pro-Core/releases/download/1.36.0_2021.08.22/aria2-1.36.0-static-linux-amd64.tar.gz</span><br><span class=\"line\">        [INFO] Installing Aria2 Pro Core ... </span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更改aria2c主程序配置文件\"><a href=\"#更改aria2c主程序配置文件\" class=\"headerlink\" title=\"更改aria2c主程序配置文件\"></a>更改aria2c主程序配置文件</h2><p>vi &#x2F;conf&#x2F;aria2.conf<br>修改<br>max-connection-per-server&#x3D;1024<br>split&#x3D;100</p>\n<p>修改后aria2.conf文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir=/data</span><br><span class=\"line\">input-file=/conf/aria2.session</span><br><span class=\"line\">save-session=/conf/aria2.session</span><br><span class=\"line\">dht-file-path=/conf/dht.dat</span><br><span class=\"line\">dht-file-path6=/conf/dht6.dat</span><br><span class=\"line\">netrc-path=/conf/.netrc</span><br><span class=\"line\"></span><br><span class=\"line\">log-level=notice</span><br><span class=\"line\"></span><br><span class=\"line\">enable-http-pipelining=true</span><br><span class=\"line\">max-concurrent-downloads=3</span><br><span class=\"line\">max-connection-per-server=1024</span><br><span class=\"line\">min-split-size=10M</span><br><span class=\"line\">split=100</span><br><span class=\"line\">continue=true</span><br><span class=\"line\">max-overall-download-limit=0</span><br><span class=\"line\">max-overall-upload-limit=1K</span><br><span class=\"line\"></span><br><span class=\"line\">disable-ipv6=true</span><br><span class=\"line\"></span><br><span class=\"line\">enable-rpc=true</span><br><span class=\"line\">rpc-listen-all=true</span><br><span class=\"line\">rpc-allow-origin-all=true</span><br><span class=\"line\">rpc-listen-port=6800</span><br><span class=\"line\"></span><br><span class=\"line\">seed-ratio=0</span><br><span class=\"line\">seed-time=0</span><br></pre></td></tr></table></figure>\n\n<p>如何测试这个Aria2新版可以把连接数提高到64（或更高）呢？<br>pkill aria2c<br>aria2c –conf-path&#x3D;&#x2F;conf&#x2F;aria2.conf –log&#x3D;&#x2F;conf&#x2F;aria2.log<br>这个kill aria2c的操作，直接导致docker的整个容器下线了，说明有守护进程：一发现aria2c进程挂了，就直接停掉整个docker容器</p>\n<p>安装后依然无效，<br>发现默认的aria2c.sh把程序安装到了&#x2F;usr&#x2F;local&#x2F;bin目录，这个不是docker中aria2c默认的目录<br>解决办法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">cp /usr/local/bin/aria2c aria2c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改Aria2c的面板AriaNg\"><a href=\"#修改Aria2c的面板AriaNg\" class=\"headerlink\" title=\"修改Aria2c的面板AriaNg\"></a>修改Aria2c的面板AriaNg</h2><p>修改了cp &#x2F;data&#x2F;aria-ng-2d4f618b32.min.js &#x2F;aria2-ng&#x2F;js&#x2F;<br>让面板的验证可以调节最大链接数<br>darkhttpd 无法重启， 等待目前的2个下载数结束以后，可以安全地重启docker<br>        &#x2F;preset-conf&#x2F;start.sh </p>\n<p>s6-setuidgid $PUID:$PGID darkhttpd &#x2F;aria2-ng –port 80 –daemon –no-listing –no-server-id $ipv6</p>\n<p>正在测试并熟悉：修改了docker中的文件（未映射出来）后，重启docker会不会保留修改后的版本，还是重新从pull来的docker映像中获取默认版本？<br>结果：好像是会保留修改了配置文件的docker中的所有内容。</p>\n<p>通过直接修改aria-ng-2d4f618b32.min.js的方式把max-connection-per-server改到64后，UI操作可以修改超过16，<br>可是UI报错：We encounter a problem while processing the option: max-connection-per-server<br>说明我先要去升级aria2c，改到新的无限制版，再来测试UI传递情况。</p>\n<p>最新发现：不需要这么麻烦，直接在浏览器的开发者模式，通过覆盖js的办法，可以绕过这个AriaNg面板的Max Connection Limit为16的限制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搜索&quot;max: 16&quot;后修改文件：aria-ng-2d4f618b32.min.js</span><br><span class=\"line\">        &quot;max-connection-per-server&quot;: &#123;</span><br><span class=\"line\">            type: &quot;integer&quot;,</span><br><span class=\"line\">            defaultValue: &quot;1&quot;,</span><br><span class=\"line\">            required: !0,</span><br><span class=\"line\">            min: 1,</span><br><span class=\"line\">            max: 164</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure>\n<p>就是这个164，原来的内容是16. 是darkhttpd给开放的80端口并把&#x2F;aria2-ng文件夹的内容作为web服务的内容。</p>\n<h2 id=\"实测效果\"><a href=\"#实测效果\" class=\"headerlink\" title=\"实测效果\"></a>实测效果</h2><p>设置多线程下载的关键在于：</p>\n<ol>\n<li>连接数（max-connection-per-server）：</li>\n<li>分块数（split-count）：<br>二者相辅相成，如果连接数64，但是分块40；那么也就只会进行40个网络链接。<br>最大连接数与速度的对应关系（夸克举例）<table>\n<thead>\n<tr>\n<th>连接数，分块数</th>\n<th>下载速度</th>\n<th>感受</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10</td>\n<td>90KB&#x2F;s</td>\n<td>大文件下载超过24h被某度虐晕</td>\n</tr>\n<tr>\n<td>46</td>\n<td>1.45MB&#x2F;s</td>\n<td>nice</td>\n</tr>\n<tr>\n<td>160</td>\n<td>5.4MB&#x2F;s</td>\n<td>大约15分钟下载完4.7GB的文件</td>\n</tr>\n<tr>\n<td>360</td>\n<td>12.4MB&#x2F;s</td>\n<td>大约25分钟下载完16.3GB的文件</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>不要太贪心，其实服务器升级一下就可以实现底层检测这种单IP链接过来线程数太多的情况，然后大数据join一下那些用户，直接封号，芭比Q了<br>适可而止，适度适量。<br>持续实践中：某度网盘太坏了，即便是如上修改后，最大链接数也只能到11个，真是让人又爱又恨。</p>\n<p>今天发现用160个连接数去下载普通的网站上的资源（链接类型简单，比如软件等），它的速度十分惊人。赞！</p>\n<div class=\"tabs\" id=\"实践技巧\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#实践技巧-1\">实践技巧 1</a></li><li class=\"tab\"><a href=\"#实践技巧-2\">实践技巧 2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"实践技巧-1\"><p>当开启了Max Connection Per Server 为1024后（这个默认值最大值是16），大文件的下载（比如超过4G），真正限制速度的变成：分块数多少的值；当我把分块数调整到360时，我发现aria2会开启360个链接到服务器，这时多线程下载速度达到了每秒12兆左右。<br>感受：这个速度我在局域网拷贝文件的速度差不多了，跟U盘拷贝，机械硬盘拷贝的速度差不多了；网盘变成了本地机械硬盘。</p></div><div class=\"tab-pane\" id=\"实践技巧-2\"><p>小文件的下载（比如280M），即便我们把分块数调整到360时，我发现aria2仅会开启32个链接到服务器，这时多线程下载速度在每秒1.1兆左右。</p></div></div></div>\n\n\n\n<h2 id=\"Next：go的并发下载器\"><a href=\"#Next：go的并发下载器\" class=\"headerlink\" title=\"Next：go的并发下载器\"></a>Next：go的并发下载器</h2><p>学习Go的好项目</p>\n<p><a href=\"https://zmis.me/user/zmisgod/post/1652\">写一个简单的go的并发下载器</a>\t</p>\n<p>代码：<a href=\"https://github.com/zmisgod/gofun/blob/master/downloader/downloader_test.go\">https://github.com/zmisgod/gofun/blob/master/downloader/downloader_test.go</a></p>\n<p>直接在IDEA里面执行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text := <span class=\"string\">&quot;https://qdall01.baidupcs.com/file/7d19b9b918aa2a8378fbc97e09546d8b?bkt=en-24c643f198a62f889617b178e5cec2bac5c80cde035646474703157dcd274bbba0dd05b567b466d1&amp;fid=1996670861-309847-954183442172954&amp;time=1615470389&amp;sign=FDTAXUGERLQlBHSKfWaqir-DCb740ccc5511e5e8fedcff06b081203-DLIjwClp8jhvTCtezZG1c5EB%2BoI%3D&amp;to=92&amp;size=274395838&amp;sta_dx=274395838&amp;sta_cs=21142&amp;sta_ft=mkv&amp;sta_ct=7&amp;sta_mt=7&amp;fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Cct&amp;ctime=1424274646&amp;mtime=1486178443&amp;resv0=-1&amp;resv1=0&amp;resv2=rlim&amp;resv3=5&amp;resv4=274395838&amp;vuk=1996670861&amp;iv=0&amp;htype=&amp;randtype=em&amp;newver=1&amp;newfm=1&amp;secfm=1&amp;flow_ver=3&amp;pkey=en-d27c932c79071079b1c5ce8ca7087ee0a722bf4bee97d0e7e8d5cba91bd5389e8bd962717a694c4d&amp;sl=76480590&amp;expires=8h&amp;rt=pr&amp;r=199868329&amp;mlogid=1621347232376378602&amp;vbdid=3403188840&amp;fin=%E6%80%AA%E8%AF%9E%E5%B0%8F%E9%95%87.Gravity.Falls.S01E11.HR-HDTV.x264.AAC.Chs.Eng-Deefun%E8%BF%AA%E5%B9%BB%E5%AD%97%E5%B9%95%E7%BB%84.mkv&amp;fn=%E6%80%AA%E8%AF%9E%E5%B0%8F%E9%95%87.Gravity.Falls.S01E11.HR-HDTV.x264.AAC.Chs.Eng-Deefun%E8%BF%AA%E5%B9%BB%E5%AD%97%E5%B9%95%E7%BB%84.mkv&amp;rtype=1&amp;dp-logid=1621347232376378602&amp;dp-callid=0.1.1&amp;hps=1&amp;tsl=80&amp;csl=80&amp;fsl=-1&amp;csign=dVYKgEit045y%2FYZnjUaT3WXZHfA%3D&amp;so=0&amp;ut=6&amp;uter=4&amp;serv=1&amp;uc=1133405546&amp;ti=5ab0bd4e07f1f550038acada5d35496b1dc2deaff0533f8e&amp;hflag=30&amp;from_type=0&amp;adg=c_edc0108e9fa1ea2bf75676e893bdf053&amp;reqlabel=309847_d_542374c7794461b783501a9d00e48223_-1_18e87ecb8b58d3c5a256ffa3f09e85da&amp;by=themis&quot;</span></span><br><span class=\"line\">\tdown, err := NewDownloader(text,</span><br><span class=\"line\">\t\tSetTimeout(<span class=\"number\">222601</span>),</span><br><span class=\"line\">\t\tSetDownloadRoutine(<span class=\"number\">20</span>),</span><br><span class=\"line\">\t\tSetStrategyWait(<span class=\"literal\">true</span>),</span><br><span class=\"line\">\t\tSetTryTimes(<span class=\"number\">400</span>),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(err)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\terr = down.SaveFile(context.Background())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(down.option.SaveName)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>状态：待测试</p>\n","more":"<p>20240129 新增 “最大尝试次数(max-tries)与重试等待时间(retry-wait)”</p>\n<p>20240410 发现aria2对某度网盘的提速失效（而尴尬的是许多Switch游戏都是放在某度网盘），找到临时解决方案：<br>        磁力下载mega.nz；比如: <a href=\"https://darthsternie.net/switch-firmwares/\">Darthsternie’s Firmware Archive</a>，选MEGA的链接，记过2-3分钟下载到某度网盘需要1h的18.0.0固件.<br>        qBittorrent；比如：<a href=\"https://yyrtt.com/game\">悠游任天堂</a>，搜索点击特定游戏后用BT下载</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ol>\n<li><p>将 阿里云盘 开放出 WebDAV 服务</p>\n</li>\n<li><p>将 rclone 用于同步 电脑中 和 阿里云盘 中的文件和目录</p>\n</li>\n<li><p>将 nplayer 用于播放 WebDAV中的音乐（电影也是一样）<br>　　安卓手机手机都可以的，电脑上用Potplayer之类的。</p>\n</li>\n</ol>\n<h1 id=\"技术步骤汇总\"><a href=\"#技术步骤汇总\" class=\"headerlink\" title=\"技术步骤汇总\"></a>技术步骤汇总</h1><ol>\n<li>工具#1： <a href=\"https://github.com/messense/aliyundrive-webdav\">https://github.com/messense/aliyundrive-webdav</a></li>\n</ol>\n<p>根据您平台的构架来选择不同的可执行文件（以我的MAC为例，下载：<a href=\"https://github.com/messense/aliyundrive-webdav/releases/tag/v2.3.2\">aliyundrive-webdav-v2.3.2.apple-darwin.tar.gz</a>）</p>\n<p>1.1 解压缩后得到文件：aliyundrive-webdav</p>\n<p>1.2 Terimal运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliyundrive-webdav -r eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIzYjg0YzM0OTczNjA0OTk4OTRjYjI3OWUzOTM1ZTA0OSIsImF1ZCI6IjczZTYxMTgzMWE3YzRkODdhYzQ5Yzg0ODFiZjlmMmM0IiwiZXhwIjoxNzAwNzI5MTM4LCJpYXQiOjE2OTI5NTMxMzgsImp0aSI6IjJjNDVlZDdhNWUyZjQxOTg5ZTk2NDA4NmQ1OTE1MzhiIn0.LcDVLaeqaQWpvE7eBbEv-KnA27JP6bmk7Rxw1vK6ZD3EqSGQuaH-DVE6lU8NneiN1h0z8mW1ImrkjFQ1234</span><br></pre></td></tr></table></figure>\n\n<p>如何获取这个refresh-token，作者在页面做了详细的说明：<a href=\"https://github.com/messense/aliyundrive-webdav%E3%80%82\">https://github.com/messense/aliyundrive-webdav。</a><br>实测也可以使用Chrome登录云盘后<a href=\"https://www.aliyundrive.com/drive/file/backup%EF%BC%8C\">https://www.aliyundrive.com/drive/file/backup，</a><br>在Chrome &gt; Application &gt; Local Storage &gt; share_token 中复制。  </p>\n<p>成功运行后的日志类似：</p>\n<pre><code>    2023-08-25T21:10:27.769474+08:00 INFO aliyundrive\\_webdav::drive: refresh token succeed\n    \n    2023-08-25T21:10:30.984144+08:00 INFO aliyundrive\\_webdav::drive: found default drive _drive\\_id_\\=71999\\*\\*\\*\\*\n    \n    2023-08-25T21:10:30.985527+08:00 INFO aliyundrive\\_webdav::webdav: listening on http://0.0.0.0:8080\n</code></pre>\n<p>1.3 运行后WebDAV就启用了，可以通过Mac的Finder来验证：Finder &gt; Go &gt; Connect to Server</p>\n<p>输入<a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080</a></p>\n<p>在提示的用户名密码都输入：admin</p>\n<ol start=\"2\">\n<li>工具#2：<a href=\"https://github.com/rclone/rclone\">https://github.com/rclone/rclone</a></li>\n</ol>\n<p>获取：根据您平台的构架来选择不同的可执行文件（以我的MAC为例，下载：rclone-v1.63.1-osx-arm64.zip）</p>\n<p>2.1 解压缩后得到文件：rclone</p>\n<p>2.2 Terimal运行配置（一次性）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rclone config</span><br><span class=\"line\">        name\\&gt; webdav</span><br><span class=\"line\">        Storage\\&gt; 47 url\\&gt; http://127.0.0.1:8080</span><br><span class=\"line\">        vendor&gt; 6 user\\&gt; admin</span><br><span class=\"line\">        password: admin  </span><br></pre></td></tr></table></figure>\n\n<p>其他的参数都直接回车，默认即可。<br>第二步中的47指向webdav</p>\n<p>47 &#x2F; WebDAV<br> \\ (webdav)</p>\n<p>2.3 Terimal运行配置（日常同步）：</p>\n<pre><code>    rclone lsd webdav:\n            列出目录\n    \n    rclone ls webdav:\n            列出根目录下所有文件\n    \n    rclone copy /Users/\\*\\*\\*/MusicSyncCar webdav:MusicSyncCar\n</code></pre>\n<p>​<br>​        rclone sync --interactive &#x2F;Users&#x2F;***&#x2F;MusicSyncCar webdav:MusicSyncCar<br>​                works great, will ask for new files to sync<br>​<br>​        rclone sync &#x2F;Users&#x2F;***&#x2F;MusicSyncCar webdav:MusicSyncCar<br>​                works great too, without any question, but minor error.  </p>\n<p>详细的说明：<a href=\"https://rclone.org/docs/\">https://rclone.org/docs/</a><br>如下（注意下面列子的remote就是webdav的创建时的名称）  </p>\n<p>rclone uses a system of subcommands. For example</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rclone ls remote:path                                   # lists a remote</span><br><span class=\"line\">rclone copy /local/path remote:path                     # copies /local/path to the remote</span><br><span class=\"line\">rclone sync --interactive /local/path remote:path       # syncs /local/path to the remote</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>工具#3：<a href=\"https://www.52pojie.cn/thread-1240738-1-1.html\">Nplayer安卓版</a></li>\n</ol>\n<p>直接把链接中的apk下载后，在手机中安装添加WebDAV, 主要的参数：</p>\n<p>主机：选择运行aliyundrive-webdav的电脑的局域网IP地址（<a href=\"http://192.168.6.221:8080）\">http://192.168.6.221:8080）</a></p>\n<p>用户名&#x2F;密码：admin</p>\n<p>端口：8080</p>\n<h2 id=\"如何获取这个阿里云盘refresh-token\"><a href=\"#如何获取这个阿里云盘refresh-token\" class=\"headerlink\" title=\"如何获取这个阿里云盘refresh-token\"></a>如何获取这个阿里云盘refresh-token</h2><p>可以用于影视或TVBOX中提示时的Refresh_Token</p>\n<ol>\n<li>浏览器打开并登录阿里云<a href=\"https://www.aliyundrive.com/drive/\">https://www.aliyundrive.com/drive/</a></li>\n<li>在Chrome &gt; Application &gt; Local Storage &gt; share_token 中复制<br>或者打开console（开发者工具中）运行下面的JS<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;share_token&#x27;</span>)).<span class=\"property\">access_token</span></span><br></pre></td></tr></table></figure>\n此方法已失效，最新的必须扫码登录或短信验证，后用工具显示：<br>方法一<br> <a href=\"https://aliyundriver-refresh-token.vercel.app/\">https://aliyundriver-refresh-token.vercel.app/</a></li>\n</ol>\n<p>具体的项目地址：<a href=\"https://github.com/itxve/aliyundriver-refresh-token\">https://github.com/itxve/aliyundriver-refresh-token</a></p>\n<p>方法二：<br>        用Webdav那个安卓APP，登录阿里云盘；设置里面有可以复制Refresh_Token的地方</p>\n<p>二者都是通过API的方式获取的Refresh_Token</p>\n<h1 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h1><p>NAS是网络接入存储（Network Attached Storage）的简称，也就是存储系统直接接入网络，通过网络交换机，将服务器与存储连接在一起，用户可以通过TCPIP协议访问数据，并通过标准的业界文件共享协议，如CIFS、NFS来实现目录级的共享。</p>\n<h1 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h1><p>感谢所有以上工具的作者与参与者，感恩。</p>\n<h1 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h1><p>文章分享没有几天，聪明的朋友就寻出了不便之处：上面这个方案，需要电脑上开启WebDAV服务然后手机才能连接上去播放媒体文件等访问网盘的内容。</p>\n<p>那么有没有办法直接把WebDAV架设在手机上呢？这样就不需要一台‘服务器’开着。答案是有的：</p>\n<p><a href=\"https://github.com/eritpchy/aliyundrive-webdav/releases\">https://github.com/eritpchy/aliyundrive-webdav/releases</a></p>\n<p>下载这个apk文件<a href=\"https://github.com/eritpchy/aliyundrive-webdav/releases/download/3.1.0/net.xdow.webdavaliyundriver.3.1.0.release.apk\">net.xdow.webdavaliyundriver.3.1.0.release.apk</a></p>\n<p>（视频介绍：<a href=\"https://www.bilibili.com/video/BV1zu411D7mi/\">通过安卓手机启用阿里云盘webdav服务，实现把云盘资料挂载为本地硬盘使用，无压缩播放原画质视频</a>）</p>\n<p>安装到安卓手机上，打开这个APP，设置好Refresh_token（扫码获取），手机上点击启动WebDAV服务。</p>\n<p>在切换到手机上nplayer，同理，建立新的连接到手机本机（127.0.0.1）8080端口上的WebDAV即可。</p>\n<hr>\n<hr>\n<h1 id=\"NAS安装Aria2下载服务器\"><a href=\"#NAS安装Aria2下载服务器\" class=\"headerlink\" title=\"NAS安装Aria2下载服务器\"></a>NAS安装Aria2下载服务器</h1><p>J4125的下载器？如何提交远程下载任务？应用baidu网盘下载<br>    <a href=\"https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html\">https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html</a></p>\n<pre><code>[Aria2 Pro Docker](https://hub.docker.com/r/p3terx/aria2-pro)\n会在Mac的docker中开启两个container，可是6800怎么也无法映射出来。\n各种尝试以后还是最终放弃。\n\nhttp://127.0.0.1:8080/#!/downloading    \n终于找打一个可用的+运行在docker里面的[aria2](https://hub.docker.com/r/wahyd4/aria2-ui)\n</code></pre>\n<p>为了方便映射到NAS中目录，在NAS的docker中安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker run -d --restart=always --name aria2-webui -p 8080:80 -p 6800:6800 -v /volume2/KingchuxingSSD512G/Download:/data onisuly/aria2-with-webui</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这样运行后</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Aria2: http://yourip/ui/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">FileManger: http://yourip</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Rclone: http://yourip/rclone</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Please use admin/admin as username and password to login <span class=\"keyword\">for</span> the first time.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>考虑到大文件下载还是放到NAS的大容量固态硬盘中存储，还是把这个aria2安装到docker中去，\n用web的形式打开管理界面，查询或者提交下载任务。\n\n更改 User Agent from\naria2/1.36.0\nto\npan.baidu.com\n\n\n首先在控制面板——终端机和SNMP里面启用SSH功能\n\n紧接着输入sudo -i回车，获取root权限，这一步还要再一次输入密码，也是不显示\n\n接下来输入docker pull XXX/XXX（X代表的就是你索要拉取的镜像名称），例如我要拉取jellyfin的docker镜像，就输入docker pull jellyfin/jellyfin即可，然后回车，接下来你会发现镜像开始下载了\n</code></pre>\n<p><a href=\"https://www.moewah.com/archives/3147.html\">https://www.moewah.com/archives/3147.html</a><br>    docker run -d –name aria2-webui -p 8080:80 -p 6800:6800 -v &#x2F;volume2&#x2F;KingchuxingSSD512G&#x2F;Download:&#x2F;data onisuly&#x2F;aria2-with-webui</p>\n<pre><code>成功了 http://192.168.6.203:8080/#!/downloading 测试提交某度网盘的5G+文件下载，正常龟速90+KB/s\n总结：\n    请忽略上面的其他的docker镜像， NAS的SSH中用 \nsudo docker pull onisuly/aria2-with-webui\n    然后\nsudo docker run -d --name aria2-webui -p 8080:80 -p 6800:6800 -v /volume2/KingchuxingSSD512G/Download:/data onisuly/aria2-with-webui\n</code></pre>\n<p>实践多任务从某度网盘下载NS大游戏文件，下载列表惊讶的发现（与默认的龟速相比），持续地平均速度竟然达到了860KB&#x2F;s<br>        1. 用浏览器插件中的API下载（适用于 IDM，NDM 以及浏览器自带下载）获取网盘中的链接<br>        2. 设置（Settings）》Aria2 Setting 〉 Http&#x2F;FTP&#x2F;SFTP Settings 》 Max Connection Per Server<br>                设置为10，单个server10个链接；正在测试调整为15，持续观察新任务的下载速度。</p>\n<h2 id=\"改进这个NAS中的docker-aria2-webui\"><a href=\"#改进这个NAS中的docker-aria2-webui\" class=\"headerlink\" title=\"改进这个NAS中的docker aria2-webui\"></a>改进这个NAS中的docker aria2-webui</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#设置了自动重启</span><br><span class=\"line\">docker update --restart=always aria2-webui</span><br><span class=\"line\"></span><br><span class=\"line\">docker start aria2-webui</span><br><span class=\"line\">#发现端口映射并没有映射出期待的端口</span><br><span class=\"line\"></span><br><span class=\"line\">#继续设置保存到docker中，下次自动就映射出来</span><br><span class=\"line\">root@DS918:~# docker update -p 8080:80 -p 6800:6800 aria2-webui</span><br><span class=\"line\">aria2-webui</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程提交下载任务至NAS\"><a href=\"#远程提交下载任务至NAS\" class=\"headerlink\" title=\"远程提交下载任务至NAS\"></a>远程提交下载任务至NAS</h2><p>Nginx Proxy Manager(NPM)反代aria2的下载工具至外网管理<br>人在宽带的外网时候可以提交下载任务至NAS，这样可以不受地理位置限制的下载，充当下载服务器的目的。<br>通过Nginx Proxy Manager来反代两个地址</p>\n<ol>\n<li><a href=\"http://192.168.*.*:8080/\">http://192.168.*.*:8080</a><br> 这是aria2的web面板UI（AriaNg）的本地管理地址，把这个地址反代到外网比如 https:&#x2F;&#x2F;@.@@@@@.com:port<br> 这样就可以带SSL证书的情况下原创访问aria2面板。<br> NPM中新增上面这样一条的反代记录<br>         <a href=\"http://192.168.*.*:8080/\">http://192.168.*.*:8080</a> -&gt; https:&#x2F;&#x2F;@aria@.@@@@@.com:port<br> Note: 这个8080端口是从docker中映射出来的, 下面的6800端口也是同样道理<br> 这个面板也可以使用网络上公开的公共的面板，因为它只是一个UI。<br> 真正的下载服务器服务是RPC的服务信息。</li>\n<li><a href=\"http://192.168.*.*:6800/jsonrpc\">http://192.168.*.*:6800/jsonrpc</a><br> 这是aria2后台服务的地址，Aria2 PRC Address，协议http，Aria2 RPC Http Request Method POST（默认）<br> 在第一步的外网面板地址（https:&#x2F;&#x2F;@.@@@@@.com:port）中配置Aria2 RPC信息，也必须是https协议（已被默认强制）<br> NPM中新增上面这样一条的反代记录<br>         <a href=\"http://192.168.*.*:6800/jsonrpc\">http://192.168.*.*:6800/jsonrpc</a> -&gt; <a href=\"https://rpc@.@@@@@.com:port\">https://rpc@.@@@@@.com:port</a></li>\n</ol>\n<p>这样2条反代配置以后，返回第一步的Aria2面板（AriaNg）设置RPC地信息为反代以后的https信息（地址和端口), 即可<br>实现外网时也可提交下载任务至NAS。</p>\n<p><img data-src=\"https://img.carlzeng.top:3/i/2024/02/28/65df1aaa5994d.png\"></p>\n<h3 id=\"RPC下载的’保存路径’\"><a href=\"#RPC下载的’保存路径’\" class=\"headerlink\" title=\"RPC下载的’保存路径’\"></a>RPC下载的’保存路径’</h3><p>油猴插件的发送至RPC非常方便，然后速度也快也稳定不断流（夸克480KB&#x2F;s），可是发现RPC的文件下载后在docker的映射目录找不到。<br>检查PRC的详细信息才知道，原来文件信息携带了Windows的目录信息 D:@@@.nsp，这直接导致NAS的docker下载成功后，文件根本找不到。<br>估计停留在了内存里面了，也不知道怎么取下来 :-)</p>\n<p>测试尝试解决（SSH中）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --name aria2-webui -p 8080:80 -p 6800:6800 -v /volume2/KingchuxingSSD512G/Download:/data onisuly/aria2-with-webui</span><br><span class=\"line\"></span><br><span class=\"line\">        docker: Error response from daemon: Conflict. The container name &quot;/aria2-webui&quot; is already in use by container &quot;3878b3e6c566c395ee8ffe2538a4ee3de892458facd72c5c6eb7a0995545deef&quot;. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">进入docker里面的命令行</span></span><br><span class=\"line\">sudo docker exec -it aria2-webui /bin/bash</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后还是到Docker的UI界面，操作》重置，操作》启动。这才重启成功</p>\n<img class=\"lozad\" data-src=\"https://www.evernote.com/shard/s122/sh/9abacbba-59d7-4b76-a067-816ce42549fc/AGLvh1hpEOIgvktrp73X36krNuRVl43i7FPKouiXx7V0h4veVuPBghRayw/deep/0/image.png\">\n最后竟然在插件助手的PRC配置中找到一个'保存路径'的设置, 就是这个配置告知了aria2c应该保存文件到那个目录。\n在个人的配置环境，我要配置到docker里面的目录/data，然后就能看到映射出来的目录中看到下载的文件了。\n     \n\n<h2 id=\"最大尝试次数-max-tries-与重试等待时间-retry-wait\"><a href=\"#最大尝试次数-max-tries-与重试等待时间-retry-wait\" class=\"headerlink\" title=\"最大尝试次数(max-tries)与重试等待时间(retry-wait)\"></a>最大尝试次数(max-tries)与重试等待时间(retry-wait)</h2><p>下载某度网盘的单文件大于10G时（速度一般在800 - 900KB&#x2F;s，实际下载过程要超过24h），无人值守的下载过程中经常遇到错误（比如status 403，或者链接被某度网盘重置）</p>\n<p>​\t手动重试：</p>\n<ol>\n<li>点击AriaNg的左侧菜单 &gt; 已完成&#x2F;已停止 &gt; 点击 重试。即可有一次开始断点续传继续下载。</li>\n<li>有时即便重试仍然无法正常继续下载（这是往往是链接地址自动无效了），需要手动去网盘页面重新获取新的“API下载”下载地址，然后新建下载（系统自动判断后会断电续传）</li>\n</ol>\n<p>尝试通过设置一下设置缓解这种手动重试的动作：</p>\n<ol>\n<li>最大尝试次数(max-tries) 从 5 修改为：8</li>\n<li>重试等待时间(retry-wait) 从 0 修改为：120秒</li>\n</ol>\n<p>20240129 等待验证是否能有效减少人工干预重试的次数….</p>\n<h1 id=\"突破aria2c的16连接数限制\"><a href=\"#突破aria2c的16连接数限制\" class=\"headerlink\" title=\"突破aria2c的16连接数限制\"></a>突破aria2c的16连接数限制</h1><p>max-connection-per-server，如上图所示某度下载默认的下载92KB&#x2F;s，只打开了5个链接数。<br>目标：突破aria2的16连接数限制，这个16是aria2原作者做的默认。<br>网上出现很多关于这样设置默认的讨论（有的说是为了防止DOS）<br>同时也出现各种解决方法，比如：<br>Linux<br><a href=\"https://aur.archlinux.org/packages/aria2-unlimited\">https://aur.archlinux.org/packages/aria2-unlimited</a><br><a href=\"https://github.com/P3TERX/Aria2-Pro-Core\">https://github.com/P3TERX/Aria2-Pro-Core</a><br>增强版安装(适用于旁路由已经@墙的情况下)<br>curl -fsSL git.io&#x2F;aria2c.sh | bash</p>\n<p>Windows 用法<br>aria2c.exe –max-connection-per-server&#x3D;64 –split&#x3D;64</p>\n<p>下面讲解如何在以上的NAS中，NAS内docker环境来利用Aria2-Pro-Core来突破链接数限制</p>\n<h2 id=\"步骤1-SSH进NAS\"><a href=\"#步骤1-SSH进NAS\" class=\"headerlink\" title=\"步骤1: SSH进NAS\"></a>步骤1: SSH进NAS</h2><p>然后进docker的bash：<br>sudo docker exec -it aria2-webui &#x2F;bin&#x2F;bash</p>\n<p>其实程序的部署都写在docker的start.sh文件中了，观察docker的进程主要有：</p>\n<ol>\n<li>aria2c –conf-path&#x3D;$conf –log&#x3D;&#x2F;conf&#x2F;aria2.log &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</li>\n<li>darkhttpd &#x2F;aria2-ng –port 80 –daemon –no-listing –no-server-id $ipv6</li>\n</ol>\n<h2 id=\"升级aria2c主程序\"><a href=\"#升级aria2c主程序\" class=\"headerlink\" title=\"升级aria2c主程序\"></a>升级aria2c主程序</h2><p>由于只有一个docker，直接(适用于旁路由已经@墙的情况下)<br>curl -fsSL git.io&#x2F;aria2c.sh | bash<br>我的情况无法链接（下载超时），直接下载好aria2c.sh文件，之后放到&#x2F;data（这个文件夹已经映射到NAS的某个文件目录），<br>在NAS中这很容易操作（比如分享到其他电脑为局域网内共享文件夹，从其他的系统中传入文件）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在docker的 /bin/bash 中运行</span><br><span class=\"line\">./aria2c.sh </span><br><span class=\"line\">        [INFO] Get CPU architecture ...</span><br><span class=\"line\">        [INFO] Architecture: x86_64 (apk)</span><br><span class=\"line\">        [INFO] Get Aria2 Pro Core download URL ...</span><br><span class=\"line\">        [INFO] Download URL: https://github.com/P3TERX/Aria2-Pro-Core/releases/download/1.36.0_2021.08.22/aria2-1.36.0-static-linux-amd64.tar.gz</span><br><span class=\"line\">        [INFO] Installing Aria2 Pro Core ... </span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更改aria2c主程序配置文件\"><a href=\"#更改aria2c主程序配置文件\" class=\"headerlink\" title=\"更改aria2c主程序配置文件\"></a>更改aria2c主程序配置文件</h2><p>vi &#x2F;conf&#x2F;aria2.conf<br>修改<br>max-connection-per-server&#x3D;1024<br>split&#x3D;100</p>\n<p>修改后aria2.conf文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir=/data</span><br><span class=\"line\">input-file=/conf/aria2.session</span><br><span class=\"line\">save-session=/conf/aria2.session</span><br><span class=\"line\">dht-file-path=/conf/dht.dat</span><br><span class=\"line\">dht-file-path6=/conf/dht6.dat</span><br><span class=\"line\">netrc-path=/conf/.netrc</span><br><span class=\"line\"></span><br><span class=\"line\">log-level=notice</span><br><span class=\"line\"></span><br><span class=\"line\">enable-http-pipelining=true</span><br><span class=\"line\">max-concurrent-downloads=3</span><br><span class=\"line\">max-connection-per-server=1024</span><br><span class=\"line\">min-split-size=10M</span><br><span class=\"line\">split=100</span><br><span class=\"line\">continue=true</span><br><span class=\"line\">max-overall-download-limit=0</span><br><span class=\"line\">max-overall-upload-limit=1K</span><br><span class=\"line\"></span><br><span class=\"line\">disable-ipv6=true</span><br><span class=\"line\"></span><br><span class=\"line\">enable-rpc=true</span><br><span class=\"line\">rpc-listen-all=true</span><br><span class=\"line\">rpc-allow-origin-all=true</span><br><span class=\"line\">rpc-listen-port=6800</span><br><span class=\"line\"></span><br><span class=\"line\">seed-ratio=0</span><br><span class=\"line\">seed-time=0</span><br></pre></td></tr></table></figure>\n\n<p>如何测试这个Aria2新版可以把连接数提高到64（或更高）呢？<br>pkill aria2c<br>aria2c –conf-path&#x3D;&#x2F;conf&#x2F;aria2.conf –log&#x3D;&#x2F;conf&#x2F;aria2.log<br>这个kill aria2c的操作，直接导致docker的整个容器下线了，说明有守护进程：一发现aria2c进程挂了，就直接停掉整个docker容器</p>\n<p>安装后依然无效，<br>发现默认的aria2c.sh把程序安装到了&#x2F;usr&#x2F;local&#x2F;bin目录，这个不是docker中aria2c默认的目录<br>解决办法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">cp /usr/local/bin/aria2c aria2c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改Aria2c的面板AriaNg\"><a href=\"#修改Aria2c的面板AriaNg\" class=\"headerlink\" title=\"修改Aria2c的面板AriaNg\"></a>修改Aria2c的面板AriaNg</h2><p>修改了cp &#x2F;data&#x2F;aria-ng-2d4f618b32.min.js &#x2F;aria2-ng&#x2F;js&#x2F;<br>让面板的验证可以调节最大链接数<br>darkhttpd 无法重启， 等待目前的2个下载数结束以后，可以安全地重启docker<br>        &#x2F;preset-conf&#x2F;start.sh </p>\n<p>s6-setuidgid $PUID:$PGID darkhttpd &#x2F;aria2-ng –port 80 –daemon –no-listing –no-server-id $ipv6</p>\n<p>正在测试并熟悉：修改了docker中的文件（未映射出来）后，重启docker会不会保留修改后的版本，还是重新从pull来的docker映像中获取默认版本？<br>结果：好像是会保留修改了配置文件的docker中的所有内容。</p>\n<p>通过直接修改aria-ng-2d4f618b32.min.js的方式把max-connection-per-server改到64后，UI操作可以修改超过16，<br>可是UI报错：We encounter a problem while processing the option: max-connection-per-server<br>说明我先要去升级aria2c，改到新的无限制版，再来测试UI传递情况。</p>\n<p>最新发现：不需要这么麻烦，直接在浏览器的开发者模式，通过覆盖js的办法，可以绕过这个AriaNg面板的Max Connection Limit为16的限制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搜索&quot;max: 16&quot;后修改文件：aria-ng-2d4f618b32.min.js</span><br><span class=\"line\">        &quot;max-connection-per-server&quot;: &#123;</span><br><span class=\"line\">            type: &quot;integer&quot;,</span><br><span class=\"line\">            defaultValue: &quot;1&quot;,</span><br><span class=\"line\">            required: !0,</span><br><span class=\"line\">            min: 1,</span><br><span class=\"line\">            max: 164</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure>\n<p>就是这个164，原来的内容是16. 是darkhttpd给开放的80端口并把&#x2F;aria2-ng文件夹的内容作为web服务的内容。</p>\n<h2 id=\"实测效果\"><a href=\"#实测效果\" class=\"headerlink\" title=\"实测效果\"></a>实测效果</h2><p>设置多线程下载的关键在于：</p>\n<ol>\n<li>连接数（max-connection-per-server）：</li>\n<li>分块数（split-count）：<br>二者相辅相成，如果连接数64，但是分块40；那么也就只会进行40个网络链接。<br>最大连接数与速度的对应关系（夸克举例）<table>\n<thead>\n<tr>\n<th>连接数，分块数</th>\n<th>下载速度</th>\n<th>感受</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10</td>\n<td>90KB&#x2F;s</td>\n<td>大文件下载超过24h被某度虐晕</td>\n</tr>\n<tr>\n<td>46</td>\n<td>1.45MB&#x2F;s</td>\n<td>nice</td>\n</tr>\n<tr>\n<td>160</td>\n<td>5.4MB&#x2F;s</td>\n<td>大约15分钟下载完4.7GB的文件</td>\n</tr>\n<tr>\n<td>360</td>\n<td>12.4MB&#x2F;s</td>\n<td>大约25分钟下载完16.3GB的文件</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>不要太贪心，其实服务器升级一下就可以实现底层检测这种单IP链接过来线程数太多的情况，然后大数据join一下那些用户，直接封号，芭比Q了<br>适可而止，适度适量。<br>持续实践中：某度网盘太坏了，即便是如上修改后，最大链接数也只能到11个，真是让人又爱又恨。</p>\n<p>今天发现用160个连接数去下载普通的网站上的资源（链接类型简单，比如软件等），它的速度十分惊人。赞！</p>\n<div class=\"tabs\" id=\"实践技巧\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#实践技巧-1\">实践技巧 1</a></li><li class=\"tab\"><a href=\"#实践技巧-2\">实践技巧 2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"实践技巧-1\"><p>当开启了Max Connection Per Server 为1024后（这个默认值最大值是16），大文件的下载（比如超过4G），真正限制速度的变成：分块数多少的值；当我把分块数调整到360时，我发现aria2会开启360个链接到服务器，这时多线程下载速度达到了每秒12兆左右。<br>感受：这个速度我在局域网拷贝文件的速度差不多了，跟U盘拷贝，机械硬盘拷贝的速度差不多了；网盘变成了本地机械硬盘。</p></div><div class=\"tab-pane\" id=\"实践技巧-2\"><p>小文件的下载（比如280M），即便我们把分块数调整到360时，我发现aria2仅会开启32个链接到服务器，这时多线程下载速度在每秒1.1兆左右。</p></div></div></div>\n\n\n\n<h2 id=\"Next：go的并发下载器\"><a href=\"#Next：go的并发下载器\" class=\"headerlink\" title=\"Next：go的并发下载器\"></a>Next：go的并发下载器</h2><p>学习Go的好项目</p>\n<p><a href=\"https://zmis.me/user/zmisgod/post/1652\">写一个简单的go的并发下载器</a>\t</p>\n<p>代码：<a href=\"https://github.com/zmisgod/gofun/blob/master/downloader/downloader_test.go\">https://github.com/zmisgod/gofun/blob/master/downloader/downloader_test.go</a></p>\n<p>直接在IDEA里面执行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text := <span class=\"string\">&quot;https://qdall01.baidupcs.com/file/7d19b9b918aa2a8378fbc97e09546d8b?bkt=en-24c643f198a62f889617b178e5cec2bac5c80cde035646474703157dcd274bbba0dd05b567b466d1&amp;fid=1996670861-309847-954183442172954&amp;time=1615470389&amp;sign=FDTAXUGERLQlBHSKfWaqir-DCb740ccc5511e5e8fedcff06b081203-DLIjwClp8jhvTCtezZG1c5EB%2BoI%3D&amp;to=92&amp;size=274395838&amp;sta_dx=274395838&amp;sta_cs=21142&amp;sta_ft=mkv&amp;sta_ct=7&amp;sta_mt=7&amp;fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Cct&amp;ctime=1424274646&amp;mtime=1486178443&amp;resv0=-1&amp;resv1=0&amp;resv2=rlim&amp;resv3=5&amp;resv4=274395838&amp;vuk=1996670861&amp;iv=0&amp;htype=&amp;randtype=em&amp;newver=1&amp;newfm=1&amp;secfm=1&amp;flow_ver=3&amp;pkey=en-d27c932c79071079b1c5ce8ca7087ee0a722bf4bee97d0e7e8d5cba91bd5389e8bd962717a694c4d&amp;sl=76480590&amp;expires=8h&amp;rt=pr&amp;r=199868329&amp;mlogid=1621347232376378602&amp;vbdid=3403188840&amp;fin=%E6%80%AA%E8%AF%9E%E5%B0%8F%E9%95%87.Gravity.Falls.S01E11.HR-HDTV.x264.AAC.Chs.Eng-Deefun%E8%BF%AA%E5%B9%BB%E5%AD%97%E5%B9%95%E7%BB%84.mkv&amp;fn=%E6%80%AA%E8%AF%9E%E5%B0%8F%E9%95%87.Gravity.Falls.S01E11.HR-HDTV.x264.AAC.Chs.Eng-Deefun%E8%BF%AA%E5%B9%BB%E5%AD%97%E5%B9%95%E7%BB%84.mkv&amp;rtype=1&amp;dp-logid=1621347232376378602&amp;dp-callid=0.1.1&amp;hps=1&amp;tsl=80&amp;csl=80&amp;fsl=-1&amp;csign=dVYKgEit045y%2FYZnjUaT3WXZHfA%3D&amp;so=0&amp;ut=6&amp;uter=4&amp;serv=1&amp;uc=1133405546&amp;ti=5ab0bd4e07f1f550038acada5d35496b1dc2deaff0533f8e&amp;hflag=30&amp;from_type=0&amp;adg=c_edc0108e9fa1ea2bf75676e893bdf053&amp;reqlabel=309847_d_542374c7794461b783501a9d00e48223_-1_18e87ecb8b58d3c5a256ffa3f09e85da&amp;by=themis&quot;</span></span><br><span class=\"line\">\tdown, err := NewDownloader(text,</span><br><span class=\"line\">\t\tSetTimeout(<span class=\"number\">222601</span>),</span><br><span class=\"line\">\t\tSetDownloadRoutine(<span class=\"number\">20</span>),</span><br><span class=\"line\">\t\tSetStrategyWait(<span class=\"literal\">true</span>),</span><br><span class=\"line\">\t\tSetTryTimes(<span class=\"number\">400</span>),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(err)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\terr = down.SaveFile(context.Background())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(down.option.SaveName)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>状态：待测试</p>","categories":[{"name":"云盘","path":"api/categories/云盘.json"},{"name":"NAS","path":"api/categories/NAS.json"},{"name":"Docker","path":"api/categories/Docker.json"},{"name":"Nginx Proxy Manager","path":"api/categories/Nginx Proxy Manager.json"}],"tags":[{"name":"docker","path":"api/tags/docker.json"},{"name":"NAS","path":"api/tags/NAS.json"},{"name":"下载","path":"api/tags/下载.json"},{"name":"Nginx Proxy Manager","path":"api/tags/Nginx Proxy Manager.json"},{"name":"云盘","path":"api/tags/云盘.json"}]}