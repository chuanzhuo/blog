{"title":"post和get的区别[AJAX]-CarlZeng","slug":"post和get的区别-AJAX-CarlZeng","date":"2008-10-10T02:15:00.000Z","updated":"2023-10-02T02:27:28.915Z","comments":true,"path":"api/articles/post和get的区别-AJAX-CarlZeng.json","excerpt":"post和get的区别GET方法采用URL传值，POST采用FORM传值。1、Get 方法通过 URL 请求来传递用户的数据，将表单内各字段名称与其内容，以成对的字符串连接，置于 action 属性所指程序的 url 后，如http://localhost/test.asp?name=admin&password=admin，数据都会直接显示在 url 上，就像用户点击一个链接一样；Post 方法...","covers":null,"content":"<p>post和get的区别GET方法采用URL传值，POST采用FORM传值。1、Get 方法通过 URL 请求来传递用户的数据，将表单内各字段名称与其内容，以成对的字符串连接，置于 action 属性所指程序的 url 后，如<a href=\"http://localhost/test.asp?name=admin&password=admin%EF%BC%8C%E6%95%B0%E6%8D%AE%E9%83%BD%E4%BC%9A%E7%9B%B4%E6%8E%A5%E6%98%BE%E7%A4%BA%E5%9C%A8\">http://localhost/test.asp?name=admin&amp;password=admin，数据都会直接显示在</a> url 上，就像用户点击一个链接一样；Post 方法…</p>\n<!-- more -->\n<p>post和get的区别</p>\n<p>GET方法采用URL传值，POST采用FORM传值。</p>\n<p>1、Get 方法通过 URL 请求来传递用户的数据，将表单内各字段名称与其内容，以成对的字符串连接，置于 action 属性所指程序的 url 后，如<a href=\"http://www.mdm.com/test.asp?name=asd&password=sad\">http://localhost/test.asp?name=admin&password=admin</a>，数据都会直接显示在 url 上，就像用户点击一个链接一样；Post 方法通过 HTTP post 机制，将表单内各字段名称与其内容放置在 HTML 表头(header)内一起传送给服务器端交由 action 属性能所指的程序处理，该程序会通过标准输入(stdin)方式，将表单的数据读出并加以处理</p>\n<p>2、 Get 方式需要使用 Request.QueryString 来取得变量的值；而 Post 方式通过 Request.Form 来访问提交的内容</p>\n<p>3、Get 方式传输的数据量非常小，一般限制在 2 KB 左右，但是执行效率却比 Post 方法好；而 Post 方式传递的数据量相对较大，它是等待服务器来读取数据，不过也有字节限制，这是为了避免对服务器用大量数据进行恶意攻击，根据微软方面的说法，微软对用 Request.Form() 可接收的最大数据有限制，IIS 4 中为 80 KB 字节，IIS 5 中为 100 KB 字节</p>\n<p>建议：除非你肯定你提交的数据可以一次性提交，否则请尽量用 Post 方法</p>\n<p>4、Get 方式提交数据，会带来安全问题，比如一个登陆页面，通过 Get 方式提交数据时，用户名和密码将出现在 URL 上，如果页面可以被缓存或者其他人可以访问客户这台机器，就可以从历史记录获得该用户的帐号和密码，所以表单提交建议使用 Post 方法；Post 方法提交的表单页面常见的问题是，该页面如果刷新的时候，会弹出一个对话框</p>\n<p>建议：出于安全性考虑，建议最好使用 Post 提交数据  </p>\n<p>Ajax用Post模式传送数据.需注意<br>1.设置header的Context-Type为application&#x2F;x-www-form-urlencode确保服务器知道实体中有参数变量.通常使用XmlHttpRequest对象的<br>SetRequestHeader(“Context-Type”,”application&#x2F;x-www-form-urlencoded”);<br>2.参数在Send(参数)方法中发送  </p>\n<form method=\"post\" action=\"test\" onsubmit=\"sendRequest();return false\">\\*/  \nfunction getRequestBody(oForm){  \nvar aParams=new Array();  \nfor(var i=0;i<oForm.elements.length;i++){  \nvar sParam=encodeURIComponent(oForm.elements\\[i\\].name);  \nsParam+=\"=\";  \nsParam+=encodeURIComponent(oForm.elements\\[i\\].value);  \nsParams.push(sParam);  \n}  \nreturn aParams.join(\"&\");  \n}  \nfunction sendRequest(){  \nvar oForm=document.forms\\[0\\];  \nvar sBody=getRequestBody(oForm);  \nvar oXmlHttp=createRequest();  \noXmlHttp.open(\"post\",oForm.action,true);  \noXmlHttp.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");  \noXmlHttp.onreadystatechange=function(){  \nif(oXmlHttp.readyState==4){  \nif(oXmlHttp.status==200){  \nsaveResult(oXmlHttp.responseText);  \n}  \nelse{  \nsaveResult(\"An error accurred: \"+oXmlHttp.statusText);  \n}  \n}  \n}  \noXmlHttp.send(sBody);  \n}  \nfunction createRequest(){}  \nfunction saveResult(response){}","more":"<p>post和get的区别GET方法采用URL传值，POST采用FORM传值。1、Get 方法通过 URL 请求来传递用户的数据，将表单内各字段名称与其内容，以成对的字符串连接，置于 action 属性所指程序的 url 后，如<a href=\"http://localhost/test.asp?name=admin&password=admin%EF%BC%8C%E6%95%B0%E6%8D%AE%E9%83%BD%E4%BC%9A%E7%9B%B4%E6%8E%A5%E6%98%BE%E7%A4%BA%E5%9C%A8\">http://localhost/test.asp?name=admin&amp;password=admin，数据都会直接显示在</a> url 上，就像用户点击一个链接一样；Post 方法…</p>\n<!-- more -->\n<p>post和get的区别</p>\n<p>GET方法采用URL传值，POST采用FORM传值。</p>\n<p>1、Get 方法通过 URL 请求来传递用户的数据，将表单内各字段名称与其内容，以成对的字符串连接，置于 action 属性所指程序的 url 后，如<a href=\"http://www.mdm.com/test.asp?name=asd&password=sad\">http://localhost/test.asp?name=admin&password=admin</a>，数据都会直接显示在 url 上，就像用户点击一个链接一样；Post 方法通过 HTTP post 机制，将表单内各字段名称与其内容放置在 HTML 表头(header)内一起传送给服务器端交由 action 属性能所指的程序处理，该程序会通过标准输入(stdin)方式，将表单的数据读出并加以处理</p>\n<p>2、 Get 方式需要使用 Request.QueryString 来取得变量的值；而 Post 方式通过 Request.Form 来访问提交的内容</p>\n<p>3、Get 方式传输的数据量非常小，一般限制在 2 KB 左右，但是执行效率却比 Post 方法好；而 Post 方式传递的数据量相对较大，它是等待服务器来读取数据，不过也有字节限制，这是为了避免对服务器用大量数据进行恶意攻击，根据微软方面的说法，微软对用 Request.Form() 可接收的最大数据有限制，IIS 4 中为 80 KB 字节，IIS 5 中为 100 KB 字节</p>\n<p>建议：除非你肯定你提交的数据可以一次性提交，否则请尽量用 Post 方法</p>\n<p>4、Get 方式提交数据，会带来安全问题，比如一个登陆页面，通过 Get 方式提交数据时，用户名和密码将出现在 URL 上，如果页面可以被缓存或者其他人可以访问客户这台机器，就可以从历史记录获得该用户的帐号和密码，所以表单提交建议使用 Post 方法；Post 方法提交的表单页面常见的问题是，该页面如果刷新的时候，会弹出一个对话框</p>\n<p>建议：出于安全性考虑，建议最好使用 Post 提交数据  </p>\n<p>Ajax用Post模式传送数据.需注意<br>1.设置header的Context-Type为application&#x2F;x-www-form-urlencode确保服务器知道实体中有参数变量.通常使用XmlHttpRequest对象的<br>SetRequestHeader(“Context-Type”,”application&#x2F;x-www-form-urlencoded”);<br>2.参数在Send(参数)方法中发送  </p>\n<form method=\"post\" action=\"test\" onsubmit=\"sendRequest();return false\">\\*/  \nfunction getRequestBody(oForm){  \nvar aParams=new Array();  \nfor(var i=0;i<oForm.elements.length;i++){  \nvar sParam=encodeURIComponent(oForm.elements\\[i\\].name);  \nsParam+=\"=\";  \nsParam+=encodeURIComponent(oForm.elements\\[i\\].value);  \nsParams.push(sParam);  \n}  \nreturn aParams.join(\"&\");  \n}  \nfunction sendRequest(){  \nvar oForm=document.forms\\[0\\];  \nvar sBody=getRequestBody(oForm);  \nvar oXmlHttp=createRequest();  \noXmlHttp.open(\"post\",oForm.action,true);  \noXmlHttp.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");  \noXmlHttp.onreadystatechange=function(){  \nif(oXmlHttp.readyState==4){  \nif(oXmlHttp.status==200){  \nsaveResult(oXmlHttp.responseText);  \n}  \nelse{  \nsaveResult(\"An error accurred: \"+oXmlHttp.statusText);  \n}  \n}  \n}  \noXmlHttp.send(sBody);  \n}  \nfunction createRequest(){}  \nfunction saveResult(response){}","categories":[],"tags":[]}