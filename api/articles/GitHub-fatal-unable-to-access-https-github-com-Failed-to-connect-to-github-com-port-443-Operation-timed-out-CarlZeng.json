{"title":"[GitHub] fatal: unable to access 'https://github.com/': Failed to connect to github.com port 443: Operation timed out","slug":"GitHub-fatal-unable-to-access-https-github-com-Failed-to-connect-to-github-com-port-443-Operation-timed-out-CarlZeng","date":"2021-11-23T03:11:00.000Z","updated":"2024-12-30T12:57:07.288Z","comments":true,"path":"api/articles/GitHub-fatal-unable-to-access-https-github-com-Failed-to-connect-to-github-com-port-443-Operation-timed-out-CarlZeng.json","excerpt":"解决Github连接错误的思路<br>由于众所周知的缘故，连接到github越来越微妙，分享一些MAC平台上的解决思路，希望对你有帮助：","covers":null,"content":"<p>解决Github连接错误的思路<br>由于众所周知的缘故，连接到github越来越微妙，分享一些MAC平台上的解决思路，希望对你有帮助：</p>\n<span id=\"more\"></span>\n\n<h2 id=\"最新方案（2023年11月）\"><a href=\"#最新方案（2023年11月）\" class=\"headerlink\" title=\"最新方案（2023年11月）\"></a>最新方案（2023年11月）</h2><p>超级好用的命令行走代理方式：<br>  HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” git clone <a href=\"https://github.com/rustdesk/rustdesk\">https://github.com/rustdesk/rustdesk</a> </p>\n<p>然后结合Clash For Window的 url-test 模式，选用最快的服务器；测试结果很满意：<br>  HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” git clone <a href=\"https://github.com/rustdesk/rustdesk\">https://github.com/rustdesk/rustdesk</a><br>    Cloning into ‘rustdesk’…<br>    remote: Enumerating objects: 59934, done.<br>    remote: Counting objects: 100% (14388&#x2F;14388), done.<br>    remote: Compressing objects: 100% (326&#x2F;326), done.<br>    remote: Total 59934 (delta 14161), reused 14065 (delta 14062), pack-reused 45546<br>    Receiving objects: 100% (59934&#x2F;59934), 40.41 MiB | 956.00 KiB&#x2F;s, done.<br>    Resolving deltas: 100% (45272&#x2F;45272), done.</p>\n<h2 id=\"单线程下载，平均速度达到1M-s左右；挺满意了\"><a href=\"#单线程下载，平均速度达到1M-s左右；挺满意了\" class=\"headerlink\" title=\"单线程下载，平均速度达到1M&#x2F;s左右；挺满意了\"></a>单线程下载，平均速度达到1M&#x2F;s左右；挺满意了</h2><h3 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h3><ul>\n<li>fatal: unable to access ‘<a href=\"https://github.com/\">https://github.com/</a>‘: Failed to connect to github.com port 443: Operation timed out</li>\n<li>fatal: Authentication failed for ‘<a href=\"https://github.com/\">https://github.com/</a>‘</li>\n<li>fatal unable to access <a href=\"https://github.com/\">https://github.com</a> LibreSSL SSL_connect SSL_ERROR_SYSCALL in connection to github.com 443</li>\n</ul>\n<h3 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes:\"></a>Notes:</h3><p>Don’t verify the operation in editor(WebStorm,IntelliJ IDEA…etc), use command(Mac’s terminal.app), use terminal.app</p>\n<hr>\n<h3 id=\"Solutions-for-Operation-timed-out\"><a href=\"#Solutions-for-Operation-timed-out\" class=\"headerlink\" title=\"Solutions for: Operation timed out\"></a>Solutions for: Operation timed out</h3><ol>\n<li>Fix the hosts to make sure the ssh connection between your Computer and github.com is availble(修复连接到github.com)</li>\n</ol>\n<p>Verify Standard 判断标准：$ ssh -T <a href=\"mailto:&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;\">&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;</a></p>\n<p>1.1 记录下github的IP地址, 把IP Address 记录下来</p>\n<p>打开<a href=\"https://github.com.ipaddress.com/\">https://github.com.ipaddress.com/</a></p>\n<p>打开<a href=\"https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo\">https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo</a></p>\n<p>打开<a href=\"https://github.com.ipaddress.com/assets-cdn.github.com\">https://github.com.ipaddress.com/assets-cdn.github.com</a></p>\n<p>1.2 打开电脑的hosts文件（&#x2F;private&#x2F;etc&#x2F;hosts），把下列的地址对应写入，然后保存即可（version2021.11.23）</p>\n<p># Github Start. Updated 20211123&#x2F;CZ 140.82.113.3 github.com 199.232.69.194 github.global.ssl.fastly.net 185.199.108.153 assets-cdn.github.com 185.199.109.153 assets-cdn.github.com 185.199.110.153 assets-cdn.github.com 185.199.111.153 assets-cdn.github.com</p>\n<h1 id=\"Github-End\"><a href=\"#Github-End\" class=\"headerlink\" title=\"Github End\"></a>Github End</h1><p>1.3 在终端在输以下指令刷新DNS（需要权限）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>\n\n<p>1.4 如果之前用ssh proxy，取消它</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:1080 </span><br><span class=\"line\">git config --global https.proxy http://127.0.0.1:1080 </span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>1.5 重新尝试 ping github.com. 重新尝试 ssh -T <a href=\"mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;\">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<p>新的错误可能和授权有关，至少证明连接到github.com是通的。</p>\n<hr>\n<h3 id=\"Solutions-for-Authentication\"><a href=\"#Solutions-for-Authentication\" class=\"headerlink\" title=\"Solutions for: Authentication\"></a>Solutions for: Authentication</h3><ol start=\"2\">\n<li>Create new Token and login to github.com (新建密钥并登陆进github.com)</li>\n</ol>\n<p>Verify Standard 判断标准：$ git pull</p>\n<p>2.1 Creating a personal access token at <a href=\"https://github.com/settings/tokens\">https://github.com/settings/tokens</a></p>\n<p>授权_admin:org, admin:public_key, admin:repo_hook, gist, read:user, repo, <em>write:packages</em>_</p>\n<p>具体步骤：<a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a></p>\n<p>2.2 Terminal.app 命令行，运行 git pull（先要cd 到原来的git 根目录）</p>\n<p>Username for ‘<a href=\"https://github.com/\">https://github.com</a>‘:  （这个地方输入登录github网址用的用户名，我的是用9个英文字母）<br>Password for ‘https:&#x2F;&#x2F;***@github.com’:  （这个地方要是输入#2.1中得到的Token）</p>\n<p>2.3 判断一下连接和授权，如果需要ssh连接，继续添加配置以下。</p>\n<p>2.4 生成ssh密钥。Generating a new SSH key and adding it to the ssh-agent。具体步骤简要如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t ed25519 -C &quot;your\\_email@example.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Enter a file in which to save the key (/Users/you/.ssh/id\\_algorithm): \\[Press enter\\] \\&gt; Enter passphrase (empty for no passphrase): \\[Type a passphrase\\] \\&gt; Enter same passphrase again: \\[Type passphrase again\\] \\---------------------------------------------------- $ eval &quot;$(ssh-agent -s)&quot;</span><br><span class=\"line\">&gt; Agent pid 59566</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------------------------------------- $ touch ~/.ssh/config  </span><br><span class=\"line\">加入以下内容：</span><br><span class=\"line\">Host \\* AddKeysToAgent yes</span><br><span class=\"line\">  UseKeychain yes</span><br><span class=\"line\">  IdentityFile ~/.ssh/id\\_ed25519 \\---------------------------------------------------- $ ssh\\-add -K ~/.ssh/id\\_ed25519</span><br></pre></td></tr></table></figure>\n<p>2.5 协助排查：github服务端的日志，显示有用的连接信息，用来验证链路是否握手成功等等</p>\n<p><a href=\"https://github.com/settings/security-log\">https://github.com/settings/security-log</a></p>\n<p>尽量把验证都放在命令行中，这样更高效直接（在IDE中操作，在验证太费劲了），terminal成功以后，IDEA会自动也成功，因为它们分享相同的配置（git 根目录下面有.git的配置目录）</p>\n<h3 id=\"参见文档：\"><a href=\"#参见文档：\" class=\"headerlink\" title=\"参见文档：\"></a>参见文档：</h3><p><a href=\"https://juejin.cn/post/6844904193170341896\">https://juejin.cn/post/6844904193170341896</a></p>\n<p><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>\n<p><a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a></p>\n<p><a href=\"https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/\">https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/</a></p>\n<h2 id=\"Node-js也被同样错误卡\"><a href=\"#Node-js也被同样错误卡\" class=\"headerlink\" title=\"Node.js也被同样错误卡\"></a>Node.js也被同样错误卡</h2><p>hexo d<br>…<br>fatal: unable to access ‘<a href=\"https://github.com/@@@@@.git/\">https://github.com/@@@@@.git/</a>‘: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href=\"https://hexo.io/docs/troubleshooting.html\">https://hexo.io/docs/troubleshooting.html</a><br>…</p>\n<div class=\"tabs\" id=\"尝试\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#尝试-1\">尝试 1</a></li><li class=\"tab\"><a href=\"#尝试-2\">尝试 2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"尝试-1\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890 </span><br><span class=\"line\">git config --global https.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>\n<p>重试hexo d</p></div><div class=\"tab-pane\" id=\"尝试-2\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n<p>重试hexo d<br>有的时候很奇怪：非要先proxy以后重试失败，然后在这样–unset以后重试，就能成功。<br>具体错误内容<br>fatal: unable to access ‘<a href=\"https://github.com/@@@@@@.git/\">https://github.com/@@@@@@.git/</a>‘: LibreSSL SSL_connect: Connection reset by peer in connection to github.com:443 </p></div></div></div>\n\n<p>解决办法后来是因为hexo没有检测到内容变动，不去push。<br>hexo clean<br>然后在 hexo g &amp;&amp; hexo d 就解决了</p>\n<h3 id=\"hexo-d-更新的解决办法\"><a href=\"#hexo-d-更新的解决办法\" class=\"headerlink\" title=\"hexo d 更新的解决办法\"></a>hexo d 更新的解决办法</h3><p>运行命令行当时输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTPS_PROXY=&quot;socks5://127.0.0.1:7890&quot; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<p>这样省去了来回切换的麻烦步骤。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite api/site.json (74%)                                                                                                      </span><br><span class=\"line\">fatal: unable to access &#x27;https://github.com/@@@/blog.git/&#x27;: Failed to connect to github.com port 443: Operation timed out   </span><br><span class=\"line\">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>持续问题这个错误，排查了网络连接到github也正常的。（由于另外一个窗口已经hexo g &amp;&amp; hexo s） 后来发现是命令要简化成：</p>\n<p>HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” hexo d</p>\n</blockquote>\n<h2 id=\"思路：当Github源连同账号被删除后\"><a href=\"#思路：当Github源连同账号被删除后\" class=\"headerlink\" title=\"思路：当Github源连同账号被删除后\"></a>思路：当Github源连同账号被删除后</h2><ul>\n<li><p>缓存，当Github源连同账号被删除后，用CDN可以继续访问到<br>比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【已失效用下面的CDN缓存替换】curl -fksSL https://github.com/lmq8267/567/releases/download/scriptfile/install1.10.3.sh | sh</span><br><span class=\"line\">  发现一个CDN的优点：当缓存完成后源站点内容被删除，CDN还是会保存着内容；也就是说这个同步是单方向的。</span><br><span class=\"line\"></span><br><span class=\"line\">curl -fkSL https://fastly.jsdelivr.net/gh/lmq8267/ZeroTierOne@master/install/installzero.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还有一个思路：hub.docker.com<br>docker部署的缓存，仍然可以在一段时间内有效<br>比如：<a href=\"https://hub.docker.com/r/dreamacro/clash\">https://hub.docker.com/r/dreamacro/clash</a></p>\n</li>\n</ul>\n<h2 id=\"ghproxy-com待更新\"><a href=\"#ghproxy-com待更新\" class=\"headerlink\" title=\"ghproxy.com待更新\"></a>ghproxy.com待更新</h2><p>主域名 ghproxy.com 已喜提 GFW，已启用镜像站 mirror.ghproxy.com</p>\n<blockquote>\n<p> 2024-12 mirror.ghproxy.com 也喜提了GFW; </p>\n</blockquote>\n<p>切换<a href=\"https://gh-proxy.com/\">https://gh-proxy.com</a></p>\n<p>​\t事例 <a href=\"https://gh-proxy.com/raw.githubusercontent.com/mfuu/v2ray/master/clash.yaml\">https://gh-proxy.com/raw.githubusercontent.com/mfuu/v2ray/master/clash.yaml</a></p>\n<h1 id=\"hexo-d-的-RPC-failed-错误\"><a href=\"#hexo-d-的-RPC-failed-错误\" class=\"headerlink\" title=\"hexo d 的 RPC failed 错误\"></a>hexo d 的 RPC failed 错误</h1><p>具体信息错误如下：</p>\n<p>error: RPC failed; HTTP 400 curl 22 The requested URL returned error: 400<br>send-pack: unexpected disconnect while reading sideband packet<br>fatal: the remote end hung up unexpectedly</p>\n<p>解决办法：</p>\n<ol>\n<li><p>确保本地的7890（或正在使用的）相关服务是正常且是可用的状态</p>\n<ol>\n<li>比如浏览器的代理设置为这个本地的地址</li>\n</ol>\n</li>\n<li><p>单独再次运行</p>\n<p>HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” hexo d</p>\n</li>\n<li></li>\n</ol>\n","more":"<h2 id=\"最新方案（2023年11月）\"><a href=\"#最新方案（2023年11月）\" class=\"headerlink\" title=\"最新方案（2023年11月）\"></a>最新方案（2023年11月）</h2><p>超级好用的命令行走代理方式：<br>  HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” git clone <a href=\"https://github.com/rustdesk/rustdesk\">https://github.com/rustdesk/rustdesk</a> </p>\n<p>然后结合Clash For Window的 url-test 模式，选用最快的服务器；测试结果很满意：<br>  HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” git clone <a href=\"https://github.com/rustdesk/rustdesk\">https://github.com/rustdesk/rustdesk</a><br>    Cloning into ‘rustdesk’…<br>    remote: Enumerating objects: 59934, done.<br>    remote: Counting objects: 100% (14388&#x2F;14388), done.<br>    remote: Compressing objects: 100% (326&#x2F;326), done.<br>    remote: Total 59934 (delta 14161), reused 14065 (delta 14062), pack-reused 45546<br>    Receiving objects: 100% (59934&#x2F;59934), 40.41 MiB | 956.00 KiB&#x2F;s, done.<br>    Resolving deltas: 100% (45272&#x2F;45272), done.</p>\n<h2 id=\"单线程下载，平均速度达到1M-s左右；挺满意了\"><a href=\"#单线程下载，平均速度达到1M-s左右；挺满意了\" class=\"headerlink\" title=\"单线程下载，平均速度达到1M&#x2F;s左右；挺满意了\"></a>单线程下载，平均速度达到1M&#x2F;s左右；挺满意了</h2><h3 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h3><ul>\n<li>fatal: unable to access ‘<a href=\"https://github.com/\">https://github.com/</a>‘: Failed to connect to github.com port 443: Operation timed out</li>\n<li>fatal: Authentication failed for ‘<a href=\"https://github.com/\">https://github.com/</a>‘</li>\n<li>fatal unable to access <a href=\"https://github.com/\">https://github.com</a> LibreSSL SSL_connect SSL_ERROR_SYSCALL in connection to github.com 443</li>\n</ul>\n<h3 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes:\"></a>Notes:</h3><p>Don’t verify the operation in editor(WebStorm,IntelliJ IDEA…etc), use command(Mac’s terminal.app), use terminal.app</p>\n<hr>\n<h3 id=\"Solutions-for-Operation-timed-out\"><a href=\"#Solutions-for-Operation-timed-out\" class=\"headerlink\" title=\"Solutions for: Operation timed out\"></a>Solutions for: Operation timed out</h3><ol>\n<li>Fix the hosts to make sure the ssh connection between your Computer and github.com is availble(修复连接到github.com)</li>\n</ol>\n<p>Verify Standard 判断标准：$ ssh -T <a href=\"mailto:&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;\">&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#109;</a></p>\n<p>1.1 记录下github的IP地址, 把IP Address 记录下来</p>\n<p>打开<a href=\"https://github.com.ipaddress.com/\">https://github.com.ipaddress.com/</a></p>\n<p>打开<a href=\"https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo\">https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo</a></p>\n<p>打开<a href=\"https://github.com.ipaddress.com/assets-cdn.github.com\">https://github.com.ipaddress.com/assets-cdn.github.com</a></p>\n<p>1.2 打开电脑的hosts文件（&#x2F;private&#x2F;etc&#x2F;hosts），把下列的地址对应写入，然后保存即可（version2021.11.23）</p>\n<p># Github Start. Updated 20211123&#x2F;CZ 140.82.113.3 github.com 199.232.69.194 github.global.ssl.fastly.net 185.199.108.153 assets-cdn.github.com 185.199.109.153 assets-cdn.github.com 185.199.110.153 assets-cdn.github.com 185.199.111.153 assets-cdn.github.com</p>\n<h1 id=\"Github-End\"><a href=\"#Github-End\" class=\"headerlink\" title=\"Github End\"></a>Github End</h1><p>1.3 在终端在输以下指令刷新DNS（需要权限）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>\n\n<p>1.4 如果之前用ssh proxy，取消它</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:1080 </span><br><span class=\"line\">git config --global https.proxy http://127.0.0.1:1080 </span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>1.5 重新尝试 ping github.com. 重新尝试 ssh -T <a href=\"mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;\">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<p>新的错误可能和授权有关，至少证明连接到github.com是通的。</p>\n<hr>\n<h3 id=\"Solutions-for-Authentication\"><a href=\"#Solutions-for-Authentication\" class=\"headerlink\" title=\"Solutions for: Authentication\"></a>Solutions for: Authentication</h3><ol start=\"2\">\n<li>Create new Token and login to github.com (新建密钥并登陆进github.com)</li>\n</ol>\n<p>Verify Standard 判断标准：$ git pull</p>\n<p>2.1 Creating a personal access token at <a href=\"https://github.com/settings/tokens\">https://github.com/settings/tokens</a></p>\n<p>授权_admin:org, admin:public_key, admin:repo_hook, gist, read:user, repo, <em>write:packages</em>_</p>\n<p>具体步骤：<a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a></p>\n<p>2.2 Terminal.app 命令行，运行 git pull（先要cd 到原来的git 根目录）</p>\n<p>Username for ‘<a href=\"https://github.com/\">https://github.com</a>‘:  （这个地方输入登录github网址用的用户名，我的是用9个英文字母）<br>Password for ‘https:&#x2F;&#x2F;***@github.com’:  （这个地方要是输入#2.1中得到的Token）</p>\n<p>2.3 判断一下连接和授权，如果需要ssh连接，继续添加配置以下。</p>\n<p>2.4 生成ssh密钥。Generating a new SSH key and adding it to the ssh-agent。具体步骤简要如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t ed25519 -C &quot;your\\_email@example.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Enter a file in which to save the key (/Users/you/.ssh/id\\_algorithm): \\[Press enter\\] \\&gt; Enter passphrase (empty for no passphrase): \\[Type a passphrase\\] \\&gt; Enter same passphrase again: \\[Type passphrase again\\] \\---------------------------------------------------- $ eval &quot;$(ssh-agent -s)&quot;</span><br><span class=\"line\">&gt; Agent pid 59566</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------------------------------------- $ touch ~/.ssh/config  </span><br><span class=\"line\">加入以下内容：</span><br><span class=\"line\">Host \\* AddKeysToAgent yes</span><br><span class=\"line\">  UseKeychain yes</span><br><span class=\"line\">  IdentityFile ~/.ssh/id\\_ed25519 \\---------------------------------------------------- $ ssh\\-add -K ~/.ssh/id\\_ed25519</span><br></pre></td></tr></table></figure>\n<p>2.5 协助排查：github服务端的日志，显示有用的连接信息，用来验证链路是否握手成功等等</p>\n<p><a href=\"https://github.com/settings/security-log\">https://github.com/settings/security-log</a></p>\n<p>尽量把验证都放在命令行中，这样更高效直接（在IDE中操作，在验证太费劲了），terminal成功以后，IDEA会自动也成功，因为它们分享相同的配置（git 根目录下面有.git的配置目录）</p>\n<h3 id=\"参见文档：\"><a href=\"#参见文档：\" class=\"headerlink\" title=\"参见文档：\"></a>参见文档：</h3><p><a href=\"https://juejin.cn/post/6844904193170341896\">https://juejin.cn/post/6844904193170341896</a></p>\n<p><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>\n<p><a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a></p>\n<p><a href=\"https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/\">https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/</a></p>\n<h2 id=\"Node-js也被同样错误卡\"><a href=\"#Node-js也被同样错误卡\" class=\"headerlink\" title=\"Node.js也被同样错误卡\"></a>Node.js也被同样错误卡</h2><p>hexo d<br>…<br>fatal: unable to access ‘<a href=\"https://github.com/@@@@@.git/\">https://github.com/@@@@@.git/</a>‘: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href=\"https://hexo.io/docs/troubleshooting.html\">https://hexo.io/docs/troubleshooting.html</a><br>…</p>\n<div class=\"tabs\" id=\"尝试\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#尝试-1\">尝试 1</a></li><li class=\"tab\"><a href=\"#尝试-2\">尝试 2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"尝试-1\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890 </span><br><span class=\"line\">git config --global https.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>\n<p>重试hexo d</p></div><div class=\"tab-pane\" id=\"尝试-2\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n<p>重试hexo d<br>有的时候很奇怪：非要先proxy以后重试失败，然后在这样–unset以后重试，就能成功。<br>具体错误内容<br>fatal: unable to access ‘<a href=\"https://github.com/@@@@@@.git/\">https://github.com/@@@@@@.git/</a>‘: LibreSSL SSL_connect: Connection reset by peer in connection to github.com:443 </p></div></div></div>\n\n<p>解决办法后来是因为hexo没有检测到内容变动，不去push。<br>hexo clean<br>然后在 hexo g &amp;&amp; hexo d 就解决了</p>\n<h3 id=\"hexo-d-更新的解决办法\"><a href=\"#hexo-d-更新的解决办法\" class=\"headerlink\" title=\"hexo d 更新的解决办法\"></a>hexo d 更新的解决办法</h3><p>运行命令行当时输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTPS_PROXY=&quot;socks5://127.0.0.1:7890&quot; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<p>这样省去了来回切换的麻烦步骤。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite api/site.json (74%)                                                                                                      </span><br><span class=\"line\">fatal: unable to access &#x27;https://github.com/@@@/blog.git/&#x27;: Failed to connect to github.com port 443: Operation timed out   </span><br><span class=\"line\">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>持续问题这个错误，排查了网络连接到github也正常的。（由于另外一个窗口已经hexo g &amp;&amp; hexo s） 后来发现是命令要简化成：</p>\n<p>HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” hexo d</p>\n</blockquote>\n<h2 id=\"思路：当Github源连同账号被删除后\"><a href=\"#思路：当Github源连同账号被删除后\" class=\"headerlink\" title=\"思路：当Github源连同账号被删除后\"></a>思路：当Github源连同账号被删除后</h2><ul>\n<li><p>缓存，当Github源连同账号被删除后，用CDN可以继续访问到<br>比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【已失效用下面的CDN缓存替换】curl -fksSL https://github.com/lmq8267/567/releases/download/scriptfile/install1.10.3.sh | sh</span><br><span class=\"line\">  发现一个CDN的优点：当缓存完成后源站点内容被删除，CDN还是会保存着内容；也就是说这个同步是单方向的。</span><br><span class=\"line\"></span><br><span class=\"line\">curl -fkSL https://fastly.jsdelivr.net/gh/lmq8267/ZeroTierOne@master/install/installzero.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还有一个思路：hub.docker.com<br>docker部署的缓存，仍然可以在一段时间内有效<br>比如：<a href=\"https://hub.docker.com/r/dreamacro/clash\">https://hub.docker.com/r/dreamacro/clash</a></p>\n</li>\n</ul>\n<h2 id=\"ghproxy-com待更新\"><a href=\"#ghproxy-com待更新\" class=\"headerlink\" title=\"ghproxy.com待更新\"></a>ghproxy.com待更新</h2><p>主域名 ghproxy.com 已喜提 GFW，已启用镜像站 mirror.ghproxy.com</p>\n<blockquote>\n<p> 2024-12 mirror.ghproxy.com 也喜提了GFW; </p>\n</blockquote>\n<p>切换<a href=\"https://gh-proxy.com/\">https://gh-proxy.com</a></p>\n<p>​\t事例 <a href=\"https://gh-proxy.com/raw.githubusercontent.com/mfuu/v2ray/master/clash.yaml\">https://gh-proxy.com/raw.githubusercontent.com/mfuu/v2ray/master/clash.yaml</a></p>\n<h1 id=\"hexo-d-的-RPC-failed-错误\"><a href=\"#hexo-d-的-RPC-failed-错误\" class=\"headerlink\" title=\"hexo d 的 RPC failed 错误\"></a>hexo d 的 RPC failed 错误</h1><p>具体信息错误如下：</p>\n<p>error: RPC failed; HTTP 400 curl 22 The requested URL returned error: 400<br>send-pack: unexpected disconnect while reading sideband packet<br>fatal: the remote end hung up unexpectedly</p>\n<p>解决办法：</p>\n<ol>\n<li><p>确保本地的7890（或正在使用的）相关服务是正常且是可用的状态</p>\n<ol>\n<li>比如浏览器的代理设置为这个本地的地址</li>\n</ol>\n</li>\n<li><p>单独再次运行</p>\n<p>HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” hexo d</p>\n</li>\n<li></li>\n</ol>","categories":[{"name":"github","path":"api/categories/github.json"}],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"github","path":"api/tags/github.json"}]}