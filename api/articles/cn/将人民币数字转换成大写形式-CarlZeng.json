{"title":"将人民币数字转换成大写形式-CarlZeng","slug":"cn/将人民币数字转换成大写形式-CarlZeng","date":"2009-05-25T09:59:00.000Z","updated":"2023-10-02T02:27:28.983Z","comments":true,"path":"api/articles/cn/将人民币数字转换成大写形式-CarlZeng.json","excerpt":"将人民币数字转换成大写形式JARON_DOT_CN 2004年4月27日  阅读:4537次关键字：人民币,大写 [GOOGLE搜索更多资料]　用JavaScript编写了一功能函数，完成如下功能：1、对一给定字符串，如：1234.55，转换成正确的中文货币描述：如：人民币壹仟贰佰叁拾四元五角五分2、输入的字符串形式可以是以下几种：带分隔符的，如：123,456,789.00；不...","covers":null,"content":"<p>将人民币数字转换成大写形式 JARON_DOT_CN 2004年4月27日 阅读:4537次 关键字：人民币,大写 [GOOGLE搜索更多资料] 　 用JavaScript编写了一功能函数，完成如下功能： 1、对一给定字符串，如：1234.55，转换成正确的中文货币描述：如：人民币壹仟贰佰叁拾四元五角五分 2、输入的字符串形式可以是以下几种：带分隔符的，如：123,456,789.00；不…</p>\n<!-- more -->\n<p>将人民币数字转换成大写形式<br>JARON_DOT_CN 2004年4月27日 阅读:4537次  </p>\n<p>关键字：<a href=\"http://www.google.cn/search?q=%E4%BA%BA%E6%B0%91%E5%B8%81,%E5%A4%A7%E5%86%99&start=0&ie=gb2312&oe=utf-8&client=pub-7916447012000715\"><strong>人民币,大写</strong> [GOOGLE搜索更多资料]</a></p>\n<p>　</p>\n<p>用JavaScript编写了一功能函数，完成如下功能：</p>\n<p>1、对一给定字符串，如：1234.55，转换成正确的中文货币描述：如：人民币壹仟贰佰叁拾四元五角五分</p>\n<p>2、输入的字符串形式可以是以下几种：带分隔符的，如：123,456,789.00；不带分隔符的，如：123456789</p>\n<p>3、输出的中文货币描述要符合规范，如：0.3—-人民币三角；0.33—-人民币三角三分；1—-人民币壹元整<br>100—-人民币壹佰元整；1001—-人民币壹仟零壹元整；10000001—-人民币壹仟万零壹元整；<br>1001001—-人民币壹仟零壹万零壹元整，等</p>\n<p>4、最大转换能到百亿</p>\n<p>具体的代码如下：</p>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"><html>  \n<head>  \n<title></title>  \n<script language=\"jscript\">  \nfunction convertCurrency(currencyDigits) {  \n// Constants:  \nvar MAXIMUM\\_NUMBER = 99999999999.99;  \n// Predefine the radix characters and currency symbols for output:  \nvar CN\\_ZERO = \"零\";  \nvar CN\\_ONE = \"壹\";  \nvar CN\\_TWO = \"贰\";  \nvar CN\\_THREE = \"叁\";  \nvar CN\\_FOUR = \"肆\";  \nvar CN\\_FIVE = \"伍\";  \nvar CN\\_SIX = \"陆\";  \nvar CN\\_SEVEN = \"柒\";  \nvar CN\\_EIGHT = \"捌\";  \nvar CN\\_NINE = \"玖\";  \nvar CN\\_TEN = \"拾\";  \nvar CN\\_HUNDRED = \"佰\";  \nvar CN\\_THOUSAND = \"仟\";  \nvar CN\\_TEN\\_THOUSAND = \"万\";  \nvar CN\\_HUNDRED\\_MILLION = \"亿\";  \nvar CN\\_SYMBOL = \"人民币\";  \nvar CN\\_DOLLAR = \"元\";  \nvar CN\\_TEN\\_CENT = \"角\";  \nvar CN\\_CENT = \"分\";  \nvar CN\\_INTEGER = \"整\";  \n  \n<p>&#x2F;&#x2F; Variables:<br>var integral; &#x2F;&#x2F; Represent integral part of digit number.<br>var decimal; &#x2F;&#x2F; Represent decimal part of digit number.<br>var outputCharacters; &#x2F;&#x2F; The output result.<br>var parts;<br>var digits, radices, bigRadices, decimals;<br>var zeroCount;<br>var i, p, d;<br>var quotient, modulus;  </p>\n<p>&#x2F;&#x2F; Validate input string:<br>currencyDigits &#x3D; currencyDigits.toString();<br>if (currencyDigits &#x3D;&#x3D; “”) {<br>alert(“Empty input!”);<br>return “”;<br>}<br>if (currencyDigits.match(&#x2F;[^,.\\d]&#x2F;) !&#x3D; null) {<br>alert(“Invalid characters in the input string!”);<br>return “”;<br>}<br>if ((currencyDigits).match(&#x2F;^((\\d{1,3}(,\\d{3})*(.((\\d{3},)*\\d{1,3}))?)|(\\d+(.\\d+)?))$&#x2F;) &#x3D;&#x3D; null) {<br>alert(“Illegal format of digit number!”);<br>return “”;<br>}  </p>\n<p>&#x2F;&#x2F; Normalize the format of input digits:<br>currencyDigits &#x3D; currencyDigits.replace(&#x2F;,&#x2F;g, “”); &#x2F;&#x2F; Remove comma delimiters.<br>currencyDigits &#x3D; currencyDigits.replace(&#x2F;^0+&#x2F;, “”); &#x2F;&#x2F; Trim zeros at the beginning.<br>&#x2F;&#x2F; Assert the number is not greater than the maximum number.<br>if (Number(currencyDigits) &gt; MAXIMUM_NUMBER) {<br>alert(“Too large a number to convert!”);<br>return “”;<br>}  </p>\n<p>&#x2F;&#x2F; Process the coversion from currency digits to characters:<br>&#x2F;&#x2F; Separate integral and decimal parts before processing coversion:<br>parts &#x3D; currencyDigits.split(“.”);<br>if (parts.length &gt; 1) {<br>integral &#x3D; parts[0];<br>decimal &#x3D; parts[1];<br>&#x2F;&#x2F; Cut down redundant decimal digits that are after the second.<br>decimal &#x3D; decimal.substr(0, 2);<br>}<br>else {<br>integral &#x3D; parts[0];<br>decimal &#x3D; “”;<br>}<br>&#x2F;&#x2F; Prepare the characters corresponding to the digits:<br>digits &#x3D; new Array(CN_ZERO, CN_ONE, CN_TWO, CN_THREE, CN_FOUR, CN_FIVE, CN_SIX, CN_SEVEN, CN_EIGHT, CN_NINE);<br>radices &#x3D; new Array(“”, CN_TEN, CN_HUNDRED, CN_THOUSAND);<br>bigRadices &#x3D; new Array(“”, CN_TEN_THOUSAND, CN_HUNDRED_MILLION);<br>decimals &#x3D; new Array(CN_TEN_CENT, CN_CENT);<br>&#x2F;&#x2F; Start processing:<br>outputCharacters &#x3D; “”;<br>&#x2F;&#x2F; Process integral part if it is larger than 0:<br>if (Number(integral) &gt; 0) {<br>zeroCount &#x3D; 0;<br>for (i &#x3D; 0; i &lt; integral.length; i++) {<br>p &#x3D; integral.length - i - 1;<br>d &#x3D; integral.substr(i, 1);<br>quotient &#x3D; p &#x2F; 4;<br>modulus &#x3D; p % 4;<br>if (d &#x3D;&#x3D; “0”) {<br>zeroCount++;<br>}<br>else {<br>if (zeroCount &gt; 0)<br>{<br>outputCharacters +&#x3D; digits[0];<br>}<br>zeroCount &#x3D; 0;<br>outputCharacters +&#x3D; digits[Number(d)] + radices[modulus];<br>}<br>if (modulus &#x3D;&#x3D; 0 &amp;&amp; zeroCount &lt; 4) {<br>outputCharacters +&#x3D; bigRadices[quotient];<br>}<br>}<br>outputCharacters +&#x3D; CN_DOLLAR;<br>}<br>&#x2F;&#x2F; Process decimal part if there is:<br>if (decimal !&#x3D; “”) {<br>for (i &#x3D; 0; i &lt; decimal.length; i++) {<br>d &#x3D; decimal.substr(i, 1);<br>if (d !&#x3D; “0”) {<br>outputCharacters +&#x3D; digits[Number(d)] + decimals[i];<br>}<br>}<br>}<br>&#x2F;&#x2F; Confirm and return the final output string:<br>if (outputCharacters &#x3D;&#x3D; “”) {<br>outputCharacters &#x3D; CN_ZERO + CN_DOLLAR;<br>}<br>if (decimal &#x3D;&#x3D; “”) {<br>outputCharacters +&#x3D; CN_INTEGER;<br>}<br>outputCharacters &#x3D; CN_SYMBOL + outputCharacters;<br>return outputCharacters;<br>}<br></script>  </p>\n</head>  \n<body>  \n<INPUT id=\"Digits\" type=\"text\" name=\"Digits\" size=20>  \n<INPUT id=\"Convert\" type=\"button\" value=\"Convert\" name=\"Convert\" onclick=\"Result.value = convertCurrency(Digits.value);\">  \n<INPUT id=\"Result\" type=\"text\" name=\"Result\" size=60>  \n</body>  \n</html>  \n\n<p>以上代码运用了正则表达式的功能，除了可以正确的转换成人民币的大写形式以外，还可以判断输入的形式是否正确有效。</p>\n","more":"<p>将人民币数字转换成大写形式 JARON_DOT_CN 2004年4月27日 阅读:4537次 关键字：人民币,大写 [GOOGLE搜索更多资料] 　 用JavaScript编写了一功能函数，完成如下功能： 1、对一给定字符串，如：1234.55，转换成正确的中文货币描述：如：人民币壹仟贰佰叁拾四元五角五分 2、输入的字符串形式可以是以下几种：带分隔符的，如：123,456,789.00；不…</p>\n<!-- more -->\n<p>将人民币数字转换成大写形式<br>JARON_DOT_CN 2004年4月27日 阅读:4537次  </p>\n<p>关键字：<a href=\"http://www.google.cn/search?q=%E4%BA%BA%E6%B0%91%E5%B8%81,%E5%A4%A7%E5%86%99&start=0&ie=gb2312&oe=utf-8&client=pub-7916447012000715\"><strong>人民币,大写</strong> [GOOGLE搜索更多资料]</a></p>\n<p>　</p>\n<p>用JavaScript编写了一功能函数，完成如下功能：</p>\n<p>1、对一给定字符串，如：1234.55，转换成正确的中文货币描述：如：人民币壹仟贰佰叁拾四元五角五分</p>\n<p>2、输入的字符串形式可以是以下几种：带分隔符的，如：123,456,789.00；不带分隔符的，如：123456789</p>\n<p>3、输出的中文货币描述要符合规范，如：0.3—-人民币三角；0.33—-人民币三角三分；1—-人民币壹元整<br>100—-人民币壹佰元整；1001—-人民币壹仟零壹元整；10000001—-人民币壹仟万零壹元整；<br>1001001—-人民币壹仟零壹万零壹元整，等</p>\n<p>4、最大转换能到百亿</p>\n<p>具体的代码如下：</p>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"><html>  \n<head>  \n<title></title>  \n<script language=\"jscript\">  \nfunction convertCurrency(currencyDigits) {  \n// Constants:  \nvar MAXIMUM\\_NUMBER = 99999999999.99;  \n// Predefine the radix characters and currency symbols for output:  \nvar CN\\_ZERO = \"零\";  \nvar CN\\_ONE = \"壹\";  \nvar CN\\_TWO = \"贰\";  \nvar CN\\_THREE = \"叁\";  \nvar CN\\_FOUR = \"肆\";  \nvar CN\\_FIVE = \"伍\";  \nvar CN\\_SIX = \"陆\";  \nvar CN\\_SEVEN = \"柒\";  \nvar CN\\_EIGHT = \"捌\";  \nvar CN\\_NINE = \"玖\";  \nvar CN\\_TEN = \"拾\";  \nvar CN\\_HUNDRED = \"佰\";  \nvar CN\\_THOUSAND = \"仟\";  \nvar CN\\_TEN\\_THOUSAND = \"万\";  \nvar CN\\_HUNDRED\\_MILLION = \"亿\";  \nvar CN\\_SYMBOL = \"人民币\";  \nvar CN\\_DOLLAR = \"元\";  \nvar CN\\_TEN\\_CENT = \"角\";  \nvar CN\\_CENT = \"分\";  \nvar CN\\_INTEGER = \"整\";  \n  \n<p>&#x2F;&#x2F; Variables:<br>var integral; &#x2F;&#x2F; Represent integral part of digit number.<br>var decimal; &#x2F;&#x2F; Represent decimal part of digit number.<br>var outputCharacters; &#x2F;&#x2F; The output result.<br>var parts;<br>var digits, radices, bigRadices, decimals;<br>var zeroCount;<br>var i, p, d;<br>var quotient, modulus;  </p>\n<p>&#x2F;&#x2F; Validate input string:<br>currencyDigits &#x3D; currencyDigits.toString();<br>if (currencyDigits &#x3D;&#x3D; “”) {<br>alert(“Empty input!”);<br>return “”;<br>}<br>if (currencyDigits.match(&#x2F;[^,.\\d]&#x2F;) !&#x3D; null) {<br>alert(“Invalid characters in the input string!”);<br>return “”;<br>}<br>if ((currencyDigits).match(&#x2F;^((\\d{1,3}(,\\d{3})*(.((\\d{3},)*\\d{1,3}))?)|(\\d+(.\\d+)?))$&#x2F;) &#x3D;&#x3D; null) {<br>alert(“Illegal format of digit number!”);<br>return “”;<br>}  </p>\n<p>&#x2F;&#x2F; Normalize the format of input digits:<br>currencyDigits &#x3D; currencyDigits.replace(&#x2F;,&#x2F;g, “”); &#x2F;&#x2F; Remove comma delimiters.<br>currencyDigits &#x3D; currencyDigits.replace(&#x2F;^0+&#x2F;, “”); &#x2F;&#x2F; Trim zeros at the beginning.<br>&#x2F;&#x2F; Assert the number is not greater than the maximum number.<br>if (Number(currencyDigits) &gt; MAXIMUM_NUMBER) {<br>alert(“Too large a number to convert!”);<br>return “”;<br>}  </p>\n<p>&#x2F;&#x2F; Process the coversion from currency digits to characters:<br>&#x2F;&#x2F; Separate integral and decimal parts before processing coversion:<br>parts &#x3D; currencyDigits.split(“.”);<br>if (parts.length &gt; 1) {<br>integral &#x3D; parts[0];<br>decimal &#x3D; parts[1];<br>&#x2F;&#x2F; Cut down redundant decimal digits that are after the second.<br>decimal &#x3D; decimal.substr(0, 2);<br>}<br>else {<br>integral &#x3D; parts[0];<br>decimal &#x3D; “”;<br>}<br>&#x2F;&#x2F; Prepare the characters corresponding to the digits:<br>digits &#x3D; new Array(CN_ZERO, CN_ONE, CN_TWO, CN_THREE, CN_FOUR, CN_FIVE, CN_SIX, CN_SEVEN, CN_EIGHT, CN_NINE);<br>radices &#x3D; new Array(“”, CN_TEN, CN_HUNDRED, CN_THOUSAND);<br>bigRadices &#x3D; new Array(“”, CN_TEN_THOUSAND, CN_HUNDRED_MILLION);<br>decimals &#x3D; new Array(CN_TEN_CENT, CN_CENT);<br>&#x2F;&#x2F; Start processing:<br>outputCharacters &#x3D; “”;<br>&#x2F;&#x2F; Process integral part if it is larger than 0:<br>if (Number(integral) &gt; 0) {<br>zeroCount &#x3D; 0;<br>for (i &#x3D; 0; i &lt; integral.length; i++) {<br>p &#x3D; integral.length - i - 1;<br>d &#x3D; integral.substr(i, 1);<br>quotient &#x3D; p &#x2F; 4;<br>modulus &#x3D; p % 4;<br>if (d &#x3D;&#x3D; “0”) {<br>zeroCount++;<br>}<br>else {<br>if (zeroCount &gt; 0)<br>{<br>outputCharacters +&#x3D; digits[0];<br>}<br>zeroCount &#x3D; 0;<br>outputCharacters +&#x3D; digits[Number(d)] + radices[modulus];<br>}<br>if (modulus &#x3D;&#x3D; 0 &amp;&amp; zeroCount &lt; 4) {<br>outputCharacters +&#x3D; bigRadices[quotient];<br>}<br>}<br>outputCharacters +&#x3D; CN_DOLLAR;<br>}<br>&#x2F;&#x2F; Process decimal part if there is:<br>if (decimal !&#x3D; “”) {<br>for (i &#x3D; 0; i &lt; decimal.length; i++) {<br>d &#x3D; decimal.substr(i, 1);<br>if (d !&#x3D; “0”) {<br>outputCharacters +&#x3D; digits[Number(d)] + decimals[i];<br>}<br>}<br>}<br>&#x2F;&#x2F; Confirm and return the final output string:<br>if (outputCharacters &#x3D;&#x3D; “”) {<br>outputCharacters &#x3D; CN_ZERO + CN_DOLLAR;<br>}<br>if (decimal &#x3D;&#x3D; “”) {<br>outputCharacters +&#x3D; CN_INTEGER;<br>}<br>outputCharacters &#x3D; CN_SYMBOL + outputCharacters;<br>return outputCharacters;<br>}<br></script>  </p>\n</head>  \n<body>  \n<INPUT id=\"Digits\" type=\"text\" name=\"Digits\" size=20>  \n<INPUT id=\"Convert\" type=\"button\" value=\"Convert\" name=\"Convert\" onclick=\"Result.value = convertCurrency(Digits.value);\">  \n<INPUT id=\"Result\" type=\"text\" name=\"Result\" size=60>  \n</body>  \n</html>  \n\n<p>以上代码运用了正则表达式的功能，除了可以正确的转换成人民币的大写形式以外，还可以判断输入的形式是否正确有效。</p>\n","categories":[],"tags":[]}