{"title":"SuiteScript 2.0 Error: SSS_INVALID_SRCH_FILTER_EXPR_TYPE-CarlZeng","slug":"cn/SuiteScript-2-0-Error-SSS-INVALID-SRCH-FILTER-EXPR-TYPE-CarlZeng","date":"2019-03-20T00:46:00.000Z","updated":"2023-10-02T02:27:29.046Z","comments":true,"path":"api/articles/cn/SuiteScript-2-0-Error-SSS-INVALID-SRCH-FILTER-EXPR-TYPE-CarlZeng.json","excerpt":"Issue: a search throw error&#160;SSS_INVALID_SRCH_FILTER_EXPR_TYPE Malformed search filter expression, first two elements must be strings. Sample code that","covers":null,"content":"<p>Issue: a search throw error SSS_INVALID_SRCH_FILTER_EXPR_TYPE Malformed search filter expression, first two elements must be strings. Sample code that</p>\n<!-- more -->\n<p>Issue: a search throw error SSS_INVALID_SRCH_FILTER_EXPR_TYPE </p>\n<p>Malformed search filter expression, first two elements must be strings. </p>\n<p>Sample code that causing error: </p>\n<p>var strFormulaNumeric &#x3D; ‘CASE {custrecord_abc_id}’; for (var i &#x3D; 0; i &lt; this.arrPriceTblId.length; i++) {</p>\n<pre><code> strFormulaNumeric += &#39; WHEN \\\\&#39;&#39; + this.arrPriceTblId\\[i\\] \\+ &#39;\\\\&#39; THEN &#39; + (i + 1);\n\n&#125;\nstrFormulaNumeric += &#39; ELSE 0 END&#39;;\n</code></pre>\n<p>… var arrColumns &#x3D; [];</p>\n<p>…</p>\n<pre><code>arrColumns.push(search.createColumn(&#123;\n\n name : &#39;formulanumeric&#39;,\n\n formula : strFormulaNumeric,\n\n sort : search.Sort.DESC\n\n&#125;));\n</code></pre>\n<p>… var strFormulaFilter &#x3D; ‘formulanumeric:’ + strFormulaNumeric; var arrFilters &#x3D; [<br>                        [ ‘isinactive’, ‘is’, ‘F’ ], ‘AND’,<br>                        [ strFormulaFilter,<br>                                search.Operator.GREATERTHAN, 0 ] ];</p>\n<p>…</p>\n<p>Solution:</p>\n<p>var arrFilters &#x3D; [<br>                        [ ‘isinactive’, ‘is’, ‘F’ ], ‘AND’,<br>                        [ String(strFormulaFilter),<br>                                search.Operator.GREATERTHAN, 0 ] ];</p>\n<p>We convert strFormulaFilter to a string again in JS, that works great :)</p>\n<p>Great Idea:</p>\n<p>When we have formula in the column, we sort it well; it’s the best way to roll out data as specific reqirement;  works perfect :-)</p>\n<p>Thanks site: </p>\n<p>Notes from: </p>\n<p>My best guess is that the Rhino interpreter parses string concatenation expressions into different Java classes than string literals&#x2F;variables. The NetSuite API then fails to consider those classes when validating that an argument is a javascript “string”.</p>\n<p><a href=\"https://netsuitehub.com/forums/reply/re-record-getvalue-errors-if-field-name-is-built-programatically-5/\">https://netsuitehub.com/forums/reply/re-record-getvalue-errors-if-field-name-is-built-programatically-5/</a></p>\n<p><a href=\"https://www.flowinglink.com/suitescript-2-0-sss/_invalid/_srch/_filter/_expr/_type/\">https://www.flowinglink.com/suitescript-2-0-sss\\_invalid\\_srch\\_filter\\_expr\\_type/</a></p>\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco; color: #2a00ff} span.s1 {color: #7f0055} span.s2 {color: #2a00ff} span.s3 {color: #000000} span.Apple-tab-span {white-space:pre} --> <!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco} span.s1 {color: #7f0055} span.s2 {color: #2a00ff} --> <!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco; color: #2a00ff} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco} p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco; min-height: 15.0px} span.s1 {color: #7f0055} span.s2 {color: #000000} span.s3 {color: #2a00ff} span.Apple-tab-span {white-space:pre} -->","more":"<p>Issue: a search throw error SSS_INVALID_SRCH_FILTER_EXPR_TYPE Malformed search filter expression, first two elements must be strings. Sample code that</p>\n<!-- more -->\n<p>Issue: a search throw error SSS_INVALID_SRCH_FILTER_EXPR_TYPE </p>\n<p>Malformed search filter expression, first two elements must be strings. </p>\n<p>Sample code that causing error: </p>\n<p>var strFormulaNumeric &#x3D; ‘CASE {custrecord_abc_id}’; for (var i &#x3D; 0; i &lt; this.arrPriceTblId.length; i++) {</p>\n<pre><code> strFormulaNumeric += &#39; WHEN \\\\&#39;&#39; + this.arrPriceTblId\\[i\\] \\+ &#39;\\\\&#39; THEN &#39; + (i + 1);\n\n&#125;\nstrFormulaNumeric += &#39; ELSE 0 END&#39;;\n</code></pre>\n<p>… var arrColumns &#x3D; [];</p>\n<p>…</p>\n<pre><code>arrColumns.push(search.createColumn(&#123;\n\n name : &#39;formulanumeric&#39;,\n\n formula : strFormulaNumeric,\n\n sort : search.Sort.DESC\n\n&#125;));\n</code></pre>\n<p>… var strFormulaFilter &#x3D; ‘formulanumeric:’ + strFormulaNumeric; var arrFilters &#x3D; [<br>                        [ ‘isinactive’, ‘is’, ‘F’ ], ‘AND’,<br>                        [ strFormulaFilter,<br>                                search.Operator.GREATERTHAN, 0 ] ];</p>\n<p>…</p>\n<p>Solution:</p>\n<p>var arrFilters &#x3D; [<br>                        [ ‘isinactive’, ‘is’, ‘F’ ], ‘AND’,<br>                        [ String(strFormulaFilter),<br>                                search.Operator.GREATERTHAN, 0 ] ];</p>\n<p>We convert strFormulaFilter to a string again in JS, that works great :)</p>\n<p>Great Idea:</p>\n<p>When we have formula in the column, we sort it well; it’s the best way to roll out data as specific reqirement;  works perfect :-)</p>\n<p>Thanks site: </p>\n<p>Notes from: </p>\n<p>My best guess is that the Rhino interpreter parses string concatenation expressions into different Java classes than string literals&#x2F;variables. The NetSuite API then fails to consider those classes when validating that an argument is a javascript “string”.</p>\n<p><a href=\"https://netsuitehub.com/forums/reply/re-record-getvalue-errors-if-field-name-is-built-programatically-5/\">https://netsuitehub.com/forums/reply/re-record-getvalue-errors-if-field-name-is-built-programatically-5/</a></p>\n<p><a href=\"https://www.flowinglink.com/suitescript-2-0-sss/_invalid/_srch/_filter/_expr/_type/\">https://www.flowinglink.com/suitescript-2-0-sss\\_invalid\\_srch\\_filter\\_expr\\_type/</a></p>\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco; color: #2a00ff} span.s1 {color: #7f0055} span.s2 {color: #2a00ff} span.s3 {color: #000000} span.Apple-tab-span {white-space:pre} --> <!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco} span.s1 {color: #7f0055} span.s2 {color: #2a00ff} --> <!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco; color: #2a00ff} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco} p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 11.0px Monaco; min-height: 15.0px} span.s1 {color: #7f0055} span.s2 {color: #000000} span.s3 {color: #2a00ff} span.Apple-tab-span {white-space:pre} -->","categories":[],"tags":[]}