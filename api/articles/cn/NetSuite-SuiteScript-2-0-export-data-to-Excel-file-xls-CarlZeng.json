{"title":"NetSuite SuiteScript 2.0 export data to Excel file(xls)-CarlZeng","slug":"cn/NetSuite-SuiteScript-2-0-export-data-to-Excel-file-xls-CarlZeng","date":"2017-01-05T14:01:00.000Z","updated":"2023-10-08T13:38:52.659Z","comments":true,"path":"api/articles/cn/NetSuite-SuiteScript-2-0-export-data-to-Excel-file-xls-CarlZeng.json","excerpt":"Steps of implement export to excel file in SuiteScript 2.0","covers":["http://images2015.cnblogs.com/blog/41238/201701/41238-20170105215648644-870470043.jpg"],"content":"<p>Steps of implement export to excel file in SuiteScript 2.0</p>\n<!-- more -->\n<p>In NetSuite SuiteScript, We usually do&#x2F;implement export data to CSV, that’s straight forward:</p>\n<ol>\n<li>Collect ‘encoded’ string to Array for column, join them with comma ‘,’ to be a string.</li>\n<li>Collect each line’s data same as column to push to the Array.</li>\n<li>Join all the Array data(include column row and all data rows) with ‘\\n\\t’ to a big CSV string.</li>\n<li>Save the CSV string as file content then store it to file-cabinet, or write them directly in SuiteLet as a output.</li>\n</ol>\n<p>Today I am going to talk about <strong>export custom NetSuite data to EXCEL file</strong>(file suffix is .xls)</p>\n<h3 id=\"Share-ScreenShoot\"><a href=\"#Share-ScreenShoot\" class=\"headerlink\" title=\"Share ScreenShoot:\"></a>Share ScreenShoot:</h3><hr>\n<p><img data-src=\"http://images2015.cnblogs.com/blog/41238/201701/41238-20170105215648644-870470043.jpg\"></p>\n<h3 id=\"High-level-view\"><a href=\"#High-level-view\" class=\"headerlink\" title=\"High level view:\"></a>High level view:</h3><hr>\n<ol>\n<li>Prepared XML header string.  Put in styles as desire, and workbook -&gt; worksheet -&gt; table</li>\n<li>Concat to put in dynamic cell data.  So we got whole well formed xml string.</li>\n<li>nlapiCreateFile(SuiteScript 1.0) or file.create(SuiteScript 2.0) put in <strong>encoded xml string</strong> to create a Excel file.</li>\n<li>Store the file to filecabinet or set it as output of a SuiteLet(so directly download it)</li>\n</ol>\n<h3 id=\"Sample-in-SuiteScript-2-0\"><a href=\"#Sample-in-SuiteScript-2-0\" class=\"headerlink\" title=\"Sample in SuiteScript 2.0:\"></a>Sample in SuiteScript 2.0:</h3><hr>\n<p> 1 &#x2F;**<br> 2  * @NApiVersion 2.x<br> 3  * @NScriptType Suitelet<br> 4  * @NModuleScope SameAccount<br> 5  * @author Carl, Zeng<br> 6  * @description This’s a sample SuiteLet script(SuiteScript 2.0) to export data<br> 7  *              to Excel file and directly download it in browser<br> 8  *&#x2F;<br> 9 define(<br> 10         [ ‘N&#x2F;file’, ‘N&#x2F;encode’ ], 11         &#x2F;**<br> 12          * @param {file}<br> 13          *            file<br> 14          * @param {format}<br> 15          *            format<br> 16          * @param {record}<br> 17          *            record<br> 18          * @param {redirect}<br> 19          *            redirect<br> 20          * @param {runtime}<br> 21          *            runtime<br> 22          * @param {search}<br> 23          *            search<br> 24          * @param {serverWidget}<br> 25          *            serverWidget<br> 26          *&#x2F;<br> 27         function(file, encode) {<br> 28<br> 29             &#x2F;**<br> 30              * Definition of the Suitelet script trigger point.<br> 31              *<br> 32              * @param {Object}<br> 33              *            context<br> 34              * @param {ServerRequest}<br> 35              *            context.request - Encapsulation of the incoming<br> 36              *            request<br> 37              * @param {ServerResponse}<br> 38              *            context.response - Encapsulation of the Suitelet<br> 39              *            response<br> 40              * @Since 2015.2<br> 41              *&#x2F;<br> 42             function onRequest(context) { 43<br> 44                 if (context.request.method &#x3D;&#x3D; ‘GET’) {<br> 45<br> 46                     var xmlStr &#x3D; ‘<?xml version=\"1.0\"?><?mso-application progid=\"Excel.Sheet\"?>‘;<br> 47                     xmlStr +&#x3D; ‘&lt;Workbook xmlns&#x3D;”urn:schemas-microsoft-com:office:spreadsheet” ‘;<br> 48                     xmlStr +&#x3D; ‘xmlns:o&#x3D;”urn:schemas-microsoft-com:office:office” ‘;<br> 49                     xmlStr +&#x3D; ‘xmlns:x&#x3D;”urn:schemas-microsoft-com:office:excel” ‘;<br> 50                     xmlStr +&#x3D; ‘xmlns:ss&#x3D;”urn:schemas-microsoft-com:office:spreadsheet” ‘;<br> 51                     xmlStr +&#x3D; ‘xmlns:html&#x3D;”<a href=\"http://www.w3.org/TR/REC-html40%22%3E\">http://www.w3.org/TR/REC-html40&quot;&gt;</a>‘;<br> 52<br> 53                     xmlStr +&#x3D; ‘<Styles>‘<br> 54                             + ‘<Style ss:ID=\"s63\">‘<br> 55                             + ‘<Font x:CharSet=\"204\" ss:Size=\"12\" ss:Color=\"#000000\" ss:Bold=\"1\" ss:Underline=\"Single\"/>‘<br> 56                             + ‘</Style>‘ + ‘</Styles>‘;<br> 57<br> 58                     xmlStr +&#x3D; ‘<Worksheet ss:Name=\"Sheet1\">‘;<br> 59                     xmlStr +&#x3D; ‘<Table>‘<br> 60                             + ‘<Row>‘<br> 61                             + ‘<Cell ss:StyleID=\"s63\"><Data ss:Type=\"String\"> ID </Data></Cell>‘<br> 62                             + ‘<Cell><Data ss:Type=\"String\"> Products Feature </Data></Cell>‘<br> 63                             + ‘</Row>‘;<br> 64<br> 65                     xmlStr +&#x3D; ‘<Row>‘<br> 66                             + ‘<Cell><Data ss:Type=\"String\">1</Data></Cell>‘<br> 67                             + ‘<Cell><Data ss:Type=\"String\">NetSuite Export CSV</Data></Cell>‘<br> 68                             + ‘</Row>‘;<br> 69<br> 70                     xmlStr +&#x3D; ‘<Row>‘<br> 71                             + ‘<Cell><Data ss:Type=\"String\">2</Data></Cell>‘<br> 72                             + ‘<Cell><Data ss:Type=\"String\">NetSuite Export Excel</Data></Cell>‘<br> 73                             + ‘</Row>‘;<br> 74<br> 75                     xmlStr +&#x3D; ‘</Table></Worksheet></Workbook>‘;<br> 76<br> 77                     var strXmlEncoded &#x3D; encode.convert({ 78                         string : xmlStr,<br> 79                         inputEncoding : encode.Encoding.UTF_8,<br> 80                         outputEncoding : encode.Encoding.BASE_64<br> 81                     });<br> 82<br> 83                     var objXlsFile &#x3D; file.create({ 84                         name : ‘sampleExport.xls’,<br> 85                         fileType : file.Type.EXCEL,<br> 86                         contents : strXmlEncoded<br> 87                     });<br> 88                     &#x2F;&#x2F; Optional: you can choose to save it to file cabinet<br> 89                     &#x2F;&#x2F; objXlsFile.folder &#x3D; -14;<br> 90                     &#x2F;&#x2F; var intFileId &#x3D; objXlsFile.save();<br> 91<br> 92                     context.response.writeFile({<br> 93                         file : objXlsFile<br> 94                     });<br> 95                 }<br> 96<br> 97             }<br> 98<br> 99             return { 100 onRequest : onRequest 101 }; 102<br>103         });</p>\n","more":"<p>Steps of implement export to excel file in SuiteScript 2.0</p>\n<!-- more -->\n<p>In NetSuite SuiteScript, We usually do&#x2F;implement export data to CSV, that’s straight forward:</p>\n<ol>\n<li>Collect ‘encoded’ string to Array for column, join them with comma ‘,’ to be a string.</li>\n<li>Collect each line’s data same as column to push to the Array.</li>\n<li>Join all the Array data(include column row and all data rows) with ‘\\n\\t’ to a big CSV string.</li>\n<li>Save the CSV string as file content then store it to file-cabinet, or write them directly in SuiteLet as a output.</li>\n</ol>\n<p>Today I am going to talk about <strong>export custom NetSuite data to EXCEL file</strong>(file suffix is .xls)</p>\n<h3 id=\"Share-ScreenShoot\"><a href=\"#Share-ScreenShoot\" class=\"headerlink\" title=\"Share ScreenShoot:\"></a>Share ScreenShoot:</h3><hr>\n<p><img data-src=\"http://images2015.cnblogs.com/blog/41238/201701/41238-20170105215648644-870470043.jpg\"></p>\n<h3 id=\"High-level-view\"><a href=\"#High-level-view\" class=\"headerlink\" title=\"High level view:\"></a>High level view:</h3><hr>\n<ol>\n<li>Prepared XML header string.  Put in styles as desire, and workbook -&gt; worksheet -&gt; table</li>\n<li>Concat to put in dynamic cell data.  So we got whole well formed xml string.</li>\n<li>nlapiCreateFile(SuiteScript 1.0) or file.create(SuiteScript 2.0) put in <strong>encoded xml string</strong> to create a Excel file.</li>\n<li>Store the file to filecabinet or set it as output of a SuiteLet(so directly download it)</li>\n</ol>\n<h3 id=\"Sample-in-SuiteScript-2-0\"><a href=\"#Sample-in-SuiteScript-2-0\" class=\"headerlink\" title=\"Sample in SuiteScript 2.0:\"></a>Sample in SuiteScript 2.0:</h3><hr>\n<p> 1 &#x2F;**<br> 2  * @NApiVersion 2.x<br> 3  * @NScriptType Suitelet<br> 4  * @NModuleScope SameAccount<br> 5  * @author Carl, Zeng<br> 6  * @description This’s a sample SuiteLet script(SuiteScript 2.0) to export data<br> 7  *              to Excel file and directly download it in browser<br> 8  *&#x2F;<br> 9 define(<br> 10         [ ‘N&#x2F;file’, ‘N&#x2F;encode’ ], 11         &#x2F;**<br> 12          * @param {file}<br> 13          *            file<br> 14          * @param {format}<br> 15          *            format<br> 16          * @param {record}<br> 17          *            record<br> 18          * @param {redirect}<br> 19          *            redirect<br> 20          * @param {runtime}<br> 21          *            runtime<br> 22          * @param {search}<br> 23          *            search<br> 24          * @param {serverWidget}<br> 25          *            serverWidget<br> 26          *&#x2F;<br> 27         function(file, encode) {<br> 28<br> 29             &#x2F;**<br> 30              * Definition of the Suitelet script trigger point.<br> 31              *<br> 32              * @param {Object}<br> 33              *            context<br> 34              * @param {ServerRequest}<br> 35              *            context.request - Encapsulation of the incoming<br> 36              *            request<br> 37              * @param {ServerResponse}<br> 38              *            context.response - Encapsulation of the Suitelet<br> 39              *            response<br> 40              * @Since 2015.2<br> 41              *&#x2F;<br> 42             function onRequest(context) { 43<br> 44                 if (context.request.method &#x3D;&#x3D; ‘GET’) {<br> 45<br> 46                     var xmlStr &#x3D; ‘<?xml version=\"1.0\"?><?mso-application progid=\"Excel.Sheet\"?>‘;<br> 47                     xmlStr +&#x3D; ‘&lt;Workbook xmlns&#x3D;”urn:schemas-microsoft-com:office:spreadsheet” ‘;<br> 48                     xmlStr +&#x3D; ‘xmlns:o&#x3D;”urn:schemas-microsoft-com:office:office” ‘;<br> 49                     xmlStr +&#x3D; ‘xmlns:x&#x3D;”urn:schemas-microsoft-com:office:excel” ‘;<br> 50                     xmlStr +&#x3D; ‘xmlns:ss&#x3D;”urn:schemas-microsoft-com:office:spreadsheet” ‘;<br> 51                     xmlStr +&#x3D; ‘xmlns:html&#x3D;”<a href=\"http://www.w3.org/TR/REC-html40%22%3E\">http://www.w3.org/TR/REC-html40&quot;&gt;</a>‘;<br> 52<br> 53                     xmlStr +&#x3D; ‘<Styles>‘<br> 54                             + ‘<Style ss:ID=\"s63\">‘<br> 55                             + ‘<Font x:CharSet=\"204\" ss:Size=\"12\" ss:Color=\"#000000\" ss:Bold=\"1\" ss:Underline=\"Single\"/>‘<br> 56                             + ‘</Style>‘ + ‘</Styles>‘;<br> 57<br> 58                     xmlStr +&#x3D; ‘<Worksheet ss:Name=\"Sheet1\">‘;<br> 59                     xmlStr +&#x3D; ‘<Table>‘<br> 60                             + ‘<Row>‘<br> 61                             + ‘<Cell ss:StyleID=\"s63\"><Data ss:Type=\"String\"> ID </Data></Cell>‘<br> 62                             + ‘<Cell><Data ss:Type=\"String\"> Products Feature </Data></Cell>‘<br> 63                             + ‘</Row>‘;<br> 64<br> 65                     xmlStr +&#x3D; ‘<Row>‘<br> 66                             + ‘<Cell><Data ss:Type=\"String\">1</Data></Cell>‘<br> 67                             + ‘<Cell><Data ss:Type=\"String\">NetSuite Export CSV</Data></Cell>‘<br> 68                             + ‘</Row>‘;<br> 69<br> 70                     xmlStr +&#x3D; ‘<Row>‘<br> 71                             + ‘<Cell><Data ss:Type=\"String\">2</Data></Cell>‘<br> 72                             + ‘<Cell><Data ss:Type=\"String\">NetSuite Export Excel</Data></Cell>‘<br> 73                             + ‘</Row>‘;<br> 74<br> 75                     xmlStr +&#x3D; ‘</Table></Worksheet></Workbook>‘;<br> 76<br> 77                     var strXmlEncoded &#x3D; encode.convert({ 78                         string : xmlStr,<br> 79                         inputEncoding : encode.Encoding.UTF_8,<br> 80                         outputEncoding : encode.Encoding.BASE_64<br> 81                     });<br> 82<br> 83                     var objXlsFile &#x3D; file.create({ 84                         name : ‘sampleExport.xls’,<br> 85                         fileType : file.Type.EXCEL,<br> 86                         contents : strXmlEncoded<br> 87                     });<br> 88                     &#x2F;&#x2F; Optional: you can choose to save it to file cabinet<br> 89                     &#x2F;&#x2F; objXlsFile.folder &#x3D; -14;<br> 90                     &#x2F;&#x2F; var intFileId &#x3D; objXlsFile.save();<br> 91<br> 92                     context.response.writeFile({<br> 93                         file : objXlsFile<br> 94                     });<br> 95                 }<br> 96<br> 97             }<br> 98<br> 99             return { 100 onRequest : onRequest 101 }; 102<br>103         });</p>\n","categories":[{"name":"NetSuite","path":"api/categories/NetSuite.json"}],"tags":[{"name":"NetSuite","path":"api/tags/NetSuite.json"}]}