{"title":"prototype.js源码解读(一)-CarlZeng","slug":"cn/prototype-js源码解读-一-CarlZeng","date":"2010-02-25T08:28:00.000Z","updated":"2023-10-02T02:27:29.018Z","comments":true,"path":"api/articles/cn/prototype-js源码解读-一-CarlZeng.json","excerpt":"希望对大家重新认识 Javascript 有所帮助。代码:/*** 定义一个全局对象, 属性 Version 在发布的时候会替换为当前版本号*/var Prototype = {Version: '@@VERSION@@'}/*** 创建一种类型，注意其属性 create 是一个方法，返回一个构造函数。* 一般使用如下* var X = Class...","covers":null,"content":"<p>希望对大家重新认识 Javascript 有所帮助。 代码: &#x2F;** * 定义一个全局对象, 属性 Version 在发布的时候会替换为当前版本号 *&#x2F; var Prototype &#x3D; { Version: ‘@@VERSION@@’ } &#x2F;** * 创建一种类型，注意其属性 create 是一个方法，返回一个构造函数。 * 一般使用如下 * var X &#x3D; Class…</p>\n<!-- more -->\n<p>希望对大家重新认识 Javascript 有所帮助。  </p>\n<p>代码:  </p>\n<p>&#x2F;**<br>* 定义一个全局对象, 属性 Version 在发布的时候会替换为当前版本号<br>*&#x2F;<br>var Prototype &#x3D; {<br>Version: ‘@@VERSION@@’<br>}  </p>\n<p>&#x2F;**<br>* 创建一种类型，注意其属性 create 是一个方法，返回一个构造函数。<br>* 一般使用如下<br>* var X &#x3D; Class.create(); 返回一个类型，类似于 java 的一个Class实例。<br>* 要使用 X 类型，需继续用 new X()来获取一个实例，如同 java 的 Class.newInstance()方法。<br>*<br>* 返回的构造函数会执行名为 initialize 的方法， initialize 是 Ruby 对象的构造器方法名字。<br>* 此时initialize方法还没有定义，其后的代码中创建新类型时会建立相应的同名方法。<br>*<br>* 如果一定要从java上去理解。你可以理解为用Class.create()创建一个继承java.lang.Class类的类。当然java不允许这样做，因为Class类是final的<br>*<br>*&#x2F;<br>var Class &#x3D; {<br>create: function() {<br>return function() {<br>this.initialize.apply(this, arguments);<br>}<br>}<br>}  </p>\n<p>&#x2F;**<br>* 创建一个对象，从变量名来思考，本意也许是定义一个抽象类，以后创建新对象都 extend 它。<br>* 但从其后代码的应用来看， Abstract 更多是为了保持命名空间清晰的考虑。<br>* 也就是说，我们可以给 Abstract 这个对象实例添加新的对象定义。<br>*<br>* 从java去理解，就是动态给一个对象创建内部类。<br>*&#x2F;<br>var Abstract &#x3D; new Object();  </p>\n<p>&#x2F;**<br>* 获取参数对象的所有属性和方法，有点象多重继承。但是这种继承是动态获得的。<br>* 如：<br>* var a &#x3D; new ObjectA(), b &#x3D; new ObjectB();<br>* var c &#x3D; a.extend(b);<br>* 此时 c 对象同时拥有 a 和 b 对象的属性和方法。但是与多重继承不同的是，c instanceof ObjectB 将返回false。<br>*&#x2F;<br>Object.prototype.extend &#x3D; function(object) {<br>for (property in object) {<br>this[property] &#x3D; object[property];<br>}<br>return this;<br>}  </p>\n<p>&#x2F;**<br>* 这个方法很有趣，它封装一个javascript函数对象，返回一个新函数对象，新函数对象的主体和原对象相同，但是bind()方法参数将被用作当前对象的对象。<br>* 也就是说新函数中的 this 引用被改变为参数提供的对象。<br>* 比如：<br>* <input type=\"text\" id=\"aaa\" value=\"aaa\"><br>* <input type=\"text\" id=\"bbb\" value=\"bbb\"><br>* ……………..<br>* <script><br>* var aaa = document.getElementById(\"aaa\");<br>* var bbb = document.getElementById(\"bbb\");<br>* aaa.showValue = function() {alert(this.value);}<br>* aaa.showValue2 = aaa.showValue.bind(bbb);<br>* </script><br>* 那么，调用aaa.showValue 将返回”aaa”, 但调用aaa.showValue2 将返回”bbb”。<br>*<br>* apply 是ie5.5后才出现的新方法(Netscape好像很早就支持了)。<br>* 该方法更多的资料参考MSDN <a href=\"http://msdn.microsoft.com/library/en-us/script56/html/js56jsmthApply.asp\">http://msdn.microsoft.com/library/en...jsmthApply.asp</a><br>* 还有一个 call 方法，应用起来和 apply 类似。可以一起研究下。<br>*&#x2F;<br>Function.prototype.bind &#x3D; function(object) {<br>var method &#x3D; this;<br>return function() {<br>method.apply(object, arguments);<br>}<br>}  </p>\n<p>&#x2F;**<br>* 和bind一样，不过这个方法一般用做html控件对象的事件处理。所以要传递event对象<br>* 注意这时候，用到了 Function.call。它与 Function.apply 的不同好像仅仅是对参数形式的定义。<br>* 如同 java 两个过载的方法。<br>*&#x2F;<br>Function.prototype.bindAsEventListener &#x3D; function(object) {<br>var method &#x3D; this;<br>return function(event) {<br>method.call(object, event || window.event);<br>}<br>}  </p>\n<p>&#x2F;**<br>* 将整数形式RGB颜色值转换为HEX形式<br>*&#x2F;<br>Number.prototype.toColorPart &#x3D; function() {<br>var digits &#x3D; this.toString(16);<br>if (this &lt; 16) return ‘0’ + digits;<br>return digits;<br>}  </p>\n<p>&#x2F;**<br>* 典型 Ruby 风格的函数，将参数中的方法逐个调用，返回第一个成功执行的方法的返回值<br>*&#x2F;<br>var Try &#x3D; {<br>these: function() {<br>var returnValue;  </p>\n<p>for (var i &#x3D; 0; i &lt; arguments.length; i++) {<br>var lambda &#x3D; arguments[i];<br>try {<br>returnValue &#x3D; lambda();<br>break;<br>} catch (e) {}<br>}  </p>\n<p>return returnValue;<br>}<br>}  </p>\n<p>&#x2F;*————————————————————————–*&#x2F;  </p>\n<p>&#x2F;**<br>* 一个设计精巧的定时执行器<br>* 首先由 Class.create() 创建一个 PeriodicalExecuter 类型，<br>* 然后用对象直接量的语法形式设置原型。<br>*<br>* 需要特别说明的是 rgisterCallback 方法，它调用上面定义的函数原型方法bind, 并传递自己为参数。<br>* 之所以这样做，是因为 setTimeout 默认总以 window 对象为当前对象，也就是说，如果 registerCallback 方法定义如下的话：<br>* registerCallback: function() {<br>* setTimeout(this.onTimerEvent, this.frequency * 1000);<br>* }<br>* 那么，this.onTimeoutEvent 方法执行失败，因为它无法访问 this.currentlyExecuting 属性。<br>* 而使用了bind以后，该方法才能正确的找到this，也就是PeriodicalExecuter的当前实例。<br>*&#x2F;<br>var PeriodicalExecuter &#x3D; Class.create();<br>PeriodicalExecuter.prototype &#x3D; {<br>initialize: function(callback, frequency) {<br>this.callback &#x3D; callback;<br>this.frequency &#x3D; frequency;<br>this.currentlyExecuting &#x3D; false;  </p>\n<p>this.registerCallback();<br>},  </p>\n<p>registerCallback: function() {<br>setTimeout(this.onTimerEvent.bind(this), this.frequency * 1000);<br>},  </p>\n<p>onTimerEvent: function() {<br>if (!this.currentlyExecuting) {<br>try {<br>this.currentlyExecuting &#x3D; true;<br>this.callback();<br>} finally {<br>this.currentlyExecuting &#x3D; false;<br>}<br>}  </p>\n<p>this.registerCallback();<br>}<br>}  </p>\n<p>&#x2F;*————————————————————————–*&#x2F;  </p>\n<p>&#x2F;**<br>* 这个函数就 Ruby 了。我觉得它的作用主要有两个<br>* 1. 大概是 document.getElementById(id) 的最简化调用。<br>* 比如：$(“aaa”) 将返回上 aaa 对象<br>* 2. 得到对象数组<br>* 比如: $(“aaa”,”bbb”) 返回一个包括id为”aaa”和”bbb”两个input控件对象的数组。<br>*&#x2F;<br>function $() {<br>var elements &#x3D; new Array();  </p>\n<p>for (var i &#x3D; 0; i &lt; arguments.length; i++) {<br>var element &#x3D; arguments[i];<br>if (typeof element &#x3D;&#x3D; ‘string’)<br>element &#x3D; document.getElementById(element);  </p>\n<p>if (arguments.length &#x3D;&#x3D; 1)<br>return element;  </p>\n<p>elements.push(element);<br>}  </p>\n<p>return elements;<br>}<br>&#x2F;**<br>* 定义 Ajax 对象, 静态方法 getTransport 方法返回一个 XMLHttp 对象<br>*&#x2F;<br>var Ajax &#x3D; {<br>getTransport: function() {<br>return Try.these(<br>function() {return new ActiveXObject(‘Msxml2.XMLHTTP’)},<br>function() {return new ActiveXObject(‘Microsoft.XMLHTTP’)},<br>function() {return new XMLHttpRequest()}<br>) || false;<br>},  </p>\n<p>emptyFunction: function() {}<br>}  </p>\n<p>&#x2F;**<br>* 我以为此时的Ajax对象起到命名空间的作用。<br>* Ajax.Base 声明为一个基础对象类型<br>* 注意 Ajax.Base 并没有使用 Class.create() 的方式来创建，我想是因为作者并不希望 Ajax.Base 被库使用者实例化。<br>* 作者在其他对象类型的声明中，将会继承于它。<br>* 就好像 java 中的私有抽象类<br>*&#x2F;<br>Ajax.Base &#x3D; function() {};<br>Ajax.Base.prototype &#x3D; {<br>&#x2F;**<br>* extend (见prototype.js中的定义) 的用法真是让人耳目一新<br>* options 首先设置默认属性，然后再 extend 参数对象，那么参数对象中也有同名的属性，那么就覆盖默认属性值。<br>* 想想如果我写这样的实现，应该类似如下：<br>setOptions: function(options) {<br>this.options.methed &#x3D; options.methed? options.methed : ‘post’;<br>……….<br>}<br>我想很多时候，java 限制了 js 的创意。<br>*&#x2F;<br>setOptions: function(options) {<br>this.options &#x3D; {<br>method: ‘post’,<br>asynchronous: true,<br>parameters: ‘’<br>}.extend(options || {});<br>}<br>}  </p>\n<p>&#x2F;**<br>* Ajax.Request 封装 XmlHttp<br>*&#x2F;<br>Ajax.Request &#x3D; Class.create();  </p>\n<p>&#x2F;**<br>* 定义四种事件(状态)， 参考<a href=\"http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/readystate_1.asp\">http://msdn.microsoft.com/workshop/a...adystate_1.asp</a><br>*&#x2F;<br>Ajax.Request.Events &#x3D;<br>[‘Uninitialized’, ‘Loading’, ‘Loaded’, ‘Interactive’, ‘Complete’];  </p>\n<p>&#x2F;**<br>*<br>*&#x2F;<br>Ajax.Request.prototype &#x3D; (new Ajax.Base()).extend({<br>initialize: function(url, options) {<br>this.transport &#x3D; Ajax.getTransport();<br>this.setOptions(options);  </p>\n<p>try {<br>if (this.options.method &#x3D;&#x3D; ‘get’)<br>url +&#x3D; ‘?’ + this.options.parameters + ‘&amp;_&#x3D;’;  </p>\n<p>&#x2F;**<br>* 此处好像强制使用了异步方式，而不是依照 this.options.asynchronous 的值<br>*&#x2F;<br>this.transport.open(this.options.method, url, true);  </p>\n<p>&#x2F;**<br>* 这里提供了 XmlHttp 传输过程中每个步骤的回调函数<br>*&#x2F;<br>if (this.options.asynchronous) {<br>this.transport.onreadystatechange &#x3D; this.onStateChange.bind(this);<br>setTimeout((function() {this.respondToReadyState(1)}).bind(this), 10);<br>}  </p>\n<p>this.transport.setRequestHeader(‘X-Requested-With’, ‘XMLHttpRequest’);<br>this.transport.setRequestHeader(‘X-Prototype-Version’, Prototype.Version);  </p>\n<p>if (this.options.method &#x3D;&#x3D; ‘post’) {<br>this.transport.setRequestHeader(‘Connection’, ‘close’);<br>this.transport.setRequestHeader(‘Content-type’,<br>‘application&#x2F;x-www-form-urlencoded’);<br>}  </p>\n<p>this.transport.send(this.options.method &#x3D;&#x3D; ‘post’ ?<br>this.options.parameters + ‘&amp;_&#x3D;’ : null);  </p>\n<p>} catch (e) {<br>}<br>},  </p>\n<p>onStateChange: function() {<br>var readyState &#x3D; this.transport.readyState;<br>&#x2F;**<br>* 如果不是 Loading 状态，就调用回调函数<br>*&#x2F;<br>if (readyState !&#x3D; 1)<br>this.respondToReadyState(this.transport.readyState);<br>},  </p>\n<p>&#x2F;**<br>* 回调函数定义在 this.options 属性中，比如:<br>var option &#x3D; {<br>onLoaded : function(req) {…};<br>……<br>}<br>new Ajax.Request(url, option);<br>*&#x2F;<br>respondToReadyState: function(readyState) {<br>var event &#x3D; Ajax.Request.Events[readyState];<br>(this.options[‘on’ + event] || Ajax.emptyFunction)(this.transport);<br>}<br>});  </p>\n<p>&#x2F;**<br>* Ajax.Updater 用于绑定一个html元素与 XmlHttp调用的返回值。类似与 buffalo 的 bind。<br>* 如果 options 中有 insertion(from dom.js) 对象的话, insertion 能提供更多的插入控制。<br>*&#x2F;<br>Ajax.Updater &#x3D; Class.create();<br>Ajax.Updater.prototype &#x3D; (new Ajax.Base()).extend({<br>initialize: function(container, url, options) {<br>this.container &#x3D; $(container);<br>this.setOptions(options);  </p>\n<p>if (this.options.asynchronous) {<br>this.onComplete &#x3D; this.options.onComplete;<br>this.options.onComplete &#x3D; this.updateContent.bind(this);<br>}  </p>\n<p>this.request &#x3D; new Ajax.Request(url, this.options);  </p>\n<p>if (!this.options.asynchronous)<br>this.updateContent();<br>},  </p>\n<p>updateContent: function() {<br>if (this.options.insertion) {<br>new this.options.insertion(this.container,<br>this.request.transport.responseText);<br>} else {<br>this.container.innerHTML &#x3D; this.request.transport.responseText;<br>}  </p>\n<p>if (this.onComplete) {<br>setTimeout((function() {this.onComplete(this.request)}).bind(this), 10);<br>}<br>}<br>});<br>&#x2F;**<br>* 针对 页面元素对象 的工具类，提供一些简单静态方法<br>*&#x2F;<br>var Field &#x3D; {<br>&#x2F;**<br>* 清除参数引用对象的值<br>*&#x2F;<br>clear: function() {<br>for (var i &#x3D; 0; i &lt; arguments.length; i++)<br>$(arguments[i]).value &#x3D; ‘’;<br>},  </p>\n<p>&#x2F;**<br>* 使参数引用对象获取焦点<br>*&#x2F;<br>focus: function(element) {<br>$(element).focus();<br>},  </p>\n<p>&#x2F;**<br>* 判断参数引用对象值是否为空，如为空，返回false, 反之true<br>*&#x2F;<br>present: function() {<br>for (var i &#x3D; 0; i &lt; arguments.length; i++)<br>if ($(arguments[i]).value &#x3D;&#x3D; ‘’) return false;<br>return true;<br>},  </p>\n<p>&#x2F;**<br>* 使选中参数引用对象<br>*&#x2F;<br>select: function(element) {<br>$(element).select();<br>},  </p>\n<p>&#x2F;**<br>* 使参数引用对象处于可编辑状态<br>*&#x2F;<br>activate: function(element) {<br>$(element).focus();<br>$(element).select();<br>}<br>}  </p>\n<p>&#x2F;*————————————————————————–*&#x2F;  </p>\n<p>&#x2F;**<br>* 表单工具类<br>*&#x2F;<br>var Form &#x3D; {<br>&#x2F;**<br>* 将表单元素序列化后的值组合成 QueryString 的形式<br>*&#x2F;<br>serialize: function(form) {<br>var elements &#x3D; Form.getElements($(form));<br>var queryComponents &#x3D; new Array();  </p>\n<p>for (var i &#x3D; 0; i &lt; elements.length; i++) {<br>var queryComponent &#x3D; Form.Element.serialize(elements[i]);<br>if (queryComponent)<br>queryComponents.push(queryComponent);<br>}  </p>\n<p>return queryComponents.join(‘&amp;’);<br>},  </p>\n<p>&#x2F;**<br>* 得到表单的所有元素对象<br>*&#x2F;<br>getElements: function(form) {<br>form &#x3D; $(form);<br>var elements &#x3D; new Array();  </p>\n<p>for (tagName in Form.Element.Serializers) {<br>var tagElements &#x3D; form.getElementsByTagName(tagName);<br>for (var j &#x3D; 0; j &lt; tagElements.length; j++)<br>elements.push(tagElements[j]);<br>}<br>return elements;<br>},  </p>\n<p>&#x2F;**<br>* 将指定表单的元素置于不可用状态<br>*&#x2F;<br>disable: function(form) {<br>var elements &#x3D; Form.getElements(form);<br>for (var i &#x3D; 0; i &lt; elements.length; i++) {<br>var element &#x3D; elements[i];<br>element.blur();<br>element.disable &#x3D; ‘true’;<br>}<br>},</p>\n<p>from:<a href=\"http://forum.j2eemx.com/ajax-ajax-discussions/1026-prototype-javascript.html\">http://forum.j2eemx.com/ajax-ajax-discussions/1026-prototype-javascript.html</a></p>\n","more":"<p>希望对大家重新认识 Javascript 有所帮助。 代码: &#x2F;** * 定义一个全局对象, 属性 Version 在发布的时候会替换为当前版本号 *&#x2F; var Prototype &#x3D; { Version: ‘@@VERSION@@’ } &#x2F;** * 创建一种类型，注意其属性 create 是一个方法，返回一个构造函数。 * 一般使用如下 * var X &#x3D; Class…</p>\n<!-- more -->\n<p>希望对大家重新认识 Javascript 有所帮助。  </p>\n<p>代码:  </p>\n<p>&#x2F;**<br>* 定义一个全局对象, 属性 Version 在发布的时候会替换为当前版本号<br>*&#x2F;<br>var Prototype &#x3D; {<br>Version: ‘@@VERSION@@’<br>}  </p>\n<p>&#x2F;**<br>* 创建一种类型，注意其属性 create 是一个方法，返回一个构造函数。<br>* 一般使用如下<br>* var X &#x3D; Class.create(); 返回一个类型，类似于 java 的一个Class实例。<br>* 要使用 X 类型，需继续用 new X()来获取一个实例，如同 java 的 Class.newInstance()方法。<br>*<br>* 返回的构造函数会执行名为 initialize 的方法， initialize 是 Ruby 对象的构造器方法名字。<br>* 此时initialize方法还没有定义，其后的代码中创建新类型时会建立相应的同名方法。<br>*<br>* 如果一定要从java上去理解。你可以理解为用Class.create()创建一个继承java.lang.Class类的类。当然java不允许这样做，因为Class类是final的<br>*<br>*&#x2F;<br>var Class &#x3D; {<br>create: function() {<br>return function() {<br>this.initialize.apply(this, arguments);<br>}<br>}<br>}  </p>\n<p>&#x2F;**<br>* 创建一个对象，从变量名来思考，本意也许是定义一个抽象类，以后创建新对象都 extend 它。<br>* 但从其后代码的应用来看， Abstract 更多是为了保持命名空间清晰的考虑。<br>* 也就是说，我们可以给 Abstract 这个对象实例添加新的对象定义。<br>*<br>* 从java去理解，就是动态给一个对象创建内部类。<br>*&#x2F;<br>var Abstract &#x3D; new Object();  </p>\n<p>&#x2F;**<br>* 获取参数对象的所有属性和方法，有点象多重继承。但是这种继承是动态获得的。<br>* 如：<br>* var a &#x3D; new ObjectA(), b &#x3D; new ObjectB();<br>* var c &#x3D; a.extend(b);<br>* 此时 c 对象同时拥有 a 和 b 对象的属性和方法。但是与多重继承不同的是，c instanceof ObjectB 将返回false。<br>*&#x2F;<br>Object.prototype.extend &#x3D; function(object) {<br>for (property in object) {<br>this[property] &#x3D; object[property];<br>}<br>return this;<br>}  </p>\n<p>&#x2F;**<br>* 这个方法很有趣，它封装一个javascript函数对象，返回一个新函数对象，新函数对象的主体和原对象相同，但是bind()方法参数将被用作当前对象的对象。<br>* 也就是说新函数中的 this 引用被改变为参数提供的对象。<br>* 比如：<br>* <input type=\"text\" id=\"aaa\" value=\"aaa\"><br>* <input type=\"text\" id=\"bbb\" value=\"bbb\"><br>* ……………..<br>* <script><br>* var aaa = document.getElementById(\"aaa\");<br>* var bbb = document.getElementById(\"bbb\");<br>* aaa.showValue = function() {alert(this.value);}<br>* aaa.showValue2 = aaa.showValue.bind(bbb);<br>* </script><br>* 那么，调用aaa.showValue 将返回”aaa”, 但调用aaa.showValue2 将返回”bbb”。<br>*<br>* apply 是ie5.5后才出现的新方法(Netscape好像很早就支持了)。<br>* 该方法更多的资料参考MSDN <a href=\"http://msdn.microsoft.com/library/en-us/script56/html/js56jsmthApply.asp\">http://msdn.microsoft.com/library/en...jsmthApply.asp</a><br>* 还有一个 call 方法，应用起来和 apply 类似。可以一起研究下。<br>*&#x2F;<br>Function.prototype.bind &#x3D; function(object) {<br>var method &#x3D; this;<br>return function() {<br>method.apply(object, arguments);<br>}<br>}  </p>\n<p>&#x2F;**<br>* 和bind一样，不过这个方法一般用做html控件对象的事件处理。所以要传递event对象<br>* 注意这时候，用到了 Function.call。它与 Function.apply 的不同好像仅仅是对参数形式的定义。<br>* 如同 java 两个过载的方法。<br>*&#x2F;<br>Function.prototype.bindAsEventListener &#x3D; function(object) {<br>var method &#x3D; this;<br>return function(event) {<br>method.call(object, event || window.event);<br>}<br>}  </p>\n<p>&#x2F;**<br>* 将整数形式RGB颜色值转换为HEX形式<br>*&#x2F;<br>Number.prototype.toColorPart &#x3D; function() {<br>var digits &#x3D; this.toString(16);<br>if (this &lt; 16) return ‘0’ + digits;<br>return digits;<br>}  </p>\n<p>&#x2F;**<br>* 典型 Ruby 风格的函数，将参数中的方法逐个调用，返回第一个成功执行的方法的返回值<br>*&#x2F;<br>var Try &#x3D; {<br>these: function() {<br>var returnValue;  </p>\n<p>for (var i &#x3D; 0; i &lt; arguments.length; i++) {<br>var lambda &#x3D; arguments[i];<br>try {<br>returnValue &#x3D; lambda();<br>break;<br>} catch (e) {}<br>}  </p>\n<p>return returnValue;<br>}<br>}  </p>\n<p>&#x2F;*————————————————————————–*&#x2F;  </p>\n<p>&#x2F;**<br>* 一个设计精巧的定时执行器<br>* 首先由 Class.create() 创建一个 PeriodicalExecuter 类型，<br>* 然后用对象直接量的语法形式设置原型。<br>*<br>* 需要特别说明的是 rgisterCallback 方法，它调用上面定义的函数原型方法bind, 并传递自己为参数。<br>* 之所以这样做，是因为 setTimeout 默认总以 window 对象为当前对象，也就是说，如果 registerCallback 方法定义如下的话：<br>* registerCallback: function() {<br>* setTimeout(this.onTimerEvent, this.frequency * 1000);<br>* }<br>* 那么，this.onTimeoutEvent 方法执行失败，因为它无法访问 this.currentlyExecuting 属性。<br>* 而使用了bind以后，该方法才能正确的找到this，也就是PeriodicalExecuter的当前实例。<br>*&#x2F;<br>var PeriodicalExecuter &#x3D; Class.create();<br>PeriodicalExecuter.prototype &#x3D; {<br>initialize: function(callback, frequency) {<br>this.callback &#x3D; callback;<br>this.frequency &#x3D; frequency;<br>this.currentlyExecuting &#x3D; false;  </p>\n<p>this.registerCallback();<br>},  </p>\n<p>registerCallback: function() {<br>setTimeout(this.onTimerEvent.bind(this), this.frequency * 1000);<br>},  </p>\n<p>onTimerEvent: function() {<br>if (!this.currentlyExecuting) {<br>try {<br>this.currentlyExecuting &#x3D; true;<br>this.callback();<br>} finally {<br>this.currentlyExecuting &#x3D; false;<br>}<br>}  </p>\n<p>this.registerCallback();<br>}<br>}  </p>\n<p>&#x2F;*————————————————————————–*&#x2F;  </p>\n<p>&#x2F;**<br>* 这个函数就 Ruby 了。我觉得它的作用主要有两个<br>* 1. 大概是 document.getElementById(id) 的最简化调用。<br>* 比如：$(“aaa”) 将返回上 aaa 对象<br>* 2. 得到对象数组<br>* 比如: $(“aaa”,”bbb”) 返回一个包括id为”aaa”和”bbb”两个input控件对象的数组。<br>*&#x2F;<br>function $() {<br>var elements &#x3D; new Array();  </p>\n<p>for (var i &#x3D; 0; i &lt; arguments.length; i++) {<br>var element &#x3D; arguments[i];<br>if (typeof element &#x3D;&#x3D; ‘string’)<br>element &#x3D; document.getElementById(element);  </p>\n<p>if (arguments.length &#x3D;&#x3D; 1)<br>return element;  </p>\n<p>elements.push(element);<br>}  </p>\n<p>return elements;<br>}<br>&#x2F;**<br>* 定义 Ajax 对象, 静态方法 getTransport 方法返回一个 XMLHttp 对象<br>*&#x2F;<br>var Ajax &#x3D; {<br>getTransport: function() {<br>return Try.these(<br>function() {return new ActiveXObject(‘Msxml2.XMLHTTP’)},<br>function() {return new ActiveXObject(‘Microsoft.XMLHTTP’)},<br>function() {return new XMLHttpRequest()}<br>) || false;<br>},  </p>\n<p>emptyFunction: function() {}<br>}  </p>\n<p>&#x2F;**<br>* 我以为此时的Ajax对象起到命名空间的作用。<br>* Ajax.Base 声明为一个基础对象类型<br>* 注意 Ajax.Base 并没有使用 Class.create() 的方式来创建，我想是因为作者并不希望 Ajax.Base 被库使用者实例化。<br>* 作者在其他对象类型的声明中，将会继承于它。<br>* 就好像 java 中的私有抽象类<br>*&#x2F;<br>Ajax.Base &#x3D; function() {};<br>Ajax.Base.prototype &#x3D; {<br>&#x2F;**<br>* extend (见prototype.js中的定义) 的用法真是让人耳目一新<br>* options 首先设置默认属性，然后再 extend 参数对象，那么参数对象中也有同名的属性，那么就覆盖默认属性值。<br>* 想想如果我写这样的实现，应该类似如下：<br>setOptions: function(options) {<br>this.options.methed &#x3D; options.methed? options.methed : ‘post’;<br>……….<br>}<br>我想很多时候，java 限制了 js 的创意。<br>*&#x2F;<br>setOptions: function(options) {<br>this.options &#x3D; {<br>method: ‘post’,<br>asynchronous: true,<br>parameters: ‘’<br>}.extend(options || {});<br>}<br>}  </p>\n<p>&#x2F;**<br>* Ajax.Request 封装 XmlHttp<br>*&#x2F;<br>Ajax.Request &#x3D; Class.create();  </p>\n<p>&#x2F;**<br>* 定义四种事件(状态)， 参考<a href=\"http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/readystate_1.asp\">http://msdn.microsoft.com/workshop/a...adystate_1.asp</a><br>*&#x2F;<br>Ajax.Request.Events &#x3D;<br>[‘Uninitialized’, ‘Loading’, ‘Loaded’, ‘Interactive’, ‘Complete’];  </p>\n<p>&#x2F;**<br>*<br>*&#x2F;<br>Ajax.Request.prototype &#x3D; (new Ajax.Base()).extend({<br>initialize: function(url, options) {<br>this.transport &#x3D; Ajax.getTransport();<br>this.setOptions(options);  </p>\n<p>try {<br>if (this.options.method &#x3D;&#x3D; ‘get’)<br>url +&#x3D; ‘?’ + this.options.parameters + ‘&amp;_&#x3D;’;  </p>\n<p>&#x2F;**<br>* 此处好像强制使用了异步方式，而不是依照 this.options.asynchronous 的值<br>*&#x2F;<br>this.transport.open(this.options.method, url, true);  </p>\n<p>&#x2F;**<br>* 这里提供了 XmlHttp 传输过程中每个步骤的回调函数<br>*&#x2F;<br>if (this.options.asynchronous) {<br>this.transport.onreadystatechange &#x3D; this.onStateChange.bind(this);<br>setTimeout((function() {this.respondToReadyState(1)}).bind(this), 10);<br>}  </p>\n<p>this.transport.setRequestHeader(‘X-Requested-With’, ‘XMLHttpRequest’);<br>this.transport.setRequestHeader(‘X-Prototype-Version’, Prototype.Version);  </p>\n<p>if (this.options.method &#x3D;&#x3D; ‘post’) {<br>this.transport.setRequestHeader(‘Connection’, ‘close’);<br>this.transport.setRequestHeader(‘Content-type’,<br>‘application&#x2F;x-www-form-urlencoded’);<br>}  </p>\n<p>this.transport.send(this.options.method &#x3D;&#x3D; ‘post’ ?<br>this.options.parameters + ‘&amp;_&#x3D;’ : null);  </p>\n<p>} catch (e) {<br>}<br>},  </p>\n<p>onStateChange: function() {<br>var readyState &#x3D; this.transport.readyState;<br>&#x2F;**<br>* 如果不是 Loading 状态，就调用回调函数<br>*&#x2F;<br>if (readyState !&#x3D; 1)<br>this.respondToReadyState(this.transport.readyState);<br>},  </p>\n<p>&#x2F;**<br>* 回调函数定义在 this.options 属性中，比如:<br>var option &#x3D; {<br>onLoaded : function(req) {…};<br>……<br>}<br>new Ajax.Request(url, option);<br>*&#x2F;<br>respondToReadyState: function(readyState) {<br>var event &#x3D; Ajax.Request.Events[readyState];<br>(this.options[‘on’ + event] || Ajax.emptyFunction)(this.transport);<br>}<br>});  </p>\n<p>&#x2F;**<br>* Ajax.Updater 用于绑定一个html元素与 XmlHttp调用的返回值。类似与 buffalo 的 bind。<br>* 如果 options 中有 insertion(from dom.js) 对象的话, insertion 能提供更多的插入控制。<br>*&#x2F;<br>Ajax.Updater &#x3D; Class.create();<br>Ajax.Updater.prototype &#x3D; (new Ajax.Base()).extend({<br>initialize: function(container, url, options) {<br>this.container &#x3D; $(container);<br>this.setOptions(options);  </p>\n<p>if (this.options.asynchronous) {<br>this.onComplete &#x3D; this.options.onComplete;<br>this.options.onComplete &#x3D; this.updateContent.bind(this);<br>}  </p>\n<p>this.request &#x3D; new Ajax.Request(url, this.options);  </p>\n<p>if (!this.options.asynchronous)<br>this.updateContent();<br>},  </p>\n<p>updateContent: function() {<br>if (this.options.insertion) {<br>new this.options.insertion(this.container,<br>this.request.transport.responseText);<br>} else {<br>this.container.innerHTML &#x3D; this.request.transport.responseText;<br>}  </p>\n<p>if (this.onComplete) {<br>setTimeout((function() {this.onComplete(this.request)}).bind(this), 10);<br>}<br>}<br>});<br>&#x2F;**<br>* 针对 页面元素对象 的工具类，提供一些简单静态方法<br>*&#x2F;<br>var Field &#x3D; {<br>&#x2F;**<br>* 清除参数引用对象的值<br>*&#x2F;<br>clear: function() {<br>for (var i &#x3D; 0; i &lt; arguments.length; i++)<br>$(arguments[i]).value &#x3D; ‘’;<br>},  </p>\n<p>&#x2F;**<br>* 使参数引用对象获取焦点<br>*&#x2F;<br>focus: function(element) {<br>$(element).focus();<br>},  </p>\n<p>&#x2F;**<br>* 判断参数引用对象值是否为空，如为空，返回false, 反之true<br>*&#x2F;<br>present: function() {<br>for (var i &#x3D; 0; i &lt; arguments.length; i++)<br>if ($(arguments[i]).value &#x3D;&#x3D; ‘’) return false;<br>return true;<br>},  </p>\n<p>&#x2F;**<br>* 使选中参数引用对象<br>*&#x2F;<br>select: function(element) {<br>$(element).select();<br>},  </p>\n<p>&#x2F;**<br>* 使参数引用对象处于可编辑状态<br>*&#x2F;<br>activate: function(element) {<br>$(element).focus();<br>$(element).select();<br>}<br>}  </p>\n<p>&#x2F;*————————————————————————–*&#x2F;  </p>\n<p>&#x2F;**<br>* 表单工具类<br>*&#x2F;<br>var Form &#x3D; {<br>&#x2F;**<br>* 将表单元素序列化后的值组合成 QueryString 的形式<br>*&#x2F;<br>serialize: function(form) {<br>var elements &#x3D; Form.getElements($(form));<br>var queryComponents &#x3D; new Array();  </p>\n<p>for (var i &#x3D; 0; i &lt; elements.length; i++) {<br>var queryComponent &#x3D; Form.Element.serialize(elements[i]);<br>if (queryComponent)<br>queryComponents.push(queryComponent);<br>}  </p>\n<p>return queryComponents.join(‘&amp;’);<br>},  </p>\n<p>&#x2F;**<br>* 得到表单的所有元素对象<br>*&#x2F;<br>getElements: function(form) {<br>form &#x3D; $(form);<br>var elements &#x3D; new Array();  </p>\n<p>for (tagName in Form.Element.Serializers) {<br>var tagElements &#x3D; form.getElementsByTagName(tagName);<br>for (var j &#x3D; 0; j &lt; tagElements.length; j++)<br>elements.push(tagElements[j]);<br>}<br>return elements;<br>},  </p>\n<p>&#x2F;**<br>* 将指定表单的元素置于不可用状态<br>*&#x2F;<br>disable: function(form) {<br>var elements &#x3D; Form.getElements(form);<br>for (var i &#x3D; 0; i &lt; elements.length; i++) {<br>var element &#x3D; elements[i];<br>element.blur();<br>element.disable &#x3D; ‘true’;<br>}<br>},</p>\n<p>from:<a href=\"http://forum.j2eemx.com/ajax-ajax-discussions/1026-prototype-javascript.html\">http://forum.j2eemx.com/ajax-ajax-discussions/1026-prototype-javascript.html</a></p>\n","categories":[],"tags":[]}