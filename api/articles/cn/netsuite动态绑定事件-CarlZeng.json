{"title":"netsuite动态绑定事件-CarlZeng","slug":"cn/netsuite动态绑定事件-CarlZeng","date":"2009-07-09T02:56:00.000Z","updated":"2023-10-08T13:38:52.659Z","comments":true,"path":"api/articles/cn/netsuite动态绑定事件-CarlZeng.json","excerpt":"这个能给一个指定的对象绑定多个重复的事件，执行顺序按照添加顺序来执行！已测试浏览器（ie7,firefox,chrome）var Bind = function(eventName, fun, obj) { ///给对象绑定事件，未传入对象的话默认绑定window ///<param name=\"eventName\"&g...","covers":null,"content":"<p>这个能给一个指定的对象绑定多个重复的事件，执行顺序按照添加顺序来执行！已测试浏览器（ie7,firefox,chrome） var Bind &#x3D; function(eventName, fun, obj) { &#x2F;&#x2F;&#x2F;给对象绑定事件，未传入对象的话默认绑定window &#x2F;&#x2F;&#x2F;</p>\n<!-- more -->\n<pre><code>这个能给一个指定的对象绑定多个重复的事件，执行顺序按照添加顺序来执行！已测试浏览器（ie7,firefox,chrome）\n</code></pre>\n<p>var Bind &#x3D; function(eventName, fun, obj) {<br>    &#x2F;&#x2F;&#x2F;<summary>给对象绑定事件，未传入对象的话默认绑定window</summary><br>    &#x2F;&#x2F;&#x2F;<param name=\"eventName\">事件名称,不包含on</param><br>    &#x2F;&#x2F;&#x2F;<param name=\"funName\">调用函数名</param><br>    &#x2F;&#x2F;&#x2F;<param name=\"obj\">要绑定事件的对象</param> if (obj &#x3D;&#x3D; null || obj &#x3D;&#x3D; undefined) {<br>        obj &#x3D; window;<br>    }<br>    if (obj.attachEvent) {<br>        obj.attachEvent(“on” + eventName, fun);<br>    }<br>    else if (obj.addEventListener) {<br>        obj.addEventListener(eventName, fun, false);<br>    }<br>};</p>\n<blockquote>\n<p>以上是主要方法，下面来解释使用。。。</p>\n<p>在初始化中 把Bind(“click”, function() { alert(“HelloWorld”); }, document.getElementById(“serialnumbers_popup_list”));</p>\n<p>或者；</p>\n<p>Bind(“click”,FunNewTest,document.getElementById(“serialnumbers_popup_list”));</p>\n<p>FunNewTest() 定义然后 包括流程上的需要 即可。。。。</p>\n</blockquote>\n","more":"<p>这个能给一个指定的对象绑定多个重复的事件，执行顺序按照添加顺序来执行！已测试浏览器（ie7,firefox,chrome） var Bind &#x3D; function(eventName, fun, obj) { &#x2F;&#x2F;&#x2F;给对象绑定事件，未传入对象的话默认绑定window &#x2F;&#x2F;&#x2F;</p>\n<!-- more -->\n<pre><code>这个能给一个指定的对象绑定多个重复的事件，执行顺序按照添加顺序来执行！已测试浏览器（ie7,firefox,chrome）\n</code></pre>\n<p>var Bind &#x3D; function(eventName, fun, obj) {<br>    &#x2F;&#x2F;&#x2F;<summary>给对象绑定事件，未传入对象的话默认绑定window</summary><br>    &#x2F;&#x2F;&#x2F;<param name=\"eventName\">事件名称,不包含on</param><br>    &#x2F;&#x2F;&#x2F;<param name=\"funName\">调用函数名</param><br>    &#x2F;&#x2F;&#x2F;<param name=\"obj\">要绑定事件的对象</param> if (obj &#x3D;&#x3D; null || obj &#x3D;&#x3D; undefined) {<br>        obj &#x3D; window;<br>    }<br>    if (obj.attachEvent) {<br>        obj.attachEvent(“on” + eventName, fun);<br>    }<br>    else if (obj.addEventListener) {<br>        obj.addEventListener(eventName, fun, false);<br>    }<br>};</p>\n<blockquote>\n<p>以上是主要方法，下面来解释使用。。。</p>\n<p>在初始化中 把Bind(“click”, function() { alert(“HelloWorld”); }, document.getElementById(“serialnumbers_popup_list”));</p>\n<p>或者；</p>\n<p>Bind(“click”,FunNewTest,document.getElementById(“serialnumbers_popup_list”));</p>\n<p>FunNewTest() 定义然后 包括流程上的需要 即可。。。。</p>\n</blockquote>\n","categories":[{"name":"NetSuite","path":"api/categories/NetSuite.json"}],"tags":[{"name":"NetSuite","path":"api/tags/NetSuite.json"}]}