{"title":"js 如何让forEach可以break？-CarlZeng","slug":"cn/js-如何让forEach可以break？-CarlZeng","date":"2019-01-10T09:41:00.000Z","updated":"2023-10-08T14:21:10.120Z","comments":true,"path":"api/articles/cn/js-如何让forEach可以break？-CarlZeng.json","excerpt":"While working with Java Script, all of us must have surely run into the case where we need to loop through an array and break the running loop if a ce","covers":null,"content":"<p>While working with Java Script, all of us must have surely run into the case where we need to loop through an array and break the running loop if a ce</p>\n<!-- more -->\n<p>rtain condition is met. There are many methods how we can loop through an array but we are always looking for the most efficient way to do that.</p>\n<p>Our favorite loop method: Array.prototype.forEach</p>\n<p>forEach is such an useful method.<br>But…how can I break the forEach loop?<br>Well… you can’t break forEach.</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p><code>var</code> <code>arr = [``&quot;Kathmandu&quot;``,</code> <code>&quot;Pokhara&quot;``,</code> <code>&quot;Lumbini&quot;``,</code> <code>&quot;Gorkha&quot;``];</code></p>\n<p><code>arr.forEach(``function``(value, index, _arr) &#123;</code></p>\n<p><code>console.log(index +</code> <code>&quot;: &quot;</code> <code>+ value);</code></p>\n<p><code>return</code> <code>false``;</code></p>\n<p><code>&#125;);</code></p>\n<p>The result should look like</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p><code>0: Kathmandu</code></p>\n<p><code>1: Pokhara</code></p>\n<p><code>2: Lumbini</code></p>\n<p><code>3: Gorkha</code></p>\n<p>It’s still iterating through all items in the array. What should I do if I want to stop the loop based on the condition? We either set a variable that changes only if the condition is met, but it will still mean that the loop will iterate until the array is exhausted to the last item.</p>\n<p>So, what do we do?? It’s simple.</p>\n<h4 id=\"Don’t-use-“forEach”-Use-“some”-or-“every”\"><a href=\"#Don’t-use-“forEach”-Use-“some”-or-“every”\" class=\"headerlink\" title=\"Don’t use “forEach”. Use “some” or “every”.\"></a>Don’t use “forEach”. Use “some” or “<strong>every</strong>”.</h4><hr>\n<h6 id=\"Array-prototype-some\"><a href=\"#Array-prototype-some\" class=\"headerlink\" title=\"Array.prototype.some\"></a>Array.prototype.some</h6><p>Array.prototype.some is pretty much the same as forEach but it break when the callback returns <em>true</em>.</p>\n<p>Example:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p><code>var</code> <code>arr= [``&quot;Kathmandu&quot;``,</code> <code>&quot;Pokhara&quot;``,</code> <code>&quot;Lumbini&quot;``,</code> <code>&quot;Gorkha&quot;``];</code></p>\n<p><code>arr.some(``function</code> <code>(value, index, _arr) &#123;</code></p>\n<p><code>console.log(index +</code> <code>&quot;: &quot;</code> <code>+ value);</code></p>\n<p><code>return</code> <code>value ===</code> <code>&quot;Pokhara&quot;``;</code></p>\n<p><code>&#125;);</code></p>\n<p>The result should look like</p>\n<p>1</p>\n<p>2</p>\n<p><code>0: Kathmandu</code></p>\n<p><code>1: Pokhara</code></p>\n<p>What happened here? Since the third iteration returned true, we successfully stopped the loop!</p>\n<hr>\n<h6 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every\"></a><strong>Array.prototype.every</strong></h6><p><strong>Array.prototype.every is almost identical to some except it’s expecting <em>false</em> to break the loop.</strong></p>\n<p>Example:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p><code>var</code> <code>arr = [``&quot;Kathmandu&quot;``,</code> <code>&quot;Pokhara&quot;``,</code> <code>&quot;Lumbini&quot;``,</code> <code>&quot;Gorkha&quot;``];</code></p>\n<p><code>arr.every(``function``(value, index, _arr) &#123;</code></p>\n<p><code>console.log(index +</code> <code>&quot;: &quot;</code> <code>+ value);</code></p>\n<p><code>return</code> <code>value.indexOf(``&quot;Lumbini&quot;``) &amp;lt; 0;</code></p>\n<p><code>&#125;);</code></p>\n<p>The result should look like</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p><code>0: Kathmandu</code></p>\n<p><code>1: Pokhara</code></p>\n<p><code>2: Lumbini</code></p>\n<p>What happened here? Since the third iteration returned false, we successfully stopped the loop!</p>\n<h5 id=\"Now-you-can-break-loops-whenever-you-want-Enjoy\"><a href=\"#Now-you-can-break-loops-whenever-you-want-Enjoy\" class=\"headerlink\" title=\"Now you can break loops whenever you want! Enjoy.\"></a>Now you can break loops whenever you want! Enjoy.</h5><p>Source：<a href=\"http://sajanmaharjan.com.np/2016/08/12/javascript-break-foreach/\">http://sajanmaharjan.com.np/2016/08/12/javascript-break-foreach/</a></p>\n","more":"<p>While working with Java Script, all of us must have surely run into the case where we need to loop through an array and break the running loop if a ce</p>\n<!-- more -->\n<p>rtain condition is met. There are many methods how we can loop through an array but we are always looking for the most efficient way to do that.</p>\n<p>Our favorite loop method: Array.prototype.forEach</p>\n<p>forEach is such an useful method.<br>But…how can I break the forEach loop?<br>Well… you can’t break forEach.</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p><code>var</code> <code>arr = [``&quot;Kathmandu&quot;``,</code> <code>&quot;Pokhara&quot;``,</code> <code>&quot;Lumbini&quot;``,</code> <code>&quot;Gorkha&quot;``];</code></p>\n<p><code>arr.forEach(``function``(value, index, _arr) &#123;</code></p>\n<p><code>console.log(index +</code> <code>&quot;: &quot;</code> <code>+ value);</code></p>\n<p><code>return</code> <code>false``;</code></p>\n<p><code>&#125;);</code></p>\n<p>The result should look like</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p><code>0: Kathmandu</code></p>\n<p><code>1: Pokhara</code></p>\n<p><code>2: Lumbini</code></p>\n<p><code>3: Gorkha</code></p>\n<p>It’s still iterating through all items in the array. What should I do if I want to stop the loop based on the condition? We either set a variable that changes only if the condition is met, but it will still mean that the loop will iterate until the array is exhausted to the last item.</p>\n<p>So, what do we do?? It’s simple.</p>\n<h4 id=\"Don’t-use-“forEach”-Use-“some”-or-“every”\"><a href=\"#Don’t-use-“forEach”-Use-“some”-or-“every”\" class=\"headerlink\" title=\"Don’t use “forEach”. Use “some” or “every”.\"></a>Don’t use “forEach”. Use “some” or “<strong>every</strong>”.</h4><hr>\n<h6 id=\"Array-prototype-some\"><a href=\"#Array-prototype-some\" class=\"headerlink\" title=\"Array.prototype.some\"></a>Array.prototype.some</h6><p>Array.prototype.some is pretty much the same as forEach but it break when the callback returns <em>true</em>.</p>\n<p>Example:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p><code>var</code> <code>arr= [``&quot;Kathmandu&quot;``,</code> <code>&quot;Pokhara&quot;``,</code> <code>&quot;Lumbini&quot;``,</code> <code>&quot;Gorkha&quot;``];</code></p>\n<p><code>arr.some(``function</code> <code>(value, index, _arr) &#123;</code></p>\n<p><code>console.log(index +</code> <code>&quot;: &quot;</code> <code>+ value);</code></p>\n<p><code>return</code> <code>value ===</code> <code>&quot;Pokhara&quot;``;</code></p>\n<p><code>&#125;);</code></p>\n<p>The result should look like</p>\n<p>1</p>\n<p>2</p>\n<p><code>0: Kathmandu</code></p>\n<p><code>1: Pokhara</code></p>\n<p>What happened here? Since the third iteration returned true, we successfully stopped the loop!</p>\n<hr>\n<h6 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every\"></a><strong>Array.prototype.every</strong></h6><p><strong>Array.prototype.every is almost identical to some except it’s expecting <em>false</em> to break the loop.</strong></p>\n<p>Example:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p><code>var</code> <code>arr = [``&quot;Kathmandu&quot;``,</code> <code>&quot;Pokhara&quot;``,</code> <code>&quot;Lumbini&quot;``,</code> <code>&quot;Gorkha&quot;``];</code></p>\n<p><code>arr.every(``function``(value, index, _arr) &#123;</code></p>\n<p><code>console.log(index +</code> <code>&quot;: &quot;</code> <code>+ value);</code></p>\n<p><code>return</code> <code>value.indexOf(``&quot;Lumbini&quot;``) &amp;lt; 0;</code></p>\n<p><code>&#125;);</code></p>\n<p>The result should look like</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p><code>0: Kathmandu</code></p>\n<p><code>1: Pokhara</code></p>\n<p><code>2: Lumbini</code></p>\n<p>What happened here? Since the third iteration returned false, we successfully stopped the loop!</p>\n<h5 id=\"Now-you-can-break-loops-whenever-you-want-Enjoy\"><a href=\"#Now-you-can-break-loops-whenever-you-want-Enjoy\" class=\"headerlink\" title=\"Now you can break loops whenever you want! Enjoy.\"></a>Now you can break loops whenever you want! Enjoy.</h5><p>Source：<a href=\"http://sajanmaharjan.com.np/2016/08/12/javascript-break-foreach/\">http://sajanmaharjan.com.np/2016/08/12/javascript-break-foreach/</a></p>\n","categories":[{"name":"Javascript","path":"api/categories/Javascript.json"}],"tags":[{"name":"Javascript","path":"api/tags/Javascript.json"},{"name":"JS","path":"api/tags/JS.json"}]}