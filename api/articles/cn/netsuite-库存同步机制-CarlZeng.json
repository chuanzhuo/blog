{"title":"netsuite 库存同步机制-CarlZeng","slug":"cn/netsuite-库存同步机制-CarlZeng","date":"2009-08-23T10:43:00.000Z","updated":"2023-10-08T13:38:52.659Z","comments":true,"path":"api/articles/cn/netsuite-库存同步机制-CarlZeng.json","excerpt":"应用调用：nlapiServerCall('/app/accounting/transactions/inventory/validateInventoryNumbers.nl', 'getValidationScript', [params], eval);实现过程：---------------------  * @param url URL of request handler * @par...","covers":null,"content":"<p>应用调用：nlapiServerCall(‘&#x2F;app&#x2F;accounting&#x2F;transactions&#x2F;inventory&#x2F;validateInventoryNumbers.nl’, ‘getValidationScript’, [params], eval);实现过程：——————— * @param url URL of request handler * @par…</p>\n<!-- more -->\n<p>应用调用：  </p>\n<p>nlapiServerCall(‘&#x2F;app&#x2F;accounting&#x2F;transactions&#x2F;inventory&#x2F;validateInventoryNumbers.nl’, ‘getValidationScript’, [params], eval);  </p>\n<p>实现过程：———————   <br>* @param url URL of request handler    <br>* @param methodName method name on remote object to call    <br>* @param methodParams an array of parameters to the method    <br>* @param asyncCallback a callback if this is to be an async request. Callback signature should be: callback(result, error)    <br>*&#x2F;    <br>function nlapiServerCall(url, methodName, methodParams, asyncCallback)    <br>{    <br>return nsServerCall(url, methodName, methodParams, asyncCallback);    <br>}    <br>    <br>function nlapiLocalCall(func, timeoutinmillis)    <br>{    <br>nsapiAssertTrue(timeoutinmillis !&#x3D; null &amp;&amp; !isNaN(parseInt(timeoutinmillis)), ‘SSS_INVALID_ARGUMENT’, ‘timeoutinmillis: ‘+timeoutinmillis)    <br>var obj &#x3D; new Object()    <br>obj.trigger &#x3D; nsapiQueryScript(“trigger”)    <br>obj.scriptid &#x3D; nsapiQueryScript(“scriptid”)    <br>if ( timeoutinmillis &#x3D;&#x3D; -1 )    <br>return nsapiCallScript(obj.trigger, obj.scriptid, func)    <br>return setTimeout( function() { nsapiCallScript(obj.trigger, obj.scriptid, func); }, timeoutinmillis );    <br>}    <br>-—————————————  </p>\n<p>&#x2F;**<br> * @param url URL of request handler<br> * @param methodName method name on remote object to call<br> * @param methodParams an array of parameters to the method<br> * @param asyncCallback a callback if this is to be an async request.  Callback signature should be: callback(result, error)<br> *&#x2F;<br>function nsServerCall(url, methodName, methodParams, asyncCallback)<br>{<br>    var client &#x3D; new NLJsonRpcClient(url);<br>    return client.sendRequest(methodName, methodParams, asyncCallback);<br>}  </p>\n<p>NLJsonRpcClient &#x3D; function (serverURL)<br>{<br>    if (serverURL.indexOf(“?”) &gt; 0)<br>        serverURL &#x3D; serverURL + “&amp;jrpc&#x3D;T”;<br>    else<br>        serverURL &#x3D; serverURL + “?jrpc&#x3D;T”;<br>    this.serverURL &#x3D; serverURL;<br>    this.responseCallbackMap &#x3D; {};<br>};<br>NLJsonRpcClient.requestId &#x3D; 0;<br>NLJsonRpcClient.prototype &#x3D;<br>{<br>    sendRequest : function (methodName, args, callback)<br>    {<br>        var jsonRpcReq &#x3D; {<br>            id : NLJsonRpcClient.requestId++,<br>            method : “remoteObject.” + methodName,<br>            params : args || []<br>        };<br>        if (callback !&#x3D; null)<br>            this.responseCallbackMap[jsonRpcReq.id] &#x3D; callback;<br>        var request &#x3D; new NLXMLHttpRequest();<br>        if (callback !&#x3D; null)<br>            request.setResponseHandler(this.handleResponseAsync.bindAsEventListener(this));<br>        var response &#x3D; request.requestURL(this.serverURL, toJSON(jsonRpcReq), null, callback !&#x3D; null ? true : false);<br>        if (callback &#x3D;&#x3D; null)<br>        {<br>            var jsonRpcResp &#x3D; this.getJsonRpcResponse(response);<br>            if (jsonRpcResp.error)<br>                throw new NLXMLResponseError(jsonRpcResp.error.code, jsonRpcResp.error.trace, jsonRpcResp.error.msg);<br>            response &#x3D; jsonRpcResp.result;<br>        }<br>        return response;<br>    },  </p>\n<pre><code>getJsonRpcResponse : function (nlXMLResponseObj)  \n&#123;  \n    var jsonRpcResp = nlXMLResponseObj.getBody();  \n    if (jsonRpcResp != null)  \n        jsonRpcResp = jsonRpcResp.replace(/^\\\\s\\*&lt;!--\\[\\\\s\\\\S\\]\\*?--&gt;\\\\s\\*$/gm, &#39;&#39;);  \n    eval(&quot;jsonRpcResp = &quot; + jsonRpcResp + &quot;;&quot;);  \n    return jsonRpcResp;  \n&#125;,  \n\nhandleResponseAsync : function (nlXMLResponseObj)  \n&#123;  \n    var jsonRpcResp = this.getJsonRpcResponse(nlXMLResponseObj);  \n    var callback = this.responseCallbackMap\\[jsonRpcResp.id\\];  \n    this.responseCallbackMap\\[jsonRpcResp.id\\] = null;  \n    callback(jsonRpcResp.result, jsonRpcResp.error);  \n&#125;  \n</code></pre>\n<p>}  </p>\n<p>function toJSON(o)<br>{<br>    if (o &#x3D;&#x3D; null)<br>        return “null”;<br>    else if(o.constructor &#x3D;&#x3D; String || o.constructor.name &#x3D;&#x3D; “String”)<br>        return escapeJSONString(o);<br>    else if(o.constructor &#x3D;&#x3D; Number || o.constructor.name &#x3D;&#x3D; “Number”)<br>        return o.toString();<br>    else if(o.constructor &#x3D;&#x3D; Boolean || o.constructor.name &#x3D;&#x3D; “Boolean”)<br>        return o.toString();<br>    else if(o.constructor &#x3D;&#x3D; Date || o.constructor.name &#x3D;&#x3D; “Date”)<br>        return ‘{javaClass: “java.util.Date”, time: ‘ + o.valueOf() +’}’;<br>    else if((o.constructor &#x3D;&#x3D; Array || o.constructor.name &#x3D;&#x3D; “Array”))<br>    {<br>        var v &#x3D; [];<br>        for (var i &#x3D; 0; i &lt; o.length; i++) v.push(toJSON(o[i]));<br>        return “[“ + v.join(“, “) + “]“;<br>    }<br>    else<br>    {<br>        var v &#x3D; [];<br>        for(attr in o)<br>        {<br>            if(o[attr] &#x3D;&#x3D; null) v.push(“\\“” + attr + “\\“: null”);<br>            else if(typeof o[attr] &#x3D;&#x3D; “function”); &#x2F;* skip *&#x2F;<br>            else v.push(escapeJSONString(attr) + “: “ + toJSON(o[attr]));<br>        }<br>        return “{“ + v.join(“, “) + “}”;<br>    }<br>}</p>\n","more":"<p>应用调用：nlapiServerCall(‘&#x2F;app&#x2F;accounting&#x2F;transactions&#x2F;inventory&#x2F;validateInventoryNumbers.nl’, ‘getValidationScript’, [params], eval);实现过程：——————— * @param url URL of request handler * @par…</p>\n<!-- more -->\n<p>应用调用：  </p>\n<p>nlapiServerCall(‘&#x2F;app&#x2F;accounting&#x2F;transactions&#x2F;inventory&#x2F;validateInventoryNumbers.nl’, ‘getValidationScript’, [params], eval);  </p>\n<p>实现过程：———————   <br>* @param url URL of request handler    <br>* @param methodName method name on remote object to call    <br>* @param methodParams an array of parameters to the method    <br>* @param asyncCallback a callback if this is to be an async request. Callback signature should be: callback(result, error)    <br>*&#x2F;    <br>function nlapiServerCall(url, methodName, methodParams, asyncCallback)    <br>{    <br>return nsServerCall(url, methodName, methodParams, asyncCallback);    <br>}    <br>    <br>function nlapiLocalCall(func, timeoutinmillis)    <br>{    <br>nsapiAssertTrue(timeoutinmillis !&#x3D; null &amp;&amp; !isNaN(parseInt(timeoutinmillis)), ‘SSS_INVALID_ARGUMENT’, ‘timeoutinmillis: ‘+timeoutinmillis)    <br>var obj &#x3D; new Object()    <br>obj.trigger &#x3D; nsapiQueryScript(“trigger”)    <br>obj.scriptid &#x3D; nsapiQueryScript(“scriptid”)    <br>if ( timeoutinmillis &#x3D;&#x3D; -1 )    <br>return nsapiCallScript(obj.trigger, obj.scriptid, func)    <br>return setTimeout( function() { nsapiCallScript(obj.trigger, obj.scriptid, func); }, timeoutinmillis );    <br>}    <br>-—————————————  </p>\n<p>&#x2F;**<br> * @param url URL of request handler<br> * @param methodName method name on remote object to call<br> * @param methodParams an array of parameters to the method<br> * @param asyncCallback a callback if this is to be an async request.  Callback signature should be: callback(result, error)<br> *&#x2F;<br>function nsServerCall(url, methodName, methodParams, asyncCallback)<br>{<br>    var client &#x3D; new NLJsonRpcClient(url);<br>    return client.sendRequest(methodName, methodParams, asyncCallback);<br>}  </p>\n<p>NLJsonRpcClient &#x3D; function (serverURL)<br>{<br>    if (serverURL.indexOf(“?”) &gt; 0)<br>        serverURL &#x3D; serverURL + “&amp;jrpc&#x3D;T”;<br>    else<br>        serverURL &#x3D; serverURL + “?jrpc&#x3D;T”;<br>    this.serverURL &#x3D; serverURL;<br>    this.responseCallbackMap &#x3D; {};<br>};<br>NLJsonRpcClient.requestId &#x3D; 0;<br>NLJsonRpcClient.prototype &#x3D;<br>{<br>    sendRequest : function (methodName, args, callback)<br>    {<br>        var jsonRpcReq &#x3D; {<br>            id : NLJsonRpcClient.requestId++,<br>            method : “remoteObject.” + methodName,<br>            params : args || []<br>        };<br>        if (callback !&#x3D; null)<br>            this.responseCallbackMap[jsonRpcReq.id] &#x3D; callback;<br>        var request &#x3D; new NLXMLHttpRequest();<br>        if (callback !&#x3D; null)<br>            request.setResponseHandler(this.handleResponseAsync.bindAsEventListener(this));<br>        var response &#x3D; request.requestURL(this.serverURL, toJSON(jsonRpcReq), null, callback !&#x3D; null ? true : false);<br>        if (callback &#x3D;&#x3D; null)<br>        {<br>            var jsonRpcResp &#x3D; this.getJsonRpcResponse(response);<br>            if (jsonRpcResp.error)<br>                throw new NLXMLResponseError(jsonRpcResp.error.code, jsonRpcResp.error.trace, jsonRpcResp.error.msg);<br>            response &#x3D; jsonRpcResp.result;<br>        }<br>        return response;<br>    },  </p>\n<pre><code>getJsonRpcResponse : function (nlXMLResponseObj)  \n&#123;  \n    var jsonRpcResp = nlXMLResponseObj.getBody();  \n    if (jsonRpcResp != null)  \n        jsonRpcResp = jsonRpcResp.replace(/^\\\\s\\*&lt;!--\\[\\\\s\\\\S\\]\\*?--&gt;\\\\s\\*$/gm, &#39;&#39;);  \n    eval(&quot;jsonRpcResp = &quot; + jsonRpcResp + &quot;;&quot;);  \n    return jsonRpcResp;  \n&#125;,  \n\nhandleResponseAsync : function (nlXMLResponseObj)  \n&#123;  \n    var jsonRpcResp = this.getJsonRpcResponse(nlXMLResponseObj);  \n    var callback = this.responseCallbackMap\\[jsonRpcResp.id\\];  \n    this.responseCallbackMap\\[jsonRpcResp.id\\] = null;  \n    callback(jsonRpcResp.result, jsonRpcResp.error);  \n&#125;  \n</code></pre>\n<p>}  </p>\n<p>function toJSON(o)<br>{<br>    if (o &#x3D;&#x3D; null)<br>        return “null”;<br>    else if(o.constructor &#x3D;&#x3D; String || o.constructor.name &#x3D;&#x3D; “String”)<br>        return escapeJSONString(o);<br>    else if(o.constructor &#x3D;&#x3D; Number || o.constructor.name &#x3D;&#x3D; “Number”)<br>        return o.toString();<br>    else if(o.constructor &#x3D;&#x3D; Boolean || o.constructor.name &#x3D;&#x3D; “Boolean”)<br>        return o.toString();<br>    else if(o.constructor &#x3D;&#x3D; Date || o.constructor.name &#x3D;&#x3D; “Date”)<br>        return ‘{javaClass: “java.util.Date”, time: ‘ + o.valueOf() +’}’;<br>    else if((o.constructor &#x3D;&#x3D; Array || o.constructor.name &#x3D;&#x3D; “Array”))<br>    {<br>        var v &#x3D; [];<br>        for (var i &#x3D; 0; i &lt; o.length; i++) v.push(toJSON(o[i]));<br>        return “[“ + v.join(“, “) + “]“;<br>    }<br>    else<br>    {<br>        var v &#x3D; [];<br>        for(attr in o)<br>        {<br>            if(o[attr] &#x3D;&#x3D; null) v.push(“\\“” + attr + “\\“: null”);<br>            else if(typeof o[attr] &#x3D;&#x3D; “function”); &#x2F;* skip *&#x2F;<br>            else v.push(escapeJSONString(attr) + “: “ + toJSON(o[attr]));<br>        }<br>        return “{“ + v.join(“, “) + “}”;<br>    }<br>}</p>\n","categories":[{"name":"NetSuite","path":"api/categories/NetSuite.json"}],"tags":[{"name":"NetSuite","path":"api/tags/NetSuite.json"}]}