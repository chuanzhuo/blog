{"title":"Node.js Application Node.js应用-CarlZeng","slug":"cn/Node-js-Application-Node-js应用-CarlZeng","date":"2017-05-04T02:56:00.000Z","updated":"2023-10-08T03:05:08.178Z","comments":true,"path":"api/articles/cn/Node-js-Application-Node-js应用-CarlZeng.json","excerpt":"Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight","covers":["https://camo.githubusercontent.com/9c24355bb3afbff914503b663ade7beb341079fa/68747470733a2f2f6e6f64656a732e6f72672f7374617469632f696d616765732f6c6f676f2d6c696768742e737667"],"content":"<p>Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I&#x2F;O model that makes it lightweight</p>\n<!-- more -->\n<p><img data-src=\"https://camo.githubusercontent.com/9c24355bb3afbff914503b663ade7beb341079fa/68747470733a2f2f6e6f64656a732e6f72672f7374617469632f696d616765732f6c6f676f2d6c696768742e737667\" alt=\"node.js\"></p>\n<p>and efficient. The Node.js package ecosystem, npm, is the largest ecosystem of open source libraries in the world.</p>\n<h1 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h1><p>Instructions for running Node program on Windows server</p>\n<ol>\n<li><p>Download node <a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a></p>\n</li>\n<li><p>Create code, I.e.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#x27;hello world&#x27;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Go to folder via command line</p>\n</li>\n</ol>\n<p> node start.js</p>\n<p>var requirejs &#x3D; require(“requirejs”); var argv &#x3D; require(“minimist”)(process.argv.slice(2));</p>\n<p>requirejs.config({nodeRequire: require });</p>\n<p>requirejs([“fs”, “mkdirp”, “path”, “colors”,”.&#x2F;Constants”], function (fs, mkdirp, path, colors, constants){ “use strict”; function printHelp() {</p>\n<p>console.log(“User Commands: \\n\\n”.gray);</p>\n<p>} if (argv.help || argv.h || Object.keys(argv).length&#x3D;&#x3D;&#x3D;1) {</p>\n<p>printHelp(); return; } if (argv.email || argv.e) {</p>\n<p>constants.email = (argv.email) ? (argv.email) : (argv.e);</p>\n<p>} else {</p>\n<p>console.log (“email argument is required.”); return;</p>\n<p>} var sm &#x3D; new Soap();</p>\n<p>});</p>\n<p>Login and SSOLogin are very similar XML. The function below returns the cookie header array. &#x2F;&#x2F; login to the NS web service using the ssoLogin token &#x2F;&#x2F; return the Set-Cookie header for subsequent requests because it contains the JSESSIONID<br>function sso_login(ws_url, ws_token)<br>{ var account &#x3D; nlapiGetContext().getCompany(); var ret_val &#x3D; null; var headers &#x3D; {};<br>    headers[‘Content-Type’]&#x3D; ‘application&#x2F;soap+xml’;<br>    headers[‘SOAPAction’] &#x3D; ‘ssoLogin’; var sso_login_xml &#x3D; ‘&lt;soap:Envelope xmlns:xsd&#x3D;”<a href=\"http://www.w3.org/2001/XMLSchema\">http://www.w3.org/2001/XMLSchema</a>“ xmlns:soap&#x3D;”<a href=\"http://schemas.xmlsoap.org/soap/envelope/\">http://schemas.xmlsoap.org/soap/envelope/</a>“ xmlns:xsi&#x3D;”<a href=\"http://www.w3.org/2001/XMLSchema-instance%22%3E\">http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</a>‘ +<br>    ‘<a href=\"soap:Body\">soap:Body</a>‘ +<br>    ‘<ssoLogin xmlns=\"urn:messages\\_2013\\_1.platform.webservices.netsuite.com\">‘ +<br>    ‘<ssoPassport>‘+<br>        ‘<authenticationToken xmlns=\"urn:core\\_2013\\_1.platform.webservices.netsuite.com\">‘ + ws_token + ‘</authenticationToken>‘+<br>        ‘<partnerId xmlns=\"urn:core\\_2013\\_1.platform.webservices.netsuite.com\">‘+CONST_PARTNERID+’</partnerId>‘+<br>        ‘<partnerAccount xmlns=\"urn:core\\_2013\\_1.platform.webservices.netsuite.com\">‘+account+’</partnerAccount>‘+<br>    ‘</ssoPassport>‘+<br>    ‘</ssoLogin>‘+<br>    ‘</soap:Body>‘+<br>    ‘</soap:Envelope>‘; var login_response &#x3D; nlapiRequestURL(ws_url_ver(ws_url,’NetSuitePort_2013_1’), sso_login_xml, headers); if(login_response){<br>        ret_val = login_response.getHeaders(‘Set-Cookie’);<br>        nlapiLogExecution(‘DEBUG’, ‘cookies returned’, join_cookies(ret_val)); if(g_Devmode){ var hdrs &#x3D; login_response.getAllHeaders(); for (var i&#x3D;0; i&lt;hdrs.length; i++){<br>                nlapiLogExecution(‘DEBUG’, hdrs[i] , login_response.getHeader(hdrs[i]));<br>            }<br>        }<br>    } return ret_val;<br>} &#x2F;&#x2F; Call API – pass in the cookie array set_cookie<br>function call_ws(xml, soap_action, sUrl, set_cookie){ &#x2F;&#x2F;Setting up Headers<br>  var headers &#x3D; new Array();<br>  headers[‘User-Agent-x’] &#x3D; ‘SuiteScript-Call’;<br>  headers[‘Content-Type’]&#x3D; ‘application&#x2F;soap+xml’;<br>  headers[‘SOAPAction’] &#x3D; soap_action; if (set_cookie){<br>      headers[‘Cookie’] &#x3D; join_cookies(set_cookie);<br>  } var      resp &#x3D; nlapiRequestURL( url, xml , headers ); return resp.getBody();<br>} &#x2F;&#x2F; assemble array for header to send back with next request<br>function join_cookies(cookie){ var joined &#x3D; cookie[0]; for(var _i &#x3D; 1;_i &lt; cookie.length;_i++){<br>        joined +&#x3D; “, “ + cookie[_i];<br>    } return joined;<br>}</p>\n<p>Instructions for running node program for on a Windows server<br>1. Download node <a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a><br>2. Create code <custom nodejs code><br>3. Go to folder via command line<br>4. npm install<br>5. node start.js –email&#x3D;<emailAddress> </p>\n<p>Note:</p>\n<p>After Install node-v6.10.0.pkg, you will see:</p>\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px 'Lucida Grande'} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px 'Lucida Grande'; min-height: 16.0px} -->\n\n<p>Node.js was installed at &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</p>\n<p>npm was installed at &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm</p>\n<p>Make sure that &#x2F;usr&#x2F;local&#x2F;bin is in your $PATH.</p>\n","more":"<p>Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I&#x2F;O model that makes it lightweight</p>\n<!-- more -->\n<p><img data-src=\"https://camo.githubusercontent.com/9c24355bb3afbff914503b663ade7beb341079fa/68747470733a2f2f6e6f64656a732e6f72672f7374617469632f696d616765732f6c6f676f2d6c696768742e737667\" alt=\"node.js\"></p>\n<p>and efficient. The Node.js package ecosystem, npm, is the largest ecosystem of open source libraries in the world.</p>\n<h1 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h1><p>Instructions for running Node program on Windows server</p>\n<ol>\n<li><p>Download node <a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a></p>\n</li>\n<li><p>Create code, I.e.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#x27;hello world&#x27;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Go to folder via command line</p>\n</li>\n</ol>\n<p> node start.js</p>\n<p>var requirejs &#x3D; require(“requirejs”); var argv &#x3D; require(“minimist”)(process.argv.slice(2));</p>\n<p>requirejs.config({nodeRequire: require });</p>\n<p>requirejs([“fs”, “mkdirp”, “path”, “colors”,”.&#x2F;Constants”], function (fs, mkdirp, path, colors, constants){ “use strict”; function printHelp() {</p>\n<p>console.log(“User Commands: \\n\\n”.gray);</p>\n<p>} if (argv.help || argv.h || Object.keys(argv).length&#x3D;&#x3D;&#x3D;1) {</p>\n<p>printHelp(); return; } if (argv.email || argv.e) {</p>\n<p>constants.email = (argv.email) ? (argv.email) : (argv.e);</p>\n<p>} else {</p>\n<p>console.log (“email argument is required.”); return;</p>\n<p>} var sm &#x3D; new Soap();</p>\n<p>});</p>\n<p>Login and SSOLogin are very similar XML. The function below returns the cookie header array. &#x2F;&#x2F; login to the NS web service using the ssoLogin token &#x2F;&#x2F; return the Set-Cookie header for subsequent requests because it contains the JSESSIONID<br>function sso_login(ws_url, ws_token)<br>{ var account &#x3D; nlapiGetContext().getCompany(); var ret_val &#x3D; null; var headers &#x3D; {};<br>    headers[‘Content-Type’]&#x3D; ‘application&#x2F;soap+xml’;<br>    headers[‘SOAPAction’] &#x3D; ‘ssoLogin’; var sso_login_xml &#x3D; ‘&lt;soap:Envelope xmlns:xsd&#x3D;”<a href=\"http://www.w3.org/2001/XMLSchema\">http://www.w3.org/2001/XMLSchema</a>“ xmlns:soap&#x3D;”<a href=\"http://schemas.xmlsoap.org/soap/envelope/\">http://schemas.xmlsoap.org/soap/envelope/</a>“ xmlns:xsi&#x3D;”<a href=\"http://www.w3.org/2001/XMLSchema-instance%22%3E\">http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</a>‘ +<br>    ‘<a href=\"soap:Body\">soap:Body</a>‘ +<br>    ‘<ssoLogin xmlns=\"urn:messages\\_2013\\_1.platform.webservices.netsuite.com\">‘ +<br>    ‘<ssoPassport>‘+<br>        ‘<authenticationToken xmlns=\"urn:core\\_2013\\_1.platform.webservices.netsuite.com\">‘ + ws_token + ‘</authenticationToken>‘+<br>        ‘<partnerId xmlns=\"urn:core\\_2013\\_1.platform.webservices.netsuite.com\">‘+CONST_PARTNERID+’</partnerId>‘+<br>        ‘<partnerAccount xmlns=\"urn:core\\_2013\\_1.platform.webservices.netsuite.com\">‘+account+’</partnerAccount>‘+<br>    ‘</ssoPassport>‘+<br>    ‘</ssoLogin>‘+<br>    ‘</soap:Body>‘+<br>    ‘</soap:Envelope>‘; var login_response &#x3D; nlapiRequestURL(ws_url_ver(ws_url,’NetSuitePort_2013_1’), sso_login_xml, headers); if(login_response){<br>        ret_val = login_response.getHeaders(‘Set-Cookie’);<br>        nlapiLogExecution(‘DEBUG’, ‘cookies returned’, join_cookies(ret_val)); if(g_Devmode){ var hdrs &#x3D; login_response.getAllHeaders(); for (var i&#x3D;0; i&lt;hdrs.length; i++){<br>                nlapiLogExecution(‘DEBUG’, hdrs[i] , login_response.getHeader(hdrs[i]));<br>            }<br>        }<br>    } return ret_val;<br>} &#x2F;&#x2F; Call API – pass in the cookie array set_cookie<br>function call_ws(xml, soap_action, sUrl, set_cookie){ &#x2F;&#x2F;Setting up Headers<br>  var headers &#x3D; new Array();<br>  headers[‘User-Agent-x’] &#x3D; ‘SuiteScript-Call’;<br>  headers[‘Content-Type’]&#x3D; ‘application&#x2F;soap+xml’;<br>  headers[‘SOAPAction’] &#x3D; soap_action; if (set_cookie){<br>      headers[‘Cookie’] &#x3D; join_cookies(set_cookie);<br>  } var      resp &#x3D; nlapiRequestURL( url, xml , headers ); return resp.getBody();<br>} &#x2F;&#x2F; assemble array for header to send back with next request<br>function join_cookies(cookie){ var joined &#x3D; cookie[0]; for(var _i &#x3D; 1;_i &lt; cookie.length;_i++){<br>        joined +&#x3D; “, “ + cookie[_i];<br>    } return joined;<br>}</p>\n<p>Instructions for running node program for on a Windows server<br>1. Download node <a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a><br>2. Create code <custom nodejs code><br>3. Go to folder via command line<br>4. npm install<br>5. node start.js –email&#x3D;<emailAddress> </p>\n<p>Note:</p>\n<p>After Install node-v6.10.0.pkg, you will see:</p>\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px 'Lucida Grande'} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px 'Lucida Grande'; min-height: 16.0px} -->\n\n<p>Node.js was installed at &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</p>\n<p>npm was installed at &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm</p>\n<p>Make sure that &#x2F;usr&#x2F;local&#x2F;bin is in your $PATH.</p>\n","categories":[{"name":"Node.js","path":"api/categories/Node.js.json"}],"tags":[{"name":"Node.js","path":"api/tags/Node.js.json"}]}