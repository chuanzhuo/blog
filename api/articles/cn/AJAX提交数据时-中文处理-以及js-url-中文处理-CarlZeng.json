{"title":"AJAX提交数据时 中文处理 以及js url 中文处理-CarlZeng","slug":"cn/AJAX提交数据时-中文处理-以及js-url-中文处理-CarlZeng","date":"2008-12-24T07:51:00.000Z","updated":"2023-10-08T14:21:10.120Z","comments":true,"path":"api/articles/cn/AJAX提交数据时-中文处理-以及js-url-中文处理-CarlZeng.json","excerpt":"最近，了解到一些朋友又深陷其中，便把自己以前的解决方法拿出来晒晒，希望对误入该行业的朋友有些帮助。 原理：html不能设置编码，但是xml可以，我们采用xml，把数据携带过去，不就可以了嘛。 js核心代码：//注：xmlDoc,xmlHtml对象创建请用更完善的方式，这里只是简单演示一下function doSubmit(){　var str=document.getElementById(\"...","covers":["mk:@MSITStore:E:/javascript/script56.chm::/local/note.gif"],"content":"<p>最近，了解到一些朋友又深陷其中，便把自己以前的解决方法拿出来晒晒，希望对误入该行业的朋友有些帮助。 原理：html不能设置编码，但是xml可以，我们采用xml，把数据携带过去，不就可以了嘛。 js核心代码：&#x2F;&#x2F;注：xmlDoc,xmlHtml对象创建请用更完善的方式，这里只是简单演示一下function doSubmit(){　var str&#x3D;document.getElementById(“…</p>\n<!-- more -->\n<p>最近，了解到一些朋友又深陷其中，便把自己以前的解决方法拿出来晒晒，希望对误入该行业的朋友有些帮助。</p>\n<p>　　原理：html不能设置编码，但是xml可以，我们采用xml，把数据携带过去，不就可以了嘛。</p>\n<p>　　js核心代码：</p>\n<p><code>//注：xmlDoc,xmlHtml对象创建请用更完善的方式，这里只是简单演示一下   function doSubmit()&#123;   　var str=document.getElementById(&quot;input1&quot;).value;   　//假设str就是你要提交的数据   　alert(str);   　   　//&quot;MSXML2.DOMDocument&quot;, &quot;Microsoft.XMLDOM&quot;, &quot;MSXML.DOMDocument&quot;, &quot;MSXML3.DOMDocument&quot;   　var xmlDoc=new ActiveXObject(&quot;MSXML2.DOMDocument&quot;);   　   　//初始化xml文档对象   　xmlDoc.loadXML(&quot;&lt;html&gt;&lt;/html&gt;&quot;);   　xmlDoc.documentElement.text=str;//作为内容去携带   　//如果采用属性携带数据更方便，那么可以用下面的方法   　//xmlDoc.documentElement.setAttribute(&quot;name&quot;,&quot;msg&quot;);   　//xmlDoc.documentElement.setAttribute(&quot;value&quot;,str);   　　   　alert(xmlDoc.xml);//查看生成的xml内容   　   　//&quot;MSXML2.XMLHttp.5.0&quot;,&quot;MSXML2.XMLHttp.4.0&quot;,&quot;MSXML2.XMLHttp.3.0&quot;,&quot;MSXML2.XMLHttp&quot;,&quot;Microsoft.XMLHttp&quot;;   　var xmlHttp=new ActiveXObject(&quot;MSXML2.XMLHttp.5.0&quot;);   　var url=&quot;servlet/MyServlet?time=&quot;+(new Date()).getTime();   　xmlHttp.open(&quot;POST&quot;,url,false);   　xmlHttp.send(xmlDoc);//把xml对象发送出去   　alert(xmlHttp.responseText);   &#125;</code></p>\n<p>　　servlet&#x2F;action核心代码：</p>\n<p><code>// 读取ajax发送来的xml数据   　SAXReader xmlReader = new SAXReader();   　Document document = null;   　try &#123;   　document = xmlReader.read(request.getInputStream());   　&#125; catch (Exception ex) &#123;   　System.err.println(&quot;xml读取失败，可能没有xml数据.&quot;);   　ex.printStackTrace();   　&#125;   　System.out.println(&quot;接收到xml数据：&quot; + document.asXML());   　　   　// 解析xml   　String str = document.getRootElement().getText();   　System.out.println(&quot;解析出来的数据：&quot; + str);   　　   　// 返回结果   　response.setContentType(&quot;text/html; charset=UTF-8&quot;);// GBK也行，指明返回的编码   　response.getWriter().print(&quot;服务器返回信息：成功啦!no(∩_∩)o...哈哈!&quot;);// 返回中文也没问题啦</code></p>\n<p>-————————–</p>\n<p>在使用url进行参数传递时，经常会传递一些中文名的参数或URL地址，在后台处理时会发生转换错误。在有些传递页面使用GB2312，而在接收页面使用UTF8，这样接收到的参数就可能会与原来发生不一致。使用服务器端的urlEncode函数编码的URL，与使用客户端javascript的 encodeURI函数编码的URL，结果就不一样。</p>\n<p><strong>javaScript中的编码方法：</strong></p>\n<p>escape() 方法：<br>采用ISO Latin字符集对指定的字符串进行编码。所有的空格符、标点符号、特殊字符以及其他非ASCII字符都将被转化成%xx格式的字符编码（xx等于该字符在字符集表里面的编码的16进制数字）。比如，空格符对应的编码是%20。unescape方法与此相反。不会被此方法编码的字符： @ * &#x2F; +  </p>\n<p>英文解释：MSDN JScript Reference: The escape method returns a string value (in Unicode format) that contains the contents of [the argument]. All spaces, punctuation, accented characters, and any other non- ASCII characters are replaced with %xx encoding, where xx is equivalent to the hexadecimal number representing the character. For example, a space is returned as “%20.”<br>Edge Core Javascript Guide: The escape and unescape functions let you encode and decode strings. The escape function returns the hexadecimal encoding of an argument in the ISO Latin character set. The unescape function returns the ASCII string for the specified hexadecimal encoding value.  </p>\n<p>encodeURI() 方法：把URI字符串采用UTF-8编码格式转化成escape格式的字符串。不会被此方法编码的字符：! @ # $&amp; * ( ) &#x3D; : &#x2F; ; ? + ‘  </p>\n<p>英文解释：MSDN JScript Reference: The encodeURI method returns an encoded URI. If you pass the result to decodeURI, the original string is returned. The encodeURI method does not encode the following characters: “:”, “&#x2F;“, “;”, and “?”. Use encodeURIComponent to encode these characters. Edge Core Javascript Guide: Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, or three escape sequences representing the UTF- 8 encoding of the character  </p>\n<p>encodeURIComponent() 方法：把URI字符串采用 UTF-8编码格式转化成escape格式的字符串。与encodeURI()相比，这个方法将对更多的字符进行编码，比如 &#x2F; 等字符。所以如果字符串里面包含了URI的几个部分的话，不能用这个方法来进行编码，否则 &#x2F; 字符被编码之后URL将显示错误。不会被此方法编码的字符：! * ( )  </p>\n<p>英文解释：MSDN JScript Reference: The encodeURIComponent method returns an encoded URI. If you pass the result to decodeURIComponent, the original string is returned. Because the encodeURIComponent method encodes all characters, be careful if the string represents a path such as &#x2F;folder1 &#x2F;folder2 &#x2F;default.html. The slash characters will be encoded and will not be valid if sent as a request to a web server. Use the encodeURI method if the string contains more than a single URI component. Mozilla Developer Core Javascript Guide： Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, or three escape sequences representing the UTF- 8 encoding of the character.  </p>\n<p>因此，对于中文字符串来说，如果不希望把字符串编码格式转化成UTF-8格式的（比如原页面和目标页面的charset是一致的时候），只需要使用escape。如果你的页面是GB2312或者其他的编码，而接受参数的页面是UTF-8编码的，就要采用 encodeURI或者encodeURIComponent。</p>\n<p>另外，encodeURI&#x2F;encodeURIComponent是在javascript1.5之后引进的，escape则在javascript1.0版本就有。  </p>\n<p>英文注释：The escape() method does not encode the + character which is interpreted as a space on the server side as well as generated by forms with spaces in their fields. Due to this shortcoming, you should avoid use of escape() whenever possible. The best alternative is usually encodeURIComponent().Use of the encodeURI() method is a bit more specialized than escape() in that it encodes for URIs [REF] as opposed to the querystring, which is part of a URL. Use this method when you need to encode a string to be used for any resource that uses URIs and needs certain characters to remain un- encoded. Note that this method does not encode the ‘ character, as it is a valid character within URIs.Lastly, the encodeURIComponent() method should be used in most cases when encoding a single component of a URI. This method will encode certain chars that would normally be recognized as special chars for URIs so that many components may be included. Note that this method does not encode the ‘ character, as it is a valid character within URIs.  </p>\n<p>1.编码处理函数</p>\n<p>1） encodeURI 返回一个对URI字符串编码后的结果。URL是最常见的一种URI；</p>\n<p>2） decodeURI 将一个已编码的URI字符串解码成最原始的字符串返回；</p>\n<p>3） 举例： &lt; Script language &#x3D; “ javascript “ &gt; 输出结果如下： encodeStr: <a href=\"http://www.amigoxie.com/index.jsp?name=%E9%98%BF%E8%9C%9C%E6%9E%9C\">http://www.amigoxie.com/index.jsp?name=%E9%98%BF%E8%9C%9C%E6%9E%9C</a> decodeStr: <a href=\"http://www.cnblog.com/backuper?name=zeng.cz\">http://www.cnblog.com/backuper?name=zeng.cz</a></p>\n<p>2. 数值处理函数</p>\n<p>1） parseInt 将一个字符串指定的进制转换为一个整数，语法格式为： parseInt(numString, [radix]) 第一个参数是要进行转换的字符串，是介于2到36之间的数值，用于指定进行字符串转换时所用的进制。 举例如下： 输出结果如下：默认情况下的结果：32:32;032:26;0x32:50 转为2进制的结果：32:NaN;032:0;0x32:0 转为8进制的结果：32:26;032:26;0x32:0 转为16进制的结果：32:50;032:50;0x32:50 11001010转换后的结果： 2进制:202;16进制:285216784 8进制:2359816;10进制:11001010 43abc转换后:43;abc43转换后:NaN;abc转换后:NaN</p>\n<p>2） parseFloat方法 该方法将一个字符串转换成对应的小数。 eg. 输出结果如下： 4.11 5.1 3） isNaN方法 该方法用于检测前两个方法返回值是否为非数值型，如果是，返回true，否则，反回false</p>\n<p><code>--------------------</code></p>\n<p><code>**其实url 中文处理可以使用两个编码的函数**</code></p>\n<p><code>**escape 和 unescape 说明如下：**</code></p>\n<p><code>Encodes **String** objects so they can be read on all computers.</code></p>\n<p><strong>escape(</strong><br>                      charString<br>                      <strong>)</strong> </p>\n<p><code>The required charString argument is any **String** object or literal to be encoded.</code></p>\n<p>The <strong>escape</strong> method returns a string value (in Unicode format) that contains the contents of <em>charstring</em>. All spaces, punctuation, accented characters, and any other non-ASCII characters are replaced with <strong>%</strong> <em>xx</em> encoding, where <em>xx</em> is equivalent to the hexadecimal number representing the character. For example, a space is returned as “%20.”</p>\n<p>Characters with a value greater than 255 are stored using the <strong>%u</strong> <em>xxxx</em> format.</p>\n<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<p>Decodes <strong>String</strong> objects encoded with the <strong>escape</strong> method.</p>\n<p><strong>unescape</strong>(charString) </p>\n<p><code>The required charString argument is a **String** object or literal to be decoded.</code></p>\n<p>The <strong>unescape</strong> method returns a string value that contains the contents of <em>charstring</em>. All characters encoded with the %<em>xx</em> hexadecimal form are replaced by their ASCII character set equivalents.</p>\n<p>Characters encoded in <strong>%u</strong> <em>xxxx</em> format (Unicode characters) are replaced with the Unicode character with hexadecimal encoding <em>xxxx</em>.</p>\n<p><img data-src=\"mk:@MSITStore:E:/javascript/script56.chm::/local/note.gif\" alt=\"Note\">Note</p>\n<p>The <strong>unescape</strong> method should not be used to decode Uniform Resource Identifiers (URI). Use <strong>decodeURI</strong> and <strong>decodeURIComponent</strong> methods instead.</p>\n","more":"<p>最近，了解到一些朋友又深陷其中，便把自己以前的解决方法拿出来晒晒，希望对误入该行业的朋友有些帮助。 原理：html不能设置编码，但是xml可以，我们采用xml，把数据携带过去，不就可以了嘛。 js核心代码：&#x2F;&#x2F;注：xmlDoc,xmlHtml对象创建请用更完善的方式，这里只是简单演示一下function doSubmit(){　var str&#x3D;document.getElementById(“…</p>\n<!-- more -->\n<p>最近，了解到一些朋友又深陷其中，便把自己以前的解决方法拿出来晒晒，希望对误入该行业的朋友有些帮助。</p>\n<p>　　原理：html不能设置编码，但是xml可以，我们采用xml，把数据携带过去，不就可以了嘛。</p>\n<p>　　js核心代码：</p>\n<p><code>//注：xmlDoc,xmlHtml对象创建请用更完善的方式，这里只是简单演示一下   function doSubmit()&#123;   　var str=document.getElementById(&quot;input1&quot;).value;   　//假设str就是你要提交的数据   　alert(str);   　   　//&quot;MSXML2.DOMDocument&quot;, &quot;Microsoft.XMLDOM&quot;, &quot;MSXML.DOMDocument&quot;, &quot;MSXML3.DOMDocument&quot;   　var xmlDoc=new ActiveXObject(&quot;MSXML2.DOMDocument&quot;);   　   　//初始化xml文档对象   　xmlDoc.loadXML(&quot;&lt;html&gt;&lt;/html&gt;&quot;);   　xmlDoc.documentElement.text=str;//作为内容去携带   　//如果采用属性携带数据更方便，那么可以用下面的方法   　//xmlDoc.documentElement.setAttribute(&quot;name&quot;,&quot;msg&quot;);   　//xmlDoc.documentElement.setAttribute(&quot;value&quot;,str);   　　   　alert(xmlDoc.xml);//查看生成的xml内容   　   　//&quot;MSXML2.XMLHttp.5.0&quot;,&quot;MSXML2.XMLHttp.4.0&quot;,&quot;MSXML2.XMLHttp.3.0&quot;,&quot;MSXML2.XMLHttp&quot;,&quot;Microsoft.XMLHttp&quot;;   　var xmlHttp=new ActiveXObject(&quot;MSXML2.XMLHttp.5.0&quot;);   　var url=&quot;servlet/MyServlet?time=&quot;+(new Date()).getTime();   　xmlHttp.open(&quot;POST&quot;,url,false);   　xmlHttp.send(xmlDoc);//把xml对象发送出去   　alert(xmlHttp.responseText);   &#125;</code></p>\n<p>　　servlet&#x2F;action核心代码：</p>\n<p><code>// 读取ajax发送来的xml数据   　SAXReader xmlReader = new SAXReader();   　Document document = null;   　try &#123;   　document = xmlReader.read(request.getInputStream());   　&#125; catch (Exception ex) &#123;   　System.err.println(&quot;xml读取失败，可能没有xml数据.&quot;);   　ex.printStackTrace();   　&#125;   　System.out.println(&quot;接收到xml数据：&quot; + document.asXML());   　　   　// 解析xml   　String str = document.getRootElement().getText();   　System.out.println(&quot;解析出来的数据：&quot; + str);   　　   　// 返回结果   　response.setContentType(&quot;text/html; charset=UTF-8&quot;);// GBK也行，指明返回的编码   　response.getWriter().print(&quot;服务器返回信息：成功啦!no(∩_∩)o...哈哈!&quot;);// 返回中文也没问题啦</code></p>\n<p>-————————–</p>\n<p>在使用url进行参数传递时，经常会传递一些中文名的参数或URL地址，在后台处理时会发生转换错误。在有些传递页面使用GB2312，而在接收页面使用UTF8，这样接收到的参数就可能会与原来发生不一致。使用服务器端的urlEncode函数编码的URL，与使用客户端javascript的 encodeURI函数编码的URL，结果就不一样。</p>\n<p><strong>javaScript中的编码方法：</strong></p>\n<p>escape() 方法：<br>采用ISO Latin字符集对指定的字符串进行编码。所有的空格符、标点符号、特殊字符以及其他非ASCII字符都将被转化成%xx格式的字符编码（xx等于该字符在字符集表里面的编码的16进制数字）。比如，空格符对应的编码是%20。unescape方法与此相反。不会被此方法编码的字符： @ * &#x2F; +  </p>\n<p>英文解释：MSDN JScript Reference: The escape method returns a string value (in Unicode format) that contains the contents of [the argument]. All spaces, punctuation, accented characters, and any other non- ASCII characters are replaced with %xx encoding, where xx is equivalent to the hexadecimal number representing the character. For example, a space is returned as “%20.”<br>Edge Core Javascript Guide: The escape and unescape functions let you encode and decode strings. The escape function returns the hexadecimal encoding of an argument in the ISO Latin character set. The unescape function returns the ASCII string for the specified hexadecimal encoding value.  </p>\n<p>encodeURI() 方法：把URI字符串采用UTF-8编码格式转化成escape格式的字符串。不会被此方法编码的字符：! @ # $&amp; * ( ) &#x3D; : &#x2F; ; ? + ‘  </p>\n<p>英文解释：MSDN JScript Reference: The encodeURI method returns an encoded URI. If you pass the result to decodeURI, the original string is returned. The encodeURI method does not encode the following characters: “:”, “&#x2F;“, “;”, and “?”. Use encodeURIComponent to encode these characters. Edge Core Javascript Guide: Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, or three escape sequences representing the UTF- 8 encoding of the character  </p>\n<p>encodeURIComponent() 方法：把URI字符串采用 UTF-8编码格式转化成escape格式的字符串。与encodeURI()相比，这个方法将对更多的字符进行编码，比如 &#x2F; 等字符。所以如果字符串里面包含了URI的几个部分的话，不能用这个方法来进行编码，否则 &#x2F; 字符被编码之后URL将显示错误。不会被此方法编码的字符：! * ( )  </p>\n<p>英文解释：MSDN JScript Reference: The encodeURIComponent method returns an encoded URI. If you pass the result to decodeURIComponent, the original string is returned. Because the encodeURIComponent method encodes all characters, be careful if the string represents a path such as &#x2F;folder1 &#x2F;folder2 &#x2F;default.html. The slash characters will be encoded and will not be valid if sent as a request to a web server. Use the encodeURI method if the string contains more than a single URI component. Mozilla Developer Core Javascript Guide： Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, or three escape sequences representing the UTF- 8 encoding of the character.  </p>\n<p>因此，对于中文字符串来说，如果不希望把字符串编码格式转化成UTF-8格式的（比如原页面和目标页面的charset是一致的时候），只需要使用escape。如果你的页面是GB2312或者其他的编码，而接受参数的页面是UTF-8编码的，就要采用 encodeURI或者encodeURIComponent。</p>\n<p>另外，encodeURI&#x2F;encodeURIComponent是在javascript1.5之后引进的，escape则在javascript1.0版本就有。  </p>\n<p>英文注释：The escape() method does not encode the + character which is interpreted as a space on the server side as well as generated by forms with spaces in their fields. Due to this shortcoming, you should avoid use of escape() whenever possible. The best alternative is usually encodeURIComponent().Use of the encodeURI() method is a bit more specialized than escape() in that it encodes for URIs [REF] as opposed to the querystring, which is part of a URL. Use this method when you need to encode a string to be used for any resource that uses URIs and needs certain characters to remain un- encoded. Note that this method does not encode the ‘ character, as it is a valid character within URIs.Lastly, the encodeURIComponent() method should be used in most cases when encoding a single component of a URI. This method will encode certain chars that would normally be recognized as special chars for URIs so that many components may be included. Note that this method does not encode the ‘ character, as it is a valid character within URIs.  </p>\n<p>1.编码处理函数</p>\n<p>1） encodeURI 返回一个对URI字符串编码后的结果。URL是最常见的一种URI；</p>\n<p>2） decodeURI 将一个已编码的URI字符串解码成最原始的字符串返回；</p>\n<p>3） 举例： &lt; Script language &#x3D; “ javascript “ &gt; 输出结果如下： encodeStr: <a href=\"http://www.amigoxie.com/index.jsp?name=%E9%98%BF%E8%9C%9C%E6%9E%9C\">http://www.amigoxie.com/index.jsp?name=%E9%98%BF%E8%9C%9C%E6%9E%9C</a> decodeStr: <a href=\"http://www.cnblog.com/backuper?name=zeng.cz\">http://www.cnblog.com/backuper?name=zeng.cz</a></p>\n<p>2. 数值处理函数</p>\n<p>1） parseInt 将一个字符串指定的进制转换为一个整数，语法格式为： parseInt(numString, [radix]) 第一个参数是要进行转换的字符串，是介于2到36之间的数值，用于指定进行字符串转换时所用的进制。 举例如下： 输出结果如下：默认情况下的结果：32:32;032:26;0x32:50 转为2进制的结果：32:NaN;032:0;0x32:0 转为8进制的结果：32:26;032:26;0x32:0 转为16进制的结果：32:50;032:50;0x32:50 11001010转换后的结果： 2进制:202;16进制:285216784 8进制:2359816;10进制:11001010 43abc转换后:43;abc43转换后:NaN;abc转换后:NaN</p>\n<p>2） parseFloat方法 该方法将一个字符串转换成对应的小数。 eg. 输出结果如下： 4.11 5.1 3） isNaN方法 该方法用于检测前两个方法返回值是否为非数值型，如果是，返回true，否则，反回false</p>\n<p><code>--------------------</code></p>\n<p><code>**其实url 中文处理可以使用两个编码的函数**</code></p>\n<p><code>**escape 和 unescape 说明如下：**</code></p>\n<p><code>Encodes **String** objects so they can be read on all computers.</code></p>\n<p><strong>escape(</strong><br>                      charString<br>                      <strong>)</strong> </p>\n<p><code>The required charString argument is any **String** object or literal to be encoded.</code></p>\n<p>The <strong>escape</strong> method returns a string value (in Unicode format) that contains the contents of <em>charstring</em>. All spaces, punctuation, accented characters, and any other non-ASCII characters are replaced with <strong>%</strong> <em>xx</em> encoding, where <em>xx</em> is equivalent to the hexadecimal number representing the character. For example, a space is returned as “%20.”</p>\n<p>Characters with a value greater than 255 are stored using the <strong>%u</strong> <em>xxxx</em> format.</p>\n<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<p>Decodes <strong>String</strong> objects encoded with the <strong>escape</strong> method.</p>\n<p><strong>unescape</strong>(charString) </p>\n<p><code>The required charString argument is a **String** object or literal to be decoded.</code></p>\n<p>The <strong>unescape</strong> method returns a string value that contains the contents of <em>charstring</em>. All characters encoded with the %<em>xx</em> hexadecimal form are replaced by their ASCII character set equivalents.</p>\n<p>Characters encoded in <strong>%u</strong> <em>xxxx</em> format (Unicode characters) are replaced with the Unicode character with hexadecimal encoding <em>xxxx</em>.</p>\n<p><img data-src=\"mk:@MSITStore:E:/javascript/script56.chm::/local/note.gif\" alt=\"Note\">Note</p>\n<p>The <strong>unescape</strong> method should not be used to decode Uniform Resource Identifiers (URI). Use <strong>decodeURI</strong> and <strong>decodeURIComponent</strong> methods instead.</p>\n","categories":[{"name":"Javascript","path":"api/categories/Javascript.json"}],"tags":[{"name":"Javascript","path":"api/tags/Javascript.json"},{"name":"JS","path":"api/tags/JS.json"}]}