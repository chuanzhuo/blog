{"title":"跨站解决方案-转载-CarlZeng","slug":"cn/跨站解决方案-转载-CarlZeng","date":"2009-03-23T06:31:00.000Z","updated":"2023-12-13T06:26:36.051Z","comments":true,"path":"api/articles/cn/跨站解决方案-转载-CarlZeng.json","excerpt":"关于跨域名问题还是问题么，这方面的解决实践非常多，今天我就旧话重提把我所知道的通过几个应用场景来分别总结一下(先说明一点：我说的某某域名在您的控制下的意思是这个域名下的网页由您来负责开发内部的JavaScript) 场景一：将bbs.xxx.com的页面用iframe嵌入到w…","covers":null,"content":"<p>关于跨域名问题还是问题么，这方面的解决实践非常多，今天我就旧话重提把我所知道的通过几个应用场景来分别总结一下(先说明一点：我说的某某域名在您的控制下的意思是这个域名下的网页由您来负责开发内部的JavaScript) 场景一：将bbs.xxx.com的页面用iframe嵌入到w…</p>\n<span id=\"more\"></span>\n<p><a href=\"http://blog.csdn.net/lenel\">转自:http://blog.csdn.net/lenel</a>  </p>\n<p>关于跨域名问题还是问题么，这方面的解决实践非常多，今天我就旧话重提把我所知道的通过几个应用场景来分别总结一下</p>\n<p>先说明一点：我说的某某域名在您的控制下的意思是这个域名下的网页由您来负责开发内部的JavaScript<br>场景一：将bbs.xxx.com的页面用iframe嵌入到<a href=\"http://www.xxx.com的中,如何在iframe内外使用js通信/\">www.xxx.com的中，如何在iframe内外使用js通信</a></p>\n<p>一级域名都是xxx.com 这个域名一定是在您的控制下，所以你只要在两个页面中同时升级域名即可<br>在父窗口和iframe内部分别加上js语句：document.domain&#x3D;”xxx.com”;<br>之后2个页面就等于在同一域名下，通过window.parent oIframe.contentDocument就可以相互访问，进行无障碍的JS通信<br>在新浪、淘宝等很多页面都能找到这样的语句。不过document.domain不可以随便指定，只能向上升级，从bbs.xxx.com升级到yyy.com肯定会出错  </p>\n<p>场景二：将<a href=\"http://www.yyy.com的页面用iframe嵌入到www.xxx.com的中,两个域名都在您的控制下,如何在iframe内外进行一定的数据交流/\">www.yyy.com的页面用iframe嵌入到www.xxx.com的中，两个域名都在您的控制下，如何在iframe内外进行一定的数据交流</a><br>你可以通过相互改变hash值的方式来进行一些数据的通信  </p>\n<p>这里的实现基于如下技术要点：<br>1、父窗口通过改变子窗口的src中的hash值把一部分信息传入，如果src只有hash部分改变，那么子窗口是不会重新载入的。<br>2、子窗口可以重写父窗口的location.href，但是注意这里子窗口无法读取而只能重写location.href所以要求前提是您控制两个域名，知道当前父窗口的location.href是什么并写在子窗口内，这样通过parent.location.href &#x3D; “已知的父窗口的href”+”#”+hash。这样父窗口只有hash改变也不会重载。<br>3、上面两步分别做到了两个窗口之间的无刷新数据通知，那么下面的来说如何感知数据变化。标准中没有相关规定，所以当前的任意浏览器遇到 location.hash变化都不会触发任何javaScript事件，也就是说您要自己写监听函数来监视loaction.hash的值的变化。做法是通过setTimeout或者setInterval来写一个监听函数每20-100ms查看一下hash是否变化，如果变化了驱动js根据新的数据做想做的事情。  </p>\n<p>这种实现的一些分析：<br>1、信息通道是双向的，当然会兼容单向，如果只是父窗口向子窗口通知数据，只需要子窗口写hash监听，反之亦然。<br>2、局限性也是颇大，因为这种通信的前提是双方知道对方的location.href。如果父窗口带有动态的location.search也就是查询参数，那么子窗口的处理上就比较困难，需要把父窗口的location.search作为传递信息的一部分告知子窗口。<br>3、另外的困扰会有浏览器带给你，IE之外的浏览器遇到hash的改变会记录历史，这样你在处理前进后退的时候会非常头疼  </p>\n<p>场景三：将<a href=\"http://www.yyy.com的页面用iframe嵌入到www.xxx.com的中,只有被嵌入的yyy.com在您的控制下,如何在iframe内外进行一定的交流/\">www.yyy.com的页面用iframe嵌入到www.xxx.com的中，只有被嵌入的yyy.com在您的控制下，如何在iframe内外进行一定的交流</a><br>真实场景：google adsence的一个需求，你希望google发现您的页面不能匹配出相关性非常好的按点击付费广告时，你希望google的广告iframe能够隐藏。<br>google的广告iframe在google域下显然不能把自己隐藏掉，那么怎么办呢？<br>1、google会提供给你一个html页面<br>2、您将这个页面放置在您的域名下，并告诉google它的位置<br>3、当google发现没有很好的广告时，会将子窗口的loaction重定向到您的那个页面下，这样您的页面因为同域名就可以访问父页面来隐藏自己了<br>是不是很巧的方法？  </p>\n<p>场景四：您是内容发布商，如何改造接口，让其他域名下的页面可以从浏览器端出发获得您的数据<br>我们知道ajax的xmlHttpRequest()说到底是一个无刷新请求服务器数据的辅助工具，但是xmlHttpRequest并不能跨域名请求数据，在某些情况下成了极大的限制。<br>但是我们如果通过其他方式完成无刷新请求数据不也可以么，我们用Dom方法操作动态JS脚本请求来做这件事。<br>&#x2F;&#x2F;创建一个脚本节点<br>var oScript &#x3D; document.createElement(‘script’);<br>&#x2F;&#x2F;指定脚本src src可以指向任意域名<br>&#x2F;&#x2F;注意src不再指向静态js，而是带着查询参数指向一个动态脚本广播服务。<br>oScript.src &#x3D; “<a href=\"http://yyy.com/query.php?%22+yourQueryString\">http://yyy.com/query.php?&quot;+yourQueryString</a>;<br>&#x2F;&#x2F;如果指定了charset 同时还可以解决xmlHttpRequest另一大困扰 乱码问题<br>&#x2F;&#x2F;oScript.charset &#x3D; “utf-8”;<br>&#x2F;&#x2F;通过Dom操作把这个新的节点加入到文档当中<br>document.getElementsByTagName(“head”)[0].appendChild(oScript);  </p>\n<p>这样只要query.php的输出是可执行的javaScript脚本，比如：djsCallBack（{jsondata}）;<br>当他从服务器返回后就会自动执行,你可以方便的用json方式来做数据传递了。<br>要注意，您的脚本请求最好带上时间戳，避免浏览器缓存造成取回数据实时性下降。  </p>\n<p>如果您是数据提供者，您可以要求数据索取者在查询参数中提供回调函数名，比如query.php?callback&#x3D;myDataHandler&amp;key&#x3D;…?<br>这样您就可以根据参数来提供给他myDataHandler({jsondata}),这样不同的数据索取者都会得到自定义的正确的异步回调。  </p>\n<p>进一步发展，可以做一个统一的从xml到动态json的数据转化服务器，脱离数据的实际意义，针对任何xml接口都可以作为转化后提供给客户端直接访问。<br>这样就不用针对单独xml数据服务，为了跨域名而做各自的后台数据抓取转化服务。  </p>\n<p>用动态脚本传数据功能非常强大，去年我最先在YAHOO的站点上看到这样的应用，让人眼前一亮。  </p>\n<p>总结总结：<br>第一种场景，相应的处理办法有这非常好的效果，可以说完全解决了问题。<br>第二种场景，相应的处理办法具有一定的跨域数据交流功效，具有相当大的局限，并不适合在复杂业务流程中应用，实际上我也确实也没看到过基于此的大规模应用。<br>第三种场景，相应的处理办法比较巧妙，虽然redirect之后就不干你什么事了，但如果你是google一样面向众多域名的内容提供商，也是个不错的解决思路。<br>第四种场景，相应的处理办法非常强大，对比Ajax可以看到，跨域名没问题，无刷新没问题，本身又是异步的，JSON比xml快的多，同时解决乱码问题，只是请求都是Get方式的，不能做Post方式的请求。多一种武器自然可以从容选择了。</p>\n<p>上面说的基本上都是从前端脚本出发的各种情景下跨域解决方案，我们还有一种新式的更强大的武器Flash，只是现在我还不会用。</p>\n","more":"<p><a href=\"http://blog.csdn.net/lenel\">转自:http://blog.csdn.net/lenel</a>  </p>\n<p>关于跨域名问题还是问题么，这方面的解决实践非常多，今天我就旧话重提把我所知道的通过几个应用场景来分别总结一下</p>\n<p>先说明一点：我说的某某域名在您的控制下的意思是这个域名下的网页由您来负责开发内部的JavaScript<br>场景一：将bbs.xxx.com的页面用iframe嵌入到<a href=\"http://www.xxx.com的中,如何在iframe内外使用js通信/\">www.xxx.com的中，如何在iframe内外使用js通信</a></p>\n<p>一级域名都是xxx.com 这个域名一定是在您的控制下，所以你只要在两个页面中同时升级域名即可<br>在父窗口和iframe内部分别加上js语句：document.domain&#x3D;”xxx.com”;<br>之后2个页面就等于在同一域名下，通过window.parent oIframe.contentDocument就可以相互访问，进行无障碍的JS通信<br>在新浪、淘宝等很多页面都能找到这样的语句。不过document.domain不可以随便指定，只能向上升级，从bbs.xxx.com升级到yyy.com肯定会出错  </p>\n<p>场景二：将<a href=\"http://www.yyy.com的页面用iframe嵌入到www.xxx.com的中,两个域名都在您的控制下,如何在iframe内外进行一定的数据交流/\">www.yyy.com的页面用iframe嵌入到www.xxx.com的中，两个域名都在您的控制下，如何在iframe内外进行一定的数据交流</a><br>你可以通过相互改变hash值的方式来进行一些数据的通信  </p>\n<p>这里的实现基于如下技术要点：<br>1、父窗口通过改变子窗口的src中的hash值把一部分信息传入，如果src只有hash部分改变，那么子窗口是不会重新载入的。<br>2、子窗口可以重写父窗口的location.href，但是注意这里子窗口无法读取而只能重写location.href所以要求前提是您控制两个域名，知道当前父窗口的location.href是什么并写在子窗口内，这样通过parent.location.href &#x3D; “已知的父窗口的href”+”#”+hash。这样父窗口只有hash改变也不会重载。<br>3、上面两步分别做到了两个窗口之间的无刷新数据通知，那么下面的来说如何感知数据变化。标准中没有相关规定，所以当前的任意浏览器遇到 location.hash变化都不会触发任何javaScript事件，也就是说您要自己写监听函数来监视loaction.hash的值的变化。做法是通过setTimeout或者setInterval来写一个监听函数每20-100ms查看一下hash是否变化，如果变化了驱动js根据新的数据做想做的事情。  </p>\n<p>这种实现的一些分析：<br>1、信息通道是双向的，当然会兼容单向，如果只是父窗口向子窗口通知数据，只需要子窗口写hash监听，反之亦然。<br>2、局限性也是颇大，因为这种通信的前提是双方知道对方的location.href。如果父窗口带有动态的location.search也就是查询参数，那么子窗口的处理上就比较困难，需要把父窗口的location.search作为传递信息的一部分告知子窗口。<br>3、另外的困扰会有浏览器带给你，IE之外的浏览器遇到hash的改变会记录历史，这样你在处理前进后退的时候会非常头疼  </p>\n<p>场景三：将<a href=\"http://www.yyy.com的页面用iframe嵌入到www.xxx.com的中,只有被嵌入的yyy.com在您的控制下,如何在iframe内外进行一定的交流/\">www.yyy.com的页面用iframe嵌入到www.xxx.com的中，只有被嵌入的yyy.com在您的控制下，如何在iframe内外进行一定的交流</a><br>真实场景：google adsence的一个需求，你希望google发现您的页面不能匹配出相关性非常好的按点击付费广告时，你希望google的广告iframe能够隐藏。<br>google的广告iframe在google域下显然不能把自己隐藏掉，那么怎么办呢？<br>1、google会提供给你一个html页面<br>2、您将这个页面放置在您的域名下，并告诉google它的位置<br>3、当google发现没有很好的广告时，会将子窗口的loaction重定向到您的那个页面下，这样您的页面因为同域名就可以访问父页面来隐藏自己了<br>是不是很巧的方法？  </p>\n<p>场景四：您是内容发布商，如何改造接口，让其他域名下的页面可以从浏览器端出发获得您的数据<br>我们知道ajax的xmlHttpRequest()说到底是一个无刷新请求服务器数据的辅助工具，但是xmlHttpRequest并不能跨域名请求数据，在某些情况下成了极大的限制。<br>但是我们如果通过其他方式完成无刷新请求数据不也可以么，我们用Dom方法操作动态JS脚本请求来做这件事。<br>&#x2F;&#x2F;创建一个脚本节点<br>var oScript &#x3D; document.createElement(‘script’);<br>&#x2F;&#x2F;指定脚本src src可以指向任意域名<br>&#x2F;&#x2F;注意src不再指向静态js，而是带着查询参数指向一个动态脚本广播服务。<br>oScript.src &#x3D; “<a href=\"http://yyy.com/query.php?%22+yourQueryString\">http://yyy.com/query.php?&quot;+yourQueryString</a>;<br>&#x2F;&#x2F;如果指定了charset 同时还可以解决xmlHttpRequest另一大困扰 乱码问题<br>&#x2F;&#x2F;oScript.charset &#x3D; “utf-8”;<br>&#x2F;&#x2F;通过Dom操作把这个新的节点加入到文档当中<br>document.getElementsByTagName(“head”)[0].appendChild(oScript);  </p>\n<p>这样只要query.php的输出是可执行的javaScript脚本，比如：djsCallBack（{jsondata}）;<br>当他从服务器返回后就会自动执行,你可以方便的用json方式来做数据传递了。<br>要注意，您的脚本请求最好带上时间戳，避免浏览器缓存造成取回数据实时性下降。  </p>\n<p>如果您是数据提供者，您可以要求数据索取者在查询参数中提供回调函数名，比如query.php?callback&#x3D;myDataHandler&amp;key&#x3D;…?<br>这样您就可以根据参数来提供给他myDataHandler({jsondata}),这样不同的数据索取者都会得到自定义的正确的异步回调。  </p>\n<p>进一步发展，可以做一个统一的从xml到动态json的数据转化服务器，脱离数据的实际意义，针对任何xml接口都可以作为转化后提供给客户端直接访问。<br>这样就不用针对单独xml数据服务，为了跨域名而做各自的后台数据抓取转化服务。  </p>\n<p>用动态脚本传数据功能非常强大，去年我最先在YAHOO的站点上看到这样的应用，让人眼前一亮。  </p>\n<p>总结总结：<br>第一种场景，相应的处理办法有这非常好的效果，可以说完全解决了问题。<br>第二种场景，相应的处理办法具有一定的跨域数据交流功效，具有相当大的局限，并不适合在复杂业务流程中应用，实际上我也确实也没看到过基于此的大规模应用。<br>第三种场景，相应的处理办法比较巧妙，虽然redirect之后就不干你什么事了，但如果你是google一样面向众多域名的内容提供商，也是个不错的解决思路。<br>第四种场景，相应的处理办法非常强大，对比Ajax可以看到，跨域名没问题，无刷新没问题，本身又是异步的，JSON比xml快的多，同时解决乱码问题，只是请求都是Get方式的，不能做Post方式的请求。多一种武器自然可以从容选择了。</p>\n<p>上面说的基本上都是从前端脚本出发的各种情景下跨域解决方案，我们还有一种新式的更强大的武器Flash，只是现在我还不会用。</p>","categories":[],"tags":[{"name":"Javascript","path":"api/tags/Javascript.json"},{"name":"JS","path":"api/tags/JS.json"}]}