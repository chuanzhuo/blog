{"title":"js 取得 Unix时间戳(Unix timestamp)-CarlZeng","slug":"cn/js-取得-Unix时间戳-Unix-timestamp-CarlZeng","date":"2009-07-24T05:31:00.000Z","updated":"2023-10-08T14:21:10.120Z","comments":true,"path":"api/articles/cn/js-取得-Unix时间戳-Unix-timestamp-CarlZeng.json","excerpt":"来源：http://www.zhuanhuan.net/qita/unixtime.htmljs 取得 Unix时间戳Unix时间戳(Unix timestamp)，或称Unix时间(Unix time)、POSIX时间(POSIX time)，是一种时间表示方式，定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。Unix时间戳不仅被使用在Unix 系统、类Unix...","covers":null,"content":"<p>来源：<a href=\"http://www.zhuanhuan.net/qita/unixtime.html\">http://www.zhuanhuan.net/qita/unixtime.html</a> js 取得 Unix时间戳 Unix时间戳(Unix timestamp)，或称Unix时间(Unix time)、POSIX时间(POSIX time)，是一种时间表示方式，定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。Unix时间戳不仅被使用在Unix 系统、类Unix…</p>\n<!-- more -->\n<p>来源：<a href=\"http://www.zhuanhuan.net/qita/unixtime.html\">http://www.zhuanhuan.net/qita/unixtime.html</a></p>\n<p>js 取得 Unix时间戳</p>\n<p>Unix时间戳(Unix timestamp)，或称Unix时间(Unix time)、POSIX时间(POSIX time)，是一种时间表示方式，定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。Unix时间戳不仅被使用在Unix 系统、类Unix系统中，也在许多其他操作系统中被广告采用。</p>\n<p>目前相当一部分操作系统使用32位二进制数字表示时间。此类系统的Unix时间戳最多可以使用到格林威治时间2038年01月19日03时14分07秒（二进制：_01111111 11111111 11111111 11111111_）。其后一秒，二进制数字会变为_10000000 00000000 00000000 00000000_，发生溢出错误，造成系统将时间误解为1901年12月13日20时45分52秒。这很可能会引起软件故障，甚至是系统瘫痪。使用64位二进制数字表示时间的系统（最多可以使用到格林威治时间292,277,026,596年12月04日15时30分08秒）则基本不会遇到这类溢出问题。</p>\n<h3 id=\"如何在不同编程语言中获取现在的Unix时间戳-Unix-timestamp-？\"><a href=\"#如何在不同编程语言中获取现在的Unix时间戳-Unix-timestamp-？\" class=\"headerlink\" title=\"如何在不同编程语言中获取现在的Unix时间戳(Unix timestamp)？\"></a>如何在不同编程语言中获取现在的Unix时间戳(<em>Unix timestamp</em>)？</h3><p>Java</p>\n<p>time</p>\n<p>JavaScript</p>\n<p>Math.round(new Date().getTime()&#x2F;1000)<br>getTime()返回数值的单位是毫秒</p>\n<p>Microsoft .NET &#x2F; C#</p>\n<p>epoch &#x3D; (DateTime.Now.ToUniversalTime().Ticks - 621355968000000000) &#x2F; 10000000</p>\n<p>MySQL</p>\n<p>SELECT unix_timestamp(now())</p>\n<p>Perl</p>\n<p>time</p>\n<p>PHP</p>\n<p>time()</p>\n<p>PostgreSQL</p>\n<p>SELECT extract(epoch FROM now())</p>\n<p>Python</p>\n<p>先 import time 然后 time.time()</p>\n<p>Ruby</p>\n<p>获取Unix时间戳：Time.now 或 Time.new<br>显示Unix时间戳：Time.now.to_i</p>\n<p>SQL Server</p>\n<p>SELECT DATEDIFF(s, ‘1970-01-01 00:00:00’, GETUTCDATE())</p>\n<p>Unix &#x2F; Linux</p>\n<p>date +%s</p>\n<p>VBScript &#x2F; ASP</p>\n<p>DateDiff(“s”, “01&#x2F;01&#x2F;1970 00:00:00”, Now())</p>\n<p>其他操作系统<br>(如果Perl被安装在系统中)</p>\n<p>命令行状态：perl -e “print time”</p>\n<h3 id=\"如何在不同编程语言中实现Unix时间戳-Unix-timestamp-→-普通时间？\"><a href=\"#如何在不同编程语言中实现Unix时间戳-Unix-timestamp-→-普通时间？\" class=\"headerlink\" title=\"如何在不同编程语言中实现Unix时间戳(Unix timestamp) → 普通时间？\"></a>如何在不同编程语言中实现Unix时间戳(<em>Unix timestamp</em>) → 普通时间？</h3><p>Java</p>\n<p>String date &#x3D; new java.text.SimpleDateFormat(“dd&#x2F;MM&#x2F;yyyy HH:mm:ss”).format(new java.util.Date(Unix timestamp * 1000))</p>\n<p>JavaScript</p>\n<p>先 var unixTimestamp &#x3D; new Date(Unix timestamp * 1000) 然后 commonTime &#x3D; unixTimestamp.toLocaleString()</p>\n<p>Linux</p>\n<p>date -d @Unix timestamp</p>\n<p>MySQL</p>\n<p>from_unixtime(Unix timestamp)</p>\n<p>Perl</p>\n<p>先 my $time &#x3D; Unix timestamp 然后 my ($sec, $min, $hour, $day, $month, $year) &#x3D; (localtime($time))[0,1,2,3,4,5,6]</p>\n<p>PHP</p>\n<p>date(‘r’, Unix timestamp)</p>\n<p>PostgreSQL</p>\n<p>SELECT TIMESTAMP WITH TIME ZONE ‘epoch’ + Unix timestamp) * INTERVAL ‘1 second’;</p>\n<p>Python</p>\n<p>先 import time 然后 time.gmtime(Unix timestamp)</p>\n<p>Ruby</p>\n<p>Time.at(Unix timestamp)</p>\n<p>SQL Server</p>\n<p>DATEADD(s, Unix timestamp, ‘1970-01-01 00:00:00’)</p>\n<p>VBScript &#x2F; ASP</p>\n<p>DateAdd(“s”, Unix timestamp, “01&#x2F;01&#x2F;1970 00:00:00”)</p>\n<p>其他操作系统<br>(如果Perl被安装在系统中)</p>\n<p>命令行状态：perl -e “print scalar(localtime(Unix timestamp))”</p>\n","more":"<p>来源：<a href=\"http://www.zhuanhuan.net/qita/unixtime.html\">http://www.zhuanhuan.net/qita/unixtime.html</a> js 取得 Unix时间戳 Unix时间戳(Unix timestamp)，或称Unix时间(Unix time)、POSIX时间(POSIX time)，是一种时间表示方式，定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。Unix时间戳不仅被使用在Unix 系统、类Unix…</p>\n<!-- more -->\n<p>来源：<a href=\"http://www.zhuanhuan.net/qita/unixtime.html\">http://www.zhuanhuan.net/qita/unixtime.html</a></p>\n<p>js 取得 Unix时间戳</p>\n<p>Unix时间戳(Unix timestamp)，或称Unix时间(Unix time)、POSIX时间(POSIX time)，是一种时间表示方式，定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。Unix时间戳不仅被使用在Unix 系统、类Unix系统中，也在许多其他操作系统中被广告采用。</p>\n<p>目前相当一部分操作系统使用32位二进制数字表示时间。此类系统的Unix时间戳最多可以使用到格林威治时间2038年01月19日03时14分07秒（二进制：_01111111 11111111 11111111 11111111_）。其后一秒，二进制数字会变为_10000000 00000000 00000000 00000000_，发生溢出错误，造成系统将时间误解为1901年12月13日20时45分52秒。这很可能会引起软件故障，甚至是系统瘫痪。使用64位二进制数字表示时间的系统（最多可以使用到格林威治时间292,277,026,596年12月04日15时30分08秒）则基本不会遇到这类溢出问题。</p>\n<h3 id=\"如何在不同编程语言中获取现在的Unix时间戳-Unix-timestamp-？\"><a href=\"#如何在不同编程语言中获取现在的Unix时间戳-Unix-timestamp-？\" class=\"headerlink\" title=\"如何在不同编程语言中获取现在的Unix时间戳(Unix timestamp)？\"></a>如何在不同编程语言中获取现在的Unix时间戳(<em>Unix timestamp</em>)？</h3><p>Java</p>\n<p>time</p>\n<p>JavaScript</p>\n<p>Math.round(new Date().getTime()&#x2F;1000)<br>getTime()返回数值的单位是毫秒</p>\n<p>Microsoft .NET &#x2F; C#</p>\n<p>epoch &#x3D; (DateTime.Now.ToUniversalTime().Ticks - 621355968000000000) &#x2F; 10000000</p>\n<p>MySQL</p>\n<p>SELECT unix_timestamp(now())</p>\n<p>Perl</p>\n<p>time</p>\n<p>PHP</p>\n<p>time()</p>\n<p>PostgreSQL</p>\n<p>SELECT extract(epoch FROM now())</p>\n<p>Python</p>\n<p>先 import time 然后 time.time()</p>\n<p>Ruby</p>\n<p>获取Unix时间戳：Time.now 或 Time.new<br>显示Unix时间戳：Time.now.to_i</p>\n<p>SQL Server</p>\n<p>SELECT DATEDIFF(s, ‘1970-01-01 00:00:00’, GETUTCDATE())</p>\n<p>Unix &#x2F; Linux</p>\n<p>date +%s</p>\n<p>VBScript &#x2F; ASP</p>\n<p>DateDiff(“s”, “01&#x2F;01&#x2F;1970 00:00:00”, Now())</p>\n<p>其他操作系统<br>(如果Perl被安装在系统中)</p>\n<p>命令行状态：perl -e “print time”</p>\n<h3 id=\"如何在不同编程语言中实现Unix时间戳-Unix-timestamp-→-普通时间？\"><a href=\"#如何在不同编程语言中实现Unix时间戳-Unix-timestamp-→-普通时间？\" class=\"headerlink\" title=\"如何在不同编程语言中实现Unix时间戳(Unix timestamp) → 普通时间？\"></a>如何在不同编程语言中实现Unix时间戳(<em>Unix timestamp</em>) → 普通时间？</h3><p>Java</p>\n<p>String date &#x3D; new java.text.SimpleDateFormat(“dd&#x2F;MM&#x2F;yyyy HH:mm:ss”).format(new java.util.Date(Unix timestamp * 1000))</p>\n<p>JavaScript</p>\n<p>先 var unixTimestamp &#x3D; new Date(Unix timestamp * 1000) 然后 commonTime &#x3D; unixTimestamp.toLocaleString()</p>\n<p>Linux</p>\n<p>date -d @Unix timestamp</p>\n<p>MySQL</p>\n<p>from_unixtime(Unix timestamp)</p>\n<p>Perl</p>\n<p>先 my $time &#x3D; Unix timestamp 然后 my ($sec, $min, $hour, $day, $month, $year) &#x3D; (localtime($time))[0,1,2,3,4,5,6]</p>\n<p>PHP</p>\n<p>date(‘r’, Unix timestamp)</p>\n<p>PostgreSQL</p>\n<p>SELECT TIMESTAMP WITH TIME ZONE ‘epoch’ + Unix timestamp) * INTERVAL ‘1 second’;</p>\n<p>Python</p>\n<p>先 import time 然后 time.gmtime(Unix timestamp)</p>\n<p>Ruby</p>\n<p>Time.at(Unix timestamp)</p>\n<p>SQL Server</p>\n<p>DATEADD(s, Unix timestamp, ‘1970-01-01 00:00:00’)</p>\n<p>VBScript &#x2F; ASP</p>\n<p>DateAdd(“s”, Unix timestamp, “01&#x2F;01&#x2F;1970 00:00:00”)</p>\n<p>其他操作系统<br>(如果Perl被安装在系统中)</p>\n<p>命令行状态：perl -e “print scalar(localtime(Unix timestamp))”</p>\n","categories":[{"name":"Javascript","path":"api/categories/Javascript.json"}],"tags":[{"name":"Javascript","path":"api/tags/Javascript.json"},{"name":"JS","path":"api/tags/JS.json"}]}