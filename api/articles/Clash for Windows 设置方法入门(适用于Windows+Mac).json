{"title":"Clash for Windows 设置方法入门(适用于Windows+Mac+安卓)(部分转载)","slug":"Clash for Windows 设置方法入门(适用于Windows+Mac)","date":"2023-10-05T09:15:48.000Z","updated":"2024-02-18T03:10:11.437Z","comments":true,"path":"api/articles/Clash for Windows 设置方法入门(适用于Windows+Mac).json","excerpt":"2023年12月更新：正式替换Mac端Clash for Windows为：Clash Verge。详见以下章节目录‘Clash Verge (MAC)’","covers":["https://i.loli.net/2020/06/16/BSEwKabNtpd2OZM.png","https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-home.png","https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-add-config-link.png","https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-add-config-link-done.png","https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-set-system-proxy.png","https://i.loli.net/2021/09/13/1DhxmedGlP7NRcV.png","https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-rule-direct.png","https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-swo-port.png"],"content":"<div class=\"note success\"><p>2023年12月更新：正式替换Mac端Clash for Windows为：Clash Verge。详见以下章节目录‘Clash Verge (MAC)’</p>\n</div>\n\n<span id=\"more\"></span>\n\n<iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://c.carlzeng.top:3/web\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"600\"></iframe>\n\n<h1 id=\"1-下载与安装\"><a href=\"#1-下载与安装\" class=\"headerlink\" title=\"1. 下载与安装\"></a>1. 下载与安装</h1><p>   访问 <a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">Clash for Windows 官方 Github Releases [已失效]</a> 或搜索 Repo 更新网站下载客户端<br>   对于 Windows，下载 Clash.for.Windows.Setup.版本号.exe 文件，不要下载带 arm64 字样的 exe 运行文件<br>   对于 MacOS，下载 Clash.for.Windows-版本号.dmg 文件。<br>   对于 Andriod, 下载等等请参见下方 Clash for Android 章节。</p>\n<p>在 Windows 上，直接双击 exe 文件进行安装。如果提示“阻止了无法识别的应用启动”，请点击“更多信息”，然后再点击“仍要运行”进行安装。</p>\n<p>说明书：<a href=\"https://stash.wiki/en/proxy-protocols/proxy-groups\">https://stash.wiki/en/proxy-protocols/proxy-groups</a></p>\n<h2 id=\"1-1-下载地址二\"><a href=\"#1-1-下载地址二\" class=\"headerlink\" title=\"1.1 下载地址二\"></a>1.1 下载地址二</h2><p>   v2rayN永久更新地址<br>   <a href=\"https://github.com/2dust/v2rayN/releases\">https://github.com/2dust/v2rayN/releases</a></p>\n<p>   Clash永久更新地址<br>   <a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p>\n<h1 id=\"2-获取配置\"><a href=\"#2-获取配置\" class=\"headerlink\" title=\"2. 获取配置\"></a>2. 获取配置</h1><p>   登入客户中心后，依次访问“产品服务” &gt; “我的产品与服务”(点击前往)，以查看 Trojan 服务对应的服务器信息。</p>\n<p>在产品详情页面，获取 Clash 服务器的订阅链接。</p>\n<img data-src=\"https://i.loli.net/2020/06/16/BSEwKabNtpd2OZM.png\" alt=\"portal-clash-get-link.png\" width=\"822\" height=\"107\" />\n\n<p>点击 ClashX 配置对应的获取地址，在弹出的窗口中，复制订阅链接。</p>\n<p>请注意，订阅链接与您的密码一样重要，请勿分享给他人。如果不慎泄露，请在产品详情页面重置链接，并提交工单申请重置服务密码。</p>\n<h1 id=\"3-添加配置\"><a href=\"#3-添加配置\" class=\"headerlink\" title=\"3. 添加配置\"></a>3. 添加配置</h1><p>   3.1 Clash 主界面介绍<br>   安装后，在 Windows 上，您可以通过双击通知区域的 Clash for Windows 图标来打开主界面。</p>\n<img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-home.png\" alt=\"cfw-home.png\" width=\"100%\" />\n\n<p>首先，打开“Profiles”配置选择页面，然后进行配置文件的添加。</p>\n<h2 id=\"3-1-通过链接直接添加\"><a href=\"#3-1-通过链接直接添加\" class=\"headerlink\" title=\"3.1 通过链接直接添加\"></a>3.1 通过链接直接添加</h2><p>复制获取配置步骤中得到的订阅链接，粘贴到“Download from a URL”输入框中，然后点击右侧的“Download”按钮。</p>\n<p>如果显示“Success!”，则表示成功添加了配置文件，并且在下面会多出一个配置。点击该配置，可以切换到对应的配置。</p>\n<p><img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-add-config-link.png\" alt=\"cfw-add-config-link.png\" width=\"100%\" /></p>\n<p><img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-add-config-link-done.png\" alt=\"cfw-add-config-link-done.png\" width=\"100%\" /></p>\n\n<h1 id=\"4-Clash-代理使用介绍\"><a href=\"#4-Clash-代理使用介绍\" class=\"headerlink\" title=\"4. Clash 代理使用介绍\"></a>4. Clash 代理使用介绍</h1><h2 id=\"4-1-开启系统代理与开机启动\"><a href=\"#4-1-开启系统代理与开机启动\" class=\"headerlink\" title=\"4.1 开启系统代理与开机启动\"></a>4.1 开启系统代理与开机启动</h2><p>   首先，打开“General”页面，开启系统代理和开机自动启动，然后打开“Proxies”代理服务器选择页面。</p>\n<img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-set-system-proxy.png\" alt=\"cfw-set-system-proxy.png\" />\n\n<p>在“Proxies”页面中，点击“Global”标签。确保全局规则选择不是“DIRECT”（选择“DIRECT”表示不使用代理），可以选择“AUTO”（自动选择节点）或者直接选择自己想要使用的节点。</p>\n<img data-src=\"https://i.loli.net/2021/09/13/1DhxmedGlP7NRcV.png\" alt=\"cfw-select-node.png\" width=\"100%\" height />\n\n<p>选择节点后可能不会立即生效。建议返回“General”页面，点击“Clash for Windows”字样，通过快速重启客户端重新载入配置。</p>\n<p>此时，Clash已经通过设置系统代理的方式开始工作，使用系统代理的软件已经可以正常使用。可以使用IE &#x2F; EDGE &#x2F; Safari访问 <a href=\"https://www.google.com/\">https://www.google.com</a> 进行测试。</p>\n<h2 id=\"4-2-Global-全局规则选项\"><a href=\"#4-2-Global-全局规则选项\" class=\"headerlink\" title=\"4.2 Global 全局规则选项\"></a>4.2 Global 全局规则选项</h2><p>Global 页面是用于设置 Clash 的代理规则，即设置 Clash 如何处理访问请求。</p>\n<p>Direct 表示直接连接，不使用代理。<br><img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-rule-direct.png\" alt=\"cfw-rule-direct.png\" /><br>Reject 表示全部拒绝访问。<br><img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-rule-reject.png\" alt=\"cfw-rule-reject.png\" /><br>其他直接选中节点表示所有请求都会通过代理，类似于 Shadowsocks 的全局模式。<br>而选择 Global 页面右侧的 Rule 标签，则表示使用的是自动切换模式，类似于其他软件的 PAC 模式。</p>\n<h1 id=\"5-Chrome-Edge-Firefox-配合-SwitchyOmega-扩展\"><a href=\"#5-Chrome-Edge-Firefox-配合-SwitchyOmega-扩展\" class=\"headerlink\" title=\"5. Chrome &#x2F; Edge &#x2F; Firefox 配合 SwitchyOmega 扩展\"></a>5. Chrome &#x2F; Edge &#x2F; Firefox 配合 SwitchyOmega 扩展</h1><p>   如果不想使用客户端的系统代理，您可以通过安装浏览器扩展来使用 Clash。（支持 Chrome &#x2F; Firefox &#x2F; 新版 Edge 浏览器）</p>\n<p>设置方法请参考：Chrome &#x2F; Edge &#x2F; Firefox 安装 Proxy SwitchyOmega 扩展使用</p>\n<p>由于扩展中代理模式对应客户端的端口为 1080，需要修改为 Clash 对应的 7890，请按照下图进行修改：</p>\n<img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-swo-port.png\" alt=\"cfw-swo-port.png\" />\n\n<hr>\n<p>来源<br>【Windows &#x2F; macOS】 Clash for Windows 设置方法<br><a href=\"https://order.yizhihongxing.org/index.php?rp=/knowledgebase/27/\">https://order.yizhihongxing.org/index.php?rp=/knowledgebase/27/</a><br><a href=\"https://order.yizhihongxing.org/index.php?rp=/knowledgebase/13/\">https://order.yizhihongxing.org/index.php?rp=/knowledgebase/13/</a></p>\n<h1 id=\"Clash配置文件之-策略组\"><a href=\"#Clash配置文件之-策略组\" class=\"headerlink\" title=\"Clash配置文件之 策略组\"></a>Clash配置文件之 策略组</h1><p>策略组有：延迟最低、故障转移、手动选择、负载均衡 四种模式。<br>对应type：url-test、fallback、select、load-balance 和 relay</p>\n<ul>\n<li><p>延迟最低，顾名思义，每隔一段时间进行延迟测试，选择延迟最低的节点。</p>\n</li>\n<li><p>故障转移，每次都选组内第一个节点，无法使用再换到第二个，依次类推。</p>\n</li>\n<li><p>手动选择，顾名思义，没有特殊功能。</p>\n</li>\n<li><p>负载均衡，每个节点都用用，由于很多机场都有连接数的限制，因此实际使用较少。</p>\n</li>\n<li><p>链式代理, 实现GOST代理链功能，即指定数据流的数据链，比如：节点A-》B-》C-》Internet</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Clash-for-Windows-在Mac-OSX下使用经验\"><a href=\"#Clash-for-Windows-在Mac-OSX下使用经验\" class=\"headerlink\" title=\"Clash for Windows 在Mac OSX下使用经验\"></a>Clash for Windows 在Mac OSX下使用经验</h2><ul>\n<li>在Mac电脑上，Clash for Windows的定时检测服务器功能（对于经常需要检测服务器可用性的个人用户很实用）<br>需要一直开着UI界面，才能正常检测；（也就是说，如果把所有窗口都最小化了，定时检测服务可用性的功能就关闭了）<br>可以把窗口拉到最左或者上角的方式，漏出一小角，也算是一直看着窗口。<br>定时检测服务可用性，结果可以显示可用服务器和连接的毫秒数值。</li>\n<li>最新的经验是通过修改订阅的配置文件，解决了上面这个尴尬；请看修改过的Profile内容节选：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy-groups:</span><br><span class=\"line\">- name: loadbalance1</span><br><span class=\"line\">  type: url-test</span><br><span class=\"line\">  proxies:</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   url: https://clients3.google.com/generate_204</span><br><span class=\"line\">   interval: 300</span><br></pre></td></tr></table></figure>\n把 type 修改为 url-test;</li>\n</ul>\n<p>原先求负载均衡的值是：type: load-balance</p>\n<p>详解解释参见：<a href=\"https://www.carlzeng.top/202310011555.html?highlight=clash+load+balance#proxypool-%E6%97%A0%E6%B3%95%E6%8A%93%E5%8F%96%E5%BD%93%E5%89%8D%E8%87%AA%E5%B7%B1%E6%9C%AC%E6%9C%BA%E8%BF%90%E8%A1%8C%E7%9A%84%E5%8F%AF%E7%94%A8%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8C\">Clash load balance 方案中，服务器群，如何对新连接，会优先选择测速最快的节点？</a></p>\n<h3 id=\"这个-interval-300-每5分钟可能太过于频繁了\"><a href=\"#这个-interval-300-每5分钟可能太过于频繁了\" class=\"headerlink\" title=\"这个 interval: 300 每5分钟可能太过于频繁了\"></a>这个 interval: 300 每5分钟可能太过于频繁了</h3><p>导致节点经常现实Timeout，可是仍然是可以使用的，这代表是轮询过于频繁了？<br>而测试过600（10分钟）又太缓慢了，现修改为450；继续测试</p>\n<p>另外一个因素出现在这URL Test的目的地：<a href=\"https://clients3.google.com/generate_204\">https://clients3.google.com/generate_204</a><br>这个目的地出现问题会导致测速结果都是错误的，导致误判。</p>\n<p>另外这个URL Test的原理是：从代理服务器到达URLTest测试服务器的延时。<br>现实情况中：我遇到了这个URLTest延时小而访问Google速度反而慢的情况，听上去很不合理，其实理解了原理以后我们知道：还有一个速度至关重要，就是你的PC或手机到达这个代理服务器的速度，然后才是代理服务器往返最终的目的地服务器的速度。<br>根据你的宽带出口出国的速度：日本，美国西部海岸，香港，新加坡，台湾；这些服务器相对较近，延迟小；<br>最普普通通的搬瓦工也会在500ms左右。</p>\n<h2 id=\"那么如何知道速度最快的服务器节点？\"><a href=\"#那么如何知道速度最快的服务器节点？\" class=\"headerlink\" title=\"那么如何知道速度最快的服务器节点？\"></a>那么如何知道速度最快的服务器节点？</h2><p>TCP Ping的延时 + URL Test的延时最小的节点，是最快的。显然Clash还没有这个机制&#x2F;算法。<br>那么那个软件可以实现这种两个维度的定时轮询，自动跳转节点呢？</p>\n<p>clash for window 根据ip地址来决定线路<br>PC或MAC端的，可以通过配置文件，来按IP地址的归属地来走不同的节点，分流。</p>\n<p>完美情况：<br>负载均衡算法：如果按IP地址归属地的分流，可以再根据目的地IP地址的归属，自动选择距离其最近的节点来分流各个数据包的流量。这样速度就会有质的提升吧。。？</p>\n<p>不清楚目前负载均衡的算法时怎么负载的，明显不能根据浏览器的不同域名来分流的，观察到Clash for Window具体连接界面，往往是（目测）第一个节点（最快）被分配了95%以上流量。</p>\n<p>优化配置文件，增加<br>      域名类：全球拦截，应用净化<br>      IP类：全球直连（DIRECT）</p>\n<h4 id=\"URL-Test-地址\"><a href=\"#URL-Test-地址\" class=\"headerlink\" title=\"URL Test 地址\"></a>URL Test 地址</h4><ul>\n<li><p>HTTPS<br><a href=\"https://gstatic.com/generate_204\">https://gstatic.com/generate_204</a><br><a href=\"https://clients3.google.com/generate_204\">https://clients3.google.com/generate_204</a><br><a href=\"https://cp.cloudflare.com/\">https://cp.cloudflare.com</a><br><a href=\"https://detectportal.firefox.com/success.txt\">https://detectportal.firefox.com/success.txt</a></p>\n</li>\n<li><p>HTTP<br><a href=\"http://www.msftconnecttest.com/connecttest.txt\">http://www.msftconnecttest.com/connecttest.txt</a><br><a href=\"http://gstatic.com/generate_204\">http://gstatic.com/generate_204</a><br><a href=\"http://www.gstatic.com/generate_204\">http://www.gstatic.com/generate_204</a><br><a href=\"http://clients3.google.com/generate_204\">http://clients3.google.com/generate_204</a><br><a href=\"http://cp.cloudflare.com/\">http://cp.cloudflare.com</a><br><a href=\"http://detectportal.firefox.com/success.txt\">http://detectportal.firefox.com/success.txt</a></p>\n</li>\n</ul>\n<h2 id=\"各个平台与构架\"><a href=\"#各个平台与构架\" class=\"headerlink\" title=\"各个平台与构架\"></a>各个平台与构架</h2><p>其他版本下载<br>Clash for Android MacOS 版名为 ClashX，可移步至 ClashX 下载并查看详细教程。<br>Clash for Android Windows 版名为 Clash for Windows，可移步至 Clash for Windows 下载并查看详细教程。<br>软路由 OpenWRT 版名为 OpenClash，可移步至 OpenClash 下载并查看详细教程。</p>\n<h2 id=\"url-test-策略之tolerance设置\"><a href=\"#url-test-策略之tolerance设置\" class=\"headerlink\" title=\"url-test 策略之tolerance设置\"></a>url-test 策略之tolerance设置</h2><p>tolerance字段表示速度切换的阈值（以毫秒为单位），这里设置为500毫秒。<br>    根据上述配置，Clash会定期测试proxy1、proxy2和proxy3的速度，并根据速度切换节点。如果某个节点的速度超过当前节点速度加上阈值（即当前节点速度+500毫秒），则会切换到速度更快的节点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下是一个示例配置，演示了如何设置自动切换节点的速度阈值：</span><br><span class=\"line\"></span><br><span class=\"line\">proxy-groups:</span><br><span class=\"line\">  - name: my-proxy-group</span><br><span class=\"line\">    type: url-test</span><br><span class=\"line\">    proxies:</span><br><span class=\"line\">      - proxy1</span><br><span class=\"line\">      - proxy2</span><br><span class=\"line\">      - proxy3</span><br><span class=\"line\">    url: http://www.example.com</span><br><span class=\"line\">    interval: 300</span><br><span class=\"line\">    timeout: 2000</span><br><span class=\"line\">    tolerance: 500</span><br><span class=\"line\">在上述示例中，proxy-groups中的type设置为url-test，并定义了一个名为my-proxy-group的代理组。proxies中列出了要测试速度的节点名称，例如proxy1、proxy2和proxy3。url字段指定了用于测试节点速度的URL，这里使用了http://www.example.com作为示例。interval字段表示测试的时间间隔（以秒为单位），这里设置为300秒（即5分钟）。timeout字段表示测试的超时时间（以毫秒为单位），这里设置为2000毫秒（即2秒）。tolerance字段表示速度切换的阈值（以毫秒为单位），这里设置为500毫秒。</span><br><span class=\"line\"></span><br><span class=\"line\">根据上述配置，Clash会定期测试proxy1、proxy2和proxy3的速度，并根据速度切换节点。如果某个节点的速度超过当前节点速度加上阈值（即当前节点速度+500毫秒），则会切换到速度更快的节点。</span><br></pre></td></tr></table></figure>\n\n<p>实际使用中，将tolerance设置为300，可以防止不停切换服务器的尴尬（事实上，偶尔会切换到无效的节点上）</p>\n<p>有待进一步观察…</p>\n<blockquote>\n<p>经过几周实践测验: tolerance 非常实用！</p>\n<p>节省人力去不停维护一堆的服务器列表（有些url-test成功，可是实际无法使用的节点）</p>\n</blockquote>\n<hr>\n<hr>\n<h2 id=\"汇总目前常用的内核仓库和客户端\"><a href=\"#汇总目前常用的内核仓库和客户端\" class=\"headerlink\" title=\"汇总目前常用的内核仓库和客户端\"></a>汇总目前常用的内核仓库和客户端</h2><p>clash for windows 客户端：</p>\n<p><a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p>\n<p>clash 内核：</p>\n<p><a href=\"https://github.com/Dreamacro/clash\">https://github.com/Dreamacro/clash</a></p>\n<p>clash for android 客户端：</p>\n<p><a href=\"https://github.com/Kr328/ClashForAndroid\">https://github.com/Kr328/ClashForAndroid</a></p>\n<p>归档<br>clash.meta 内核（主分支设置成 rm 分支，官网和群组换成虚空题材）:</p>\n<p><a href=\"https://github.com/MetaCubeX/Clash.Meta/\">https://github.com/MetaCubeX/Clash.Meta/</a></p>\n<p>tuic 内核（停止维护）:</p>\n<p><a href=\"https://github.com/EAimTY/tuic\">https://github.com/EAimTY/tuic</a></p>\n<p>clash verge 客户端（主分支设置成 rm 分支）：</p>\n<p><a href=\"https://github.com/zzzgydi/clash-verge/\">https://github.com/zzzgydi/clash-verge/</a></p>\n<p>clash for android：</p>\n<p><a href=\"https://github.com/MetaCubeX/ClashMetaForAndroid\">https://github.com/MetaCubeX/ClashMetaForAndroid</a></p>\n<p>健壮内核<br>v2ray：<a href=\"https://github.com/v2fly/v2ray-core\">https://github.com/v2fly/v2ray-core</a><br>xray：<a href=\"https://github.com/XTLS/Xray-core\">https://github.com/XTLS/Xray-core</a><br>sing-box：<a href=\"https://github.com/SagerNet/sing-box\">https://github.com/SagerNet/sing-box</a><br>hysteria（人在国外）：<a href=\"https://github.com/apernet/hysteria\">https://github.com/apernet/hysteria</a></p>\n<p>还有各类小众内核，例如 naiveproxy，橘子汁等</p>\n<p>还能使用哪些客户端<br>基于 clash 内核的<br>比如 clash for windows，clash for android 等基于 clash 的客户端大家可以不用了，内核都删库了。</p>\n<p>基于 clash.meta 内核的<br>clash.meta 内核目前来说大概率就是避避风头，我猜测后续还是继续开发的，目前来说基于 meta 的客户端，大家还是可以放心使用</p>\n<p>Clash Verge（全平台 - 归档但不影响）：<a href=\"https://github.com/zzzgydi/clash-verge\">https://github.com/zzzgydi/clash-verge</a></p>\n<p>clashX.meta(macos):<a href=\"https://github.com/MetaCubeX/ClashX.Meta\">https://github.com/MetaCubeX/ClashX.Meta</a></p>\n<p>clash.meta for android（android - 归档但不影响）：<a href=\"https://github.com/MetaCubeX/ClashMetaForAndroid\">https://github.com/MetaCubeX/ClashMetaForAndroid</a></p>\n<p>其他<br>v2rayN (人在国外 - windows）：<a href=\"https://github.com/2dust/v2rayN\">https://github.com/2dust/v2rayN</a></p>\n<p>sing-box（全平台）：<a href=\"https://github.com/SagerNet/sing-box/releases\">https://github.com/SagerNet/sing-box/releases</a></p>\n<p>nekoray（windows，linux）：<a href=\"https://github.com/MatsuriDayo/nekoray\">https://github.com/MatsuriDayo/nekoray</a></p>\n<p>shadowrocket，quanx，stash 等等付费或免费 ios 专用软件</p>\n<p>v2rayNG&#x2F;nekobox 等等 android 专用软件</p>\n<h2 id=\"本章节来源：https-blog-mareep-net-posts-20003\"><a href=\"#本章节来源：https-blog-mareep-net-posts-20003\" class=\"headerlink\" title=\"本章节来源：https://blog.mareep.net/posts/20003/\"></a>本章节来源：<a href=\"https://blog.mareep.net/posts/20003/\">https://blog.mareep.net/posts/20003/</a></h2><hr>\n<h1 id=\"Clash-for-Android\"><a href=\"#Clash-for-Android\" class=\"headerlink\" title=\"Clash for Android\"></a>Clash for Android</h1><p>Clash for Android GitHub 仓库地址为：<a href=\"https://github.com/Kr328/ClashForAndroid\">https://github.com/Kr328/ClashForAndroid</a></p>\n<p>Clash for Android 下载地址为：<a href=\"https://github.com/Kr328/ClashForAndroid/releases\">https://github.com/Kr328/ClashForAndroid/releases</a><br>备份线路(20231108待测试)：<a href=\"https://github.com/MetaCubeX/ClashMetaForAndroid/releases\">https://github.com/MetaCubeX/ClashMetaForAndroid/releases</a><br>已实测版本：cfa-2.5.12-foss-arm64-v8a-release.apk<br>新手使用建议下载最新稳定版本，即版本号后标记为 Latest 的版本。<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/95766b11-c8f3-4bb9-ba2b-1b5a758e0ed4/2OJRUc1jGqyxwKsIZQ2cPndYJwI1RCiueDa9u3LbC8HIexUWul2hMsujIg/deep/0/image.png></p>\n<h2 id=\"安装教程\"><a href=\"#安装教程\" class=\"headerlink\" title=\"安装教程\"></a>安装教程</h2><p>安装教程很简单，如果是通过应用商店下载的，那么直接根据提示下载并安装即可，如果是通过官网下载或其他第三方下载的，下载完后获得文件为 cfa_x-x-x.apk 文件，其中后缀 .apk 为安卓系统的安装包，然后点击安装即可，十分简单。</p>\n<h2 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a>节点</h2><p>节点即软件中的服务器，在使用之前，首先需要添加一个 Clash for Android 节点 即服务端才能使用代理上网功能，更多节点可参考本站节点订阅地址。</p>\n<h2 id=\"免费节点\"><a href=\"#免费节点\" class=\"headerlink\" title=\"免费节点\"></a>免费节点</h2><p>由于软件支持Shadowsocks、ShadowsocksR、Socks、Snell、V2Ray、Trojan等代理协议，如需免费节点可以使用搜索引擎搜索。</p>\n<h2 id=\"自己搭建节点\"><a href=\"#自己搭建节点\" class=\"headerlink\" title=\"自己搭建节点\"></a>自己搭建节点</h2><p>劝退绝大多数一般用户，需要资源，技术上有一定难度，还得有维护时间投入。<br>如果对稳定性要求高且有一定的技术基础，推荐自己搭建节点，速度有保证且安全性也最高，具体搭建教程可参考下面的链接。</p>\n<p>Shadowsocks 搭建 (SS)<br>ShadowsocksR 搭建 (SSR)<br>V2Ray 搭建 (VMess)<br>Trojan 搭建<br>使用教程<br>软件安装完成后，启动即可进入软件著见面，点击配置进入配置界面，如下图所示。<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/55a9a21b-3a28-4192-800a-4dca155c48ba/O3anuJ3ZUWk5KWpDZ_qt3KU4sdfczKkg61KOgYXkjiiOe1qJQPSZrHa-bg/deep/0/image.png></p>\n<h2 id=\"Clash-for-Android-配置见面\"><a href=\"#Clash-for-Android-配置见面\" class=\"headerlink\" title=\"Clash for Android 配置见面\"></a>Clash for Android 配置见面</h2><p>配置界面<br>点击软件右上角的 ➕ 键，添加配置文件，图下图所示，有两种添加配置文件的方式。<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/f0849aef-f0c7-44af-ac4c-0a9377f27c0c/NtKZeqso3ADKaBqLSn5s5_xFTmp7pMHDkjnOwsKEtEntji8tFa6HrAzQ4g/deep/0/image.png></p>\n<h2 id=\"Clash-for-Android-创建配置\"><a href=\"#Clash-for-Android-创建配置\" class=\"headerlink\" title=\"Clash for Android 创建配置\"></a>Clash for Android 创建配置</h2><p>创建配置<br>添加配置文件<br>添加配置文件一般有如下两种方式:</p>\n<p>文件：从文件导入，即从配置文件所在文件夹导入<br>URL：从URL导入，即从订阅连接获取配置<br>一般情况下，远程订阅地址（从URL导入）及本地配置文件（从配置文件所在文件夹导入）都由节点服务商提供。</p>\n<h2 id=\"Clash-for-Android-从-URL-导入配置文件\"><a href=\"#Clash-for-Android-从-URL-导入配置文件\" class=\"headerlink\" title=\"Clash for Android 从 URL 导入配置文件\"></a>Clash for Android 从 URL 导入配置文件</h2><p>远程订阅地址<br>远程订阅地址即从 URL 导入，从订阅连接获取配置，如下图所示。<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/156770bf-f96a-474d-928e-076e8fe1fdff/AVXWtOPh6ebIyNCiesN7vd0MPY2G1pM2GbKGQQWvcjYxagdlNaGSKWPSqw/deep/0/image.png></p>\n<p>此章节参考：<br><a href=\"https://clashforandroid.org/clash-for-android-download/\">https://clashforandroid.org/clash-for-android-download/</a></p>\n<hr>\n<hr>\n<h1 id=\"Clash-for-OpenWrt\"><a href=\"#Clash-for-OpenWrt\" class=\"headerlink\" title=\"Clash for OpenWrt\"></a>Clash for OpenWrt</h1><p>openwrt的clash版本： OpenClash<br>一个运行在 OpenWrt 上的 Clash 客户端，兼容 Shadowsocks(R)、Vmess、Trojan、Snell 等协议，根据灵活的规则配置实现策略代理 </p>\n<p>建议是最好把Clash for OpenWrt安装在做为旁路由的OpenWrt上；<br>如果是主路由上安装并启动了Clash for OpenWrt的话，经过路由器上所有的流量都会被按IP地址的归属地来自动分配到特定的代理节点上。<br>而如果本机（比如是电脑端）也运行着Clash for Window（不管如何配置），这会导致：本机走本机Clash for Window的出口出国数据（连接国外的节点本身的数据），流经主路由上时，又被主路由上的Clash for OpenWrt节点二次代理了一下，等于代理又套了一个代理。<br>好复杂的概念，有点难理解，通过观察：Clash for OpenWrt面板中的连接监控和本机Clash for Window中的连接监控上能看出来<br>间接实现了GOST代理链的功能</p>\n<hr>\n<hr>\n<h1 id=\"Sample-Profile\"><a href=\"#Sample-Profile\" class=\"headerlink\" title=\"Sample Profile\"></a>Sample Profile</h1><p>包含一些额外功能：全球拦截，应用净化和全球直连（DIRECT）等<br>特点：国外IP的目的地，都被分流走代理了；其实很多未被墙的目的地直达是更快的解决方案</p>\n<details class=\"note \"><summary><p>配置文件范例</p>\n</summary>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mixed-port:</span> <span class=\"number\">7890</span></span><br><span class=\"line\"><span class=\"attr\">allow-lan:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">log-level:</span> <span class=\"string\">info</span></span><br><span class=\"line\"><span class=\"string\">。。。</span></span><br><span class=\"line\"><span class=\"string\">文件内容已保存为config_clashSample.yaml文件，存放在分享网盘中：https://cn.carlzeng.top/fileupd</span></span><br></pre></td></tr></table></figure>\n\n</details>\n\n<p>存放在分享网盘中：<a href=\"https://cn.carlzeng.top/fileupd\">https://cn.carlzeng.top/fileupd</a></p>\n<hr>\n<h1 id=\"Clash-for-Linux\"><a href=\"#Clash-for-Linux\" class=\"headerlink\" title=\"Clash for Linux\"></a>Clash for Linux</h1><p><a href=\"https://github.com/junxy/docker-clash/blob/master/docker-compose.yml\">https://github.com/junxy/docker-clash/blob/master/docker-compose.yml</a></p>\n<h1 id=\"Clash-Verge-MAC\"><a href=\"#Clash-Verge-MAC\" class=\"headerlink\" title=\"Clash Verge (MAC)\"></a>Clash Verge (MAC)</h1><p>好用</p>\n<p>Mac 端切换成功：Clash.Verge_1.3.8_x64.dmg   28.8 MB   last month</p>\n<p>MAC苹果电脑端：从272M的Clash for Windows.app替换成81M的Clash Verge.app</p>\n<p>效果非常赞，配置文件是前后通用的，这个太人性化了，再赞</p>\n<h2 id=\"Clash-Verge-更新配置文件步骤（MAC）\"><a href=\"#Clash-Verge-更新配置文件步骤（MAC）\" class=\"headerlink\" title=\"Clash Verge 更新配置文件步骤（MAC）\"></a>Clash Verge 更新配置文件步骤（MAC）</h2><pre><code>1. 打开主界面，左侧的，配置 &gt; 新建\n</code></pre>\n<p>​\t2. 选择 类型为：Local，然后点击‘选择文件’，找到本地proxypool生成的配置文件即可。<br>​\t\t与原来Clash配置文件的区别是，开头多了：mixed-port: 7890   secret: @@@@</p>\n<h1 id=\"MetaCubeX-metacubexd-Debian\"><a href=\"#MetaCubeX-metacubexd-Debian\" class=\"headerlink\" title=\"MetaCubeX&#x2F;metacubexd (Debian)\"></a>MetaCubeX&#x2F;metacubexd (Debian)</h1><p>好用！赞！</p>\n<p><a href=\"https://github.com/MetaCubeX/metacubexd/tree/main\">https://github.com/MetaCubeX/metacubexd/tree/main</a></p>\n<p>MetaCubeX UI 局域网访问： <a href=\"http://192.168.6.116:9090/#/setup\">http://192.168.6.116:9090/#/setup</a><br>    后端地址及端口：<a href=\"http://192.168.6.116:9091/\">http://192.168.6.116:9091</a><br>    后端密码：    ********<br>对应config.yaml中的配置；在Docker里面跑起来，稳定</p>\n<h2 id=\"设置Clash-Meta的配置文件步骤（Debian）\"><a href=\"#设置Clash-Meta的配置文件步骤（Debian）\" class=\"headerlink\" title=\"设置Clash Meta的配置文件步骤（Debian）\"></a>设置Clash Meta的配置文件步骤（Debian）</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 打开debian的/root/.config/clash</span><br><span class=\"line\"> ​\t\tdocker-compose中的映射 - /root/.config/clash:/root/.config/clash</span><br><span class=\"line\"> ​\t\t所以配置文件指向了：/root/.config/clash</span><br><span class=\"line\"> ​\t2. 替换config.yaml到最新版配置文件</span><br><span class=\"line\"> ​\t3. cd /www/server/panel/data/compose/metacubexd</span><br><span class=\"line\"> ​\t4. docker-compose restart</span><br><span class=\"line\"> ​\t5. 检测状态：http://192.168.6.116:9090/<span class=\"comment\">#/proxies</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">2. 维护新的Clash Meta的config.yaml配置文件步骤：</span><br><span class=\"line\"> \t1. (用途：剔除特定服务器，它的tcp可以通，但无法*墙)</span><br><span class=\"line\"> \t2. 进server 的ssh</span><br><span class=\"line\"> \t3.  vi /root/.config/clash/config.yaml</span><br><span class=\"line\"> \t4. cd /www/server/panel/data/compose/metacubexd</span><br><span class=\"line\"> \t5. docker-compose restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"维护Clash-Meta新的config-yaml配置\"><a href=\"#维护Clash-Meta新的config-yaml配置\" class=\"headerlink\" title=\"维护Clash Meta新的config.yaml配置\"></a>维护Clash Meta新的config.yaml配置</h2><p>操作步骤：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. (用途：剔除特定服务器，它的tcp可以通，但无法*墙)</span><br><span class=\"line\">2. 进server 的ssh</span><br><span class=\"line\">3. vi /root/.config/clash/config.yaml （或用BT等工具编辑文件内容，用以符合http://127.0.0.1:443/clash/proxies）</span><br><span class=\"line\">4. cd /www/server/panel/data/compose/metacubexd &amp;&amp; docker-compose restart</span><br><span class=\"line\">5. <span class=\"section\">[Optional]</span>打开web ui http://192.168.6.116:9090/<span class=\"comment\">#/proxies，点击测速按钮</span></span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\">也可以直接在BT中界面化手动操作：</span><br><span class=\"line\">1. 更新config.yaml文件内容 </span><br><span class=\"line\">\t1.1 界面 https://192.168.6.116:36430/files</span><br><span class=\"line\">\t1.2 目录路径 /root/.config/clash</span><br><span class=\"line\">\t1.3 替换config.yaml文件内容</span><br><span class=\"line\">2. 重启连个docker：meta 和 metacubexd</span><br><span class=\"line\">\t2.1 界面 https://192.168.6.116:36430/docker</span><br></pre></td></tr></table></figure>\n","more":"<iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://c.carlzeng.top:3/web\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"600\"></iframe>\n\n<h1 id=\"1-下载与安装\"><a href=\"#1-下载与安装\" class=\"headerlink\" title=\"1. 下载与安装\"></a>1. 下载与安装</h1><p>   访问 <a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">Clash for Windows 官方 Github Releases [已失效]</a> 或搜索 Repo 更新网站下载客户端<br>   对于 Windows，下载 Clash.for.Windows.Setup.版本号.exe 文件，不要下载带 arm64 字样的 exe 运行文件<br>   对于 MacOS，下载 Clash.for.Windows-版本号.dmg 文件。<br>   对于 Andriod, 下载等等请参见下方 Clash for Android 章节。</p>\n<p>在 Windows 上，直接双击 exe 文件进行安装。如果提示“阻止了无法识别的应用启动”，请点击“更多信息”，然后再点击“仍要运行”进行安装。</p>\n<p>说明书：<a href=\"https://stash.wiki/en/proxy-protocols/proxy-groups\">https://stash.wiki/en/proxy-protocols/proxy-groups</a></p>\n<h2 id=\"1-1-下载地址二\"><a href=\"#1-1-下载地址二\" class=\"headerlink\" title=\"1.1 下载地址二\"></a>1.1 下载地址二</h2><p>   v2rayN永久更新地址<br>   <a href=\"https://github.com/2dust/v2rayN/releases\">https://github.com/2dust/v2rayN/releases</a></p>\n<p>   Clash永久更新地址<br>   <a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p>\n<h1 id=\"2-获取配置\"><a href=\"#2-获取配置\" class=\"headerlink\" title=\"2. 获取配置\"></a>2. 获取配置</h1><p>   登入客户中心后，依次访问“产品服务” &gt; “我的产品与服务”(点击前往)，以查看 Trojan 服务对应的服务器信息。</p>\n<p>在产品详情页面，获取 Clash 服务器的订阅链接。</p>\n<img data-src=\"https://i.loli.net/2020/06/16/BSEwKabNtpd2OZM.png\" alt=\"portal-clash-get-link.png\" width=\"822\" height=\"107\" />\n\n<p>点击 ClashX 配置对应的获取地址，在弹出的窗口中，复制订阅链接。</p>\n<p>请注意，订阅链接与您的密码一样重要，请勿分享给他人。如果不慎泄露，请在产品详情页面重置链接，并提交工单申请重置服务密码。</p>\n<h1 id=\"3-添加配置\"><a href=\"#3-添加配置\" class=\"headerlink\" title=\"3. 添加配置\"></a>3. 添加配置</h1><p>   3.1 Clash 主界面介绍<br>   安装后，在 Windows 上，您可以通过双击通知区域的 Clash for Windows 图标来打开主界面。</p>\n<img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-home.png\" alt=\"cfw-home.png\" width=\"100%\" />\n\n<p>首先，打开“Profiles”配置选择页面，然后进行配置文件的添加。</p>\n<h2 id=\"3-1-通过链接直接添加\"><a href=\"#3-1-通过链接直接添加\" class=\"headerlink\" title=\"3.1 通过链接直接添加\"></a>3.1 通过链接直接添加</h2><p>复制获取配置步骤中得到的订阅链接，粘贴到“Download from a URL”输入框中，然后点击右侧的“Download”按钮。</p>\n<p>如果显示“Success!”，则表示成功添加了配置文件，并且在下面会多出一个配置。点击该配置，可以切换到对应的配置。</p>\n<p><img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-add-config-link.png\" alt=\"cfw-add-config-link.png\" width=\"100%\" /></p>\n<p><img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-add-config-link-done.png\" alt=\"cfw-add-config-link-done.png\" width=\"100%\" /></p>\n\n<h1 id=\"4-Clash-代理使用介绍\"><a href=\"#4-Clash-代理使用介绍\" class=\"headerlink\" title=\"4. Clash 代理使用介绍\"></a>4. Clash 代理使用介绍</h1><h2 id=\"4-1-开启系统代理与开机启动\"><a href=\"#4-1-开启系统代理与开机启动\" class=\"headerlink\" title=\"4.1 开启系统代理与开机启动\"></a>4.1 开启系统代理与开机启动</h2><p>   首先，打开“General”页面，开启系统代理和开机自动启动，然后打开“Proxies”代理服务器选择页面。</p>\n<img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-set-system-proxy.png\" alt=\"cfw-set-system-proxy.png\" />\n\n<p>在“Proxies”页面中，点击“Global”标签。确保全局规则选择不是“DIRECT”（选择“DIRECT”表示不使用代理），可以选择“AUTO”（自动选择节点）或者直接选择自己想要使用的节点。</p>\n<img data-src=\"https://i.loli.net/2021/09/13/1DhxmedGlP7NRcV.png\" alt=\"cfw-select-node.png\" width=\"100%\" height />\n\n<p>选择节点后可能不会立即生效。建议返回“General”页面，点击“Clash for Windows”字样，通过快速重启客户端重新载入配置。</p>\n<p>此时，Clash已经通过设置系统代理的方式开始工作，使用系统代理的软件已经可以正常使用。可以使用IE &#x2F; EDGE &#x2F; Safari访问 <a href=\"https://www.google.com/\">https://www.google.com</a> 进行测试。</p>\n<h2 id=\"4-2-Global-全局规则选项\"><a href=\"#4-2-Global-全局规则选项\" class=\"headerlink\" title=\"4.2 Global 全局规则选项\"></a>4.2 Global 全局规则选项</h2><p>Global 页面是用于设置 Clash 的代理规则，即设置 Clash 如何处理访问请求。</p>\n<p>Direct 表示直接连接，不使用代理。<br><img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-rule-direct.png\" alt=\"cfw-rule-direct.png\" /><br>Reject 表示全部拒绝访问。<br><img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-rule-reject.png\" alt=\"cfw-rule-reject.png\" /><br>其他直接选中节点表示所有请求都会通过代理，类似于 Shadowsocks 的全局模式。<br>而选择 Global 页面右侧的 Rule 标签，则表示使用的是自动切换模式，类似于其他软件的 PAC 模式。</p>\n<h1 id=\"5-Chrome-Edge-Firefox-配合-SwitchyOmega-扩展\"><a href=\"#5-Chrome-Edge-Firefox-配合-SwitchyOmega-扩展\" class=\"headerlink\" title=\"5. Chrome &#x2F; Edge &#x2F; Firefox 配合 SwitchyOmega 扩展\"></a>5. Chrome &#x2F; Edge &#x2F; Firefox 配合 SwitchyOmega 扩展</h1><p>   如果不想使用客户端的系统代理，您可以通过安装浏览器扩展来使用 Clash。（支持 Chrome &#x2F; Firefox &#x2F; 新版 Edge 浏览器）</p>\n<p>设置方法请参考：Chrome &#x2F; Edge &#x2F; Firefox 安装 Proxy SwitchyOmega 扩展使用</p>\n<p>由于扩展中代理模式对应客户端的端口为 1080，需要修改为 Clash 对应的 7890，请按照下图进行修改：</p>\n<img data-src=\"https://repo.yizhihongxing.app/images/trojan/clash-win/cfw-swo-port.png\" alt=\"cfw-swo-port.png\" />\n\n<hr>\n<p>来源<br>【Windows &#x2F; macOS】 Clash for Windows 设置方法<br><a href=\"https://order.yizhihongxing.org/index.php?rp=/knowledgebase/27/\">https://order.yizhihongxing.org/index.php?rp=/knowledgebase/27/</a><br><a href=\"https://order.yizhihongxing.org/index.php?rp=/knowledgebase/13/\">https://order.yizhihongxing.org/index.php?rp=/knowledgebase/13/</a></p>\n<h1 id=\"Clash配置文件之-策略组\"><a href=\"#Clash配置文件之-策略组\" class=\"headerlink\" title=\"Clash配置文件之 策略组\"></a>Clash配置文件之 策略组</h1><p>策略组有：延迟最低、故障转移、手动选择、负载均衡 四种模式。<br>对应type：url-test、fallback、select、load-balance 和 relay</p>\n<ul>\n<li><p>延迟最低，顾名思义，每隔一段时间进行延迟测试，选择延迟最低的节点。</p>\n</li>\n<li><p>故障转移，每次都选组内第一个节点，无法使用再换到第二个，依次类推。</p>\n</li>\n<li><p>手动选择，顾名思义，没有特殊功能。</p>\n</li>\n<li><p>负载均衡，每个节点都用用，由于很多机场都有连接数的限制，因此实际使用较少。</p>\n</li>\n<li><p>链式代理, 实现GOST代理链功能，即指定数据流的数据链，比如：节点A-》B-》C-》Internet</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Clash-for-Windows-在Mac-OSX下使用经验\"><a href=\"#Clash-for-Windows-在Mac-OSX下使用经验\" class=\"headerlink\" title=\"Clash for Windows 在Mac OSX下使用经验\"></a>Clash for Windows 在Mac OSX下使用经验</h2><ul>\n<li>在Mac电脑上，Clash for Windows的定时检测服务器功能（对于经常需要检测服务器可用性的个人用户很实用）<br>需要一直开着UI界面，才能正常检测；（也就是说，如果把所有窗口都最小化了，定时检测服务可用性的功能就关闭了）<br>可以把窗口拉到最左或者上角的方式，漏出一小角，也算是一直看着窗口。<br>定时检测服务可用性，结果可以显示可用服务器和连接的毫秒数值。</li>\n<li>最新的经验是通过修改订阅的配置文件，解决了上面这个尴尬；请看修改过的Profile内容节选：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy-groups:</span><br><span class=\"line\">- name: loadbalance1</span><br><span class=\"line\">  type: url-test</span><br><span class=\"line\">  proxies:</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   url: https://clients3.google.com/generate_204</span><br><span class=\"line\">   interval: 300</span><br></pre></td></tr></table></figure>\n把 type 修改为 url-test;</li>\n</ul>\n<p>原先求负载均衡的值是：type: load-balance</p>\n<p>详解解释参见：<a href=\"https://www.carlzeng.top/202310011555.html?highlight=clash+load+balance#proxypool-%E6%97%A0%E6%B3%95%E6%8A%93%E5%8F%96%E5%BD%93%E5%89%8D%E8%87%AA%E5%B7%B1%E6%9C%AC%E6%9C%BA%E8%BF%90%E8%A1%8C%E7%9A%84%E5%8F%AF%E7%94%A8%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8C\">Clash load balance 方案中，服务器群，如何对新连接，会优先选择测速最快的节点？</a></p>\n<h3 id=\"这个-interval-300-每5分钟可能太过于频繁了\"><a href=\"#这个-interval-300-每5分钟可能太过于频繁了\" class=\"headerlink\" title=\"这个 interval: 300 每5分钟可能太过于频繁了\"></a>这个 interval: 300 每5分钟可能太过于频繁了</h3><p>导致节点经常现实Timeout，可是仍然是可以使用的，这代表是轮询过于频繁了？<br>而测试过600（10分钟）又太缓慢了，现修改为450；继续测试</p>\n<p>另外一个因素出现在这URL Test的目的地：<a href=\"https://clients3.google.com/generate_204\">https://clients3.google.com/generate_204</a><br>这个目的地出现问题会导致测速结果都是错误的，导致误判。</p>\n<p>另外这个URL Test的原理是：从代理服务器到达URLTest测试服务器的延时。<br>现实情况中：我遇到了这个URLTest延时小而访问Google速度反而慢的情况，听上去很不合理，其实理解了原理以后我们知道：还有一个速度至关重要，就是你的PC或手机到达这个代理服务器的速度，然后才是代理服务器往返最终的目的地服务器的速度。<br>根据你的宽带出口出国的速度：日本，美国西部海岸，香港，新加坡，台湾；这些服务器相对较近，延迟小；<br>最普普通通的搬瓦工也会在500ms左右。</p>\n<h2 id=\"那么如何知道速度最快的服务器节点？\"><a href=\"#那么如何知道速度最快的服务器节点？\" class=\"headerlink\" title=\"那么如何知道速度最快的服务器节点？\"></a>那么如何知道速度最快的服务器节点？</h2><p>TCP Ping的延时 + URL Test的延时最小的节点，是最快的。显然Clash还没有这个机制&#x2F;算法。<br>那么那个软件可以实现这种两个维度的定时轮询，自动跳转节点呢？</p>\n<p>clash for window 根据ip地址来决定线路<br>PC或MAC端的，可以通过配置文件，来按IP地址的归属地来走不同的节点，分流。</p>\n<p>完美情况：<br>负载均衡算法：如果按IP地址归属地的分流，可以再根据目的地IP地址的归属，自动选择距离其最近的节点来分流各个数据包的流量。这样速度就会有质的提升吧。。？</p>\n<p>不清楚目前负载均衡的算法时怎么负载的，明显不能根据浏览器的不同域名来分流的，观察到Clash for Window具体连接界面，往往是（目测）第一个节点（最快）被分配了95%以上流量。</p>\n<p>优化配置文件，增加<br>      域名类：全球拦截，应用净化<br>      IP类：全球直连（DIRECT）</p>\n<h4 id=\"URL-Test-地址\"><a href=\"#URL-Test-地址\" class=\"headerlink\" title=\"URL Test 地址\"></a>URL Test 地址</h4><ul>\n<li><p>HTTPS<br><a href=\"https://gstatic.com/generate_204\">https://gstatic.com/generate_204</a><br><a href=\"https://clients3.google.com/generate_204\">https://clients3.google.com/generate_204</a><br><a href=\"https://cp.cloudflare.com/\">https://cp.cloudflare.com</a><br><a href=\"https://detectportal.firefox.com/success.txt\">https://detectportal.firefox.com/success.txt</a></p>\n</li>\n<li><p>HTTP<br><a href=\"http://www.msftconnecttest.com/connecttest.txt\">http://www.msftconnecttest.com/connecttest.txt</a><br><a href=\"http://gstatic.com/generate_204\">http://gstatic.com/generate_204</a><br><a href=\"http://www.gstatic.com/generate_204\">http://www.gstatic.com/generate_204</a><br><a href=\"http://clients3.google.com/generate_204\">http://clients3.google.com/generate_204</a><br><a href=\"http://cp.cloudflare.com/\">http://cp.cloudflare.com</a><br><a href=\"http://detectportal.firefox.com/success.txt\">http://detectportal.firefox.com/success.txt</a></p>\n</li>\n</ul>\n<h2 id=\"各个平台与构架\"><a href=\"#各个平台与构架\" class=\"headerlink\" title=\"各个平台与构架\"></a>各个平台与构架</h2><p>其他版本下载<br>Clash for Android MacOS 版名为 ClashX，可移步至 ClashX 下载并查看详细教程。<br>Clash for Android Windows 版名为 Clash for Windows，可移步至 Clash for Windows 下载并查看详细教程。<br>软路由 OpenWRT 版名为 OpenClash，可移步至 OpenClash 下载并查看详细教程。</p>\n<h2 id=\"url-test-策略之tolerance设置\"><a href=\"#url-test-策略之tolerance设置\" class=\"headerlink\" title=\"url-test 策略之tolerance设置\"></a>url-test 策略之tolerance设置</h2><p>tolerance字段表示速度切换的阈值（以毫秒为单位），这里设置为500毫秒。<br>    根据上述配置，Clash会定期测试proxy1、proxy2和proxy3的速度，并根据速度切换节点。如果某个节点的速度超过当前节点速度加上阈值（即当前节点速度+500毫秒），则会切换到速度更快的节点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下是一个示例配置，演示了如何设置自动切换节点的速度阈值：</span><br><span class=\"line\"></span><br><span class=\"line\">proxy-groups:</span><br><span class=\"line\">  - name: my-proxy-group</span><br><span class=\"line\">    type: url-test</span><br><span class=\"line\">    proxies:</span><br><span class=\"line\">      - proxy1</span><br><span class=\"line\">      - proxy2</span><br><span class=\"line\">      - proxy3</span><br><span class=\"line\">    url: http://www.example.com</span><br><span class=\"line\">    interval: 300</span><br><span class=\"line\">    timeout: 2000</span><br><span class=\"line\">    tolerance: 500</span><br><span class=\"line\">在上述示例中，proxy-groups中的type设置为url-test，并定义了一个名为my-proxy-group的代理组。proxies中列出了要测试速度的节点名称，例如proxy1、proxy2和proxy3。url字段指定了用于测试节点速度的URL，这里使用了http://www.example.com作为示例。interval字段表示测试的时间间隔（以秒为单位），这里设置为300秒（即5分钟）。timeout字段表示测试的超时时间（以毫秒为单位），这里设置为2000毫秒（即2秒）。tolerance字段表示速度切换的阈值（以毫秒为单位），这里设置为500毫秒。</span><br><span class=\"line\"></span><br><span class=\"line\">根据上述配置，Clash会定期测试proxy1、proxy2和proxy3的速度，并根据速度切换节点。如果某个节点的速度超过当前节点速度加上阈值（即当前节点速度+500毫秒），则会切换到速度更快的节点。</span><br></pre></td></tr></table></figure>\n\n<p>实际使用中，将tolerance设置为300，可以防止不停切换服务器的尴尬（事实上，偶尔会切换到无效的节点上）</p>\n<p>有待进一步观察…</p>\n<blockquote>\n<p>经过几周实践测验: tolerance 非常实用！</p>\n<p>节省人力去不停维护一堆的服务器列表（有些url-test成功，可是实际无法使用的节点）</p>\n</blockquote>\n<hr>\n<hr>\n<h2 id=\"汇总目前常用的内核仓库和客户端\"><a href=\"#汇总目前常用的内核仓库和客户端\" class=\"headerlink\" title=\"汇总目前常用的内核仓库和客户端\"></a>汇总目前常用的内核仓库和客户端</h2><p>clash for windows 客户端：</p>\n<p><a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p>\n<p>clash 内核：</p>\n<p><a href=\"https://github.com/Dreamacro/clash\">https://github.com/Dreamacro/clash</a></p>\n<p>clash for android 客户端：</p>\n<p><a href=\"https://github.com/Kr328/ClashForAndroid\">https://github.com/Kr328/ClashForAndroid</a></p>\n<p>归档<br>clash.meta 内核（主分支设置成 rm 分支，官网和群组换成虚空题材）:</p>\n<p><a href=\"https://github.com/MetaCubeX/Clash.Meta/\">https://github.com/MetaCubeX/Clash.Meta/</a></p>\n<p>tuic 内核（停止维护）:</p>\n<p><a href=\"https://github.com/EAimTY/tuic\">https://github.com/EAimTY/tuic</a></p>\n<p>clash verge 客户端（主分支设置成 rm 分支）：</p>\n<p><a href=\"https://github.com/zzzgydi/clash-verge/\">https://github.com/zzzgydi/clash-verge/</a></p>\n<p>clash for android：</p>\n<p><a href=\"https://github.com/MetaCubeX/ClashMetaForAndroid\">https://github.com/MetaCubeX/ClashMetaForAndroid</a></p>\n<p>健壮内核<br>v2ray：<a href=\"https://github.com/v2fly/v2ray-core\">https://github.com/v2fly/v2ray-core</a><br>xray：<a href=\"https://github.com/XTLS/Xray-core\">https://github.com/XTLS/Xray-core</a><br>sing-box：<a href=\"https://github.com/SagerNet/sing-box\">https://github.com/SagerNet/sing-box</a><br>hysteria（人在国外）：<a href=\"https://github.com/apernet/hysteria\">https://github.com/apernet/hysteria</a></p>\n<p>还有各类小众内核，例如 naiveproxy，橘子汁等</p>\n<p>还能使用哪些客户端<br>基于 clash 内核的<br>比如 clash for windows，clash for android 等基于 clash 的客户端大家可以不用了，内核都删库了。</p>\n<p>基于 clash.meta 内核的<br>clash.meta 内核目前来说大概率就是避避风头，我猜测后续还是继续开发的，目前来说基于 meta 的客户端，大家还是可以放心使用</p>\n<p>Clash Verge（全平台 - 归档但不影响）：<a href=\"https://github.com/zzzgydi/clash-verge\">https://github.com/zzzgydi/clash-verge</a></p>\n<p>clashX.meta(macos):<a href=\"https://github.com/MetaCubeX/ClashX.Meta\">https://github.com/MetaCubeX/ClashX.Meta</a></p>\n<p>clash.meta for android（android - 归档但不影响）：<a href=\"https://github.com/MetaCubeX/ClashMetaForAndroid\">https://github.com/MetaCubeX/ClashMetaForAndroid</a></p>\n<p>其他<br>v2rayN (人在国外 - windows）：<a href=\"https://github.com/2dust/v2rayN\">https://github.com/2dust/v2rayN</a></p>\n<p>sing-box（全平台）：<a href=\"https://github.com/SagerNet/sing-box/releases\">https://github.com/SagerNet/sing-box/releases</a></p>\n<p>nekoray（windows，linux）：<a href=\"https://github.com/MatsuriDayo/nekoray\">https://github.com/MatsuriDayo/nekoray</a></p>\n<p>shadowrocket，quanx，stash 等等付费或免费 ios 专用软件</p>\n<p>v2rayNG&#x2F;nekobox 等等 android 专用软件</p>\n<h2 id=\"本章节来源：https-blog-mareep-net-posts-20003\"><a href=\"#本章节来源：https-blog-mareep-net-posts-20003\" class=\"headerlink\" title=\"本章节来源：https://blog.mareep.net/posts/20003/\"></a>本章节来源：<a href=\"https://blog.mareep.net/posts/20003/\">https://blog.mareep.net/posts/20003/</a></h2><hr>\n<h1 id=\"Clash-for-Android\"><a href=\"#Clash-for-Android\" class=\"headerlink\" title=\"Clash for Android\"></a>Clash for Android</h1><p>Clash for Android GitHub 仓库地址为：<a href=\"https://github.com/Kr328/ClashForAndroid\">https://github.com/Kr328/ClashForAndroid</a></p>\n<p>Clash for Android 下载地址为：<a href=\"https://github.com/Kr328/ClashForAndroid/releases\">https://github.com/Kr328/ClashForAndroid/releases</a><br>备份线路(20231108待测试)：<a href=\"https://github.com/MetaCubeX/ClashMetaForAndroid/releases\">https://github.com/MetaCubeX/ClashMetaForAndroid/releases</a><br>已实测版本：cfa-2.5.12-foss-arm64-v8a-release.apk<br>新手使用建议下载最新稳定版本，即版本号后标记为 Latest 的版本。<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/95766b11-c8f3-4bb9-ba2b-1b5a758e0ed4/2OJRUc1jGqyxwKsIZQ2cPndYJwI1RCiueDa9u3LbC8HIexUWul2hMsujIg/deep/0/image.png></p>\n<h2 id=\"安装教程\"><a href=\"#安装教程\" class=\"headerlink\" title=\"安装教程\"></a>安装教程</h2><p>安装教程很简单，如果是通过应用商店下载的，那么直接根据提示下载并安装即可，如果是通过官网下载或其他第三方下载的，下载完后获得文件为 cfa_x-x-x.apk 文件，其中后缀 .apk 为安卓系统的安装包，然后点击安装即可，十分简单。</p>\n<h2 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a>节点</h2><p>节点即软件中的服务器，在使用之前，首先需要添加一个 Clash for Android 节点 即服务端才能使用代理上网功能，更多节点可参考本站节点订阅地址。</p>\n<h2 id=\"免费节点\"><a href=\"#免费节点\" class=\"headerlink\" title=\"免费节点\"></a>免费节点</h2><p>由于软件支持Shadowsocks、ShadowsocksR、Socks、Snell、V2Ray、Trojan等代理协议，如需免费节点可以使用搜索引擎搜索。</p>\n<h2 id=\"自己搭建节点\"><a href=\"#自己搭建节点\" class=\"headerlink\" title=\"自己搭建节点\"></a>自己搭建节点</h2><p>劝退绝大多数一般用户，需要资源，技术上有一定难度，还得有维护时间投入。<br>如果对稳定性要求高且有一定的技术基础，推荐自己搭建节点，速度有保证且安全性也最高，具体搭建教程可参考下面的链接。</p>\n<p>Shadowsocks 搭建 (SS)<br>ShadowsocksR 搭建 (SSR)<br>V2Ray 搭建 (VMess)<br>Trojan 搭建<br>使用教程<br>软件安装完成后，启动即可进入软件著见面，点击配置进入配置界面，如下图所示。<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/55a9a21b-3a28-4192-800a-4dca155c48ba/O3anuJ3ZUWk5KWpDZ_qt3KU4sdfczKkg61KOgYXkjiiOe1qJQPSZrHa-bg/deep/0/image.png></p>\n<h2 id=\"Clash-for-Android-配置见面\"><a href=\"#Clash-for-Android-配置见面\" class=\"headerlink\" title=\"Clash for Android 配置见面\"></a>Clash for Android 配置见面</h2><p>配置界面<br>点击软件右上角的 ➕ 键，添加配置文件，图下图所示，有两种添加配置文件的方式。<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/f0849aef-f0c7-44af-ac4c-0a9377f27c0c/NtKZeqso3ADKaBqLSn5s5_xFTmp7pMHDkjnOwsKEtEntji8tFa6HrAzQ4g/deep/0/image.png></p>\n<h2 id=\"Clash-for-Android-创建配置\"><a href=\"#Clash-for-Android-创建配置\" class=\"headerlink\" title=\"Clash for Android 创建配置\"></a>Clash for Android 创建配置</h2><p>创建配置<br>添加配置文件<br>添加配置文件一般有如下两种方式:</p>\n<p>文件：从文件导入，即从配置文件所在文件夹导入<br>URL：从URL导入，即从订阅连接获取配置<br>一般情况下，远程订阅地址（从URL导入）及本地配置文件（从配置文件所在文件夹导入）都由节点服务商提供。</p>\n<h2 id=\"Clash-for-Android-从-URL-导入配置文件\"><a href=\"#Clash-for-Android-从-URL-导入配置文件\" class=\"headerlink\" title=\"Clash for Android 从 URL 导入配置文件\"></a>Clash for Android 从 URL 导入配置文件</h2><p>远程订阅地址<br>远程订阅地址即从 URL 导入，从订阅连接获取配置，如下图所示。<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/156770bf-f96a-474d-928e-076e8fe1fdff/AVXWtOPh6ebIyNCiesN7vd0MPY2G1pM2GbKGQQWvcjYxagdlNaGSKWPSqw/deep/0/image.png></p>\n<p>此章节参考：<br><a href=\"https://clashforandroid.org/clash-for-android-download/\">https://clashforandroid.org/clash-for-android-download/</a></p>\n<hr>\n<hr>\n<h1 id=\"Clash-for-OpenWrt\"><a href=\"#Clash-for-OpenWrt\" class=\"headerlink\" title=\"Clash for OpenWrt\"></a>Clash for OpenWrt</h1><p>openwrt的clash版本： OpenClash<br>一个运行在 OpenWrt 上的 Clash 客户端，兼容 Shadowsocks(R)、Vmess、Trojan、Snell 等协议，根据灵活的规则配置实现策略代理 </p>\n<p>建议是最好把Clash for OpenWrt安装在做为旁路由的OpenWrt上；<br>如果是主路由上安装并启动了Clash for OpenWrt的话，经过路由器上所有的流量都会被按IP地址的归属地来自动分配到特定的代理节点上。<br>而如果本机（比如是电脑端）也运行着Clash for Window（不管如何配置），这会导致：本机走本机Clash for Window的出口出国数据（连接国外的节点本身的数据），流经主路由上时，又被主路由上的Clash for OpenWrt节点二次代理了一下，等于代理又套了一个代理。<br>好复杂的概念，有点难理解，通过观察：Clash for OpenWrt面板中的连接监控和本机Clash for Window中的连接监控上能看出来<br>间接实现了GOST代理链的功能</p>\n<hr>\n<hr>\n<h1 id=\"Sample-Profile\"><a href=\"#Sample-Profile\" class=\"headerlink\" title=\"Sample Profile\"></a>Sample Profile</h1><p>包含一些额外功能：全球拦截，应用净化和全球直连（DIRECT）等<br>特点：国外IP的目的地，都被分流走代理了；其实很多未被墙的目的地直达是更快的解决方案</p>\n<details class=\"note \"><summary><p>配置文件范例</p>\n</summary>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mixed-port:</span> <span class=\"number\">7890</span></span><br><span class=\"line\"><span class=\"attr\">allow-lan:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">log-level:</span> <span class=\"string\">info</span></span><br><span class=\"line\"><span class=\"string\">。。。</span></span><br><span class=\"line\"><span class=\"string\">文件内容已保存为config_clashSample.yaml文件，存放在分享网盘中：https://cn.carlzeng.top/fileupd</span></span><br></pre></td></tr></table></figure>\n\n</details>\n\n<p>存放在分享网盘中：<a href=\"https://cn.carlzeng.top/fileupd\">https://cn.carlzeng.top/fileupd</a></p>\n<hr>\n<h1 id=\"Clash-for-Linux\"><a href=\"#Clash-for-Linux\" class=\"headerlink\" title=\"Clash for Linux\"></a>Clash for Linux</h1><p><a href=\"https://github.com/junxy/docker-clash/blob/master/docker-compose.yml\">https://github.com/junxy/docker-clash/blob/master/docker-compose.yml</a></p>\n<h1 id=\"Clash-Verge-MAC\"><a href=\"#Clash-Verge-MAC\" class=\"headerlink\" title=\"Clash Verge (MAC)\"></a>Clash Verge (MAC)</h1><p>好用</p>\n<p>Mac 端切换成功：Clash.Verge_1.3.8_x64.dmg   28.8 MB   last month</p>\n<p>MAC苹果电脑端：从272M的Clash for Windows.app替换成81M的Clash Verge.app</p>\n<p>效果非常赞，配置文件是前后通用的，这个太人性化了，再赞</p>\n<h2 id=\"Clash-Verge-更新配置文件步骤（MAC）\"><a href=\"#Clash-Verge-更新配置文件步骤（MAC）\" class=\"headerlink\" title=\"Clash Verge 更新配置文件步骤（MAC）\"></a>Clash Verge 更新配置文件步骤（MAC）</h2><pre><code>1. 打开主界面，左侧的，配置 &gt; 新建\n</code></pre>\n<p>​\t2. 选择 类型为：Local，然后点击‘选择文件’，找到本地proxypool生成的配置文件即可。<br>​\t\t与原来Clash配置文件的区别是，开头多了：mixed-port: 7890   secret: @@@@</p>\n<h1 id=\"MetaCubeX-metacubexd-Debian\"><a href=\"#MetaCubeX-metacubexd-Debian\" class=\"headerlink\" title=\"MetaCubeX&#x2F;metacubexd (Debian)\"></a>MetaCubeX&#x2F;metacubexd (Debian)</h1><p>好用！赞！</p>\n<p><a href=\"https://github.com/MetaCubeX/metacubexd/tree/main\">https://github.com/MetaCubeX/metacubexd/tree/main</a></p>\n<p>MetaCubeX UI 局域网访问： <a href=\"http://192.168.6.116:9090/#/setup\">http://192.168.6.116:9090/#/setup</a><br>    后端地址及端口：<a href=\"http://192.168.6.116:9091/\">http://192.168.6.116:9091</a><br>    后端密码：    ********<br>对应config.yaml中的配置；在Docker里面跑起来，稳定</p>\n<h2 id=\"设置Clash-Meta的配置文件步骤（Debian）\"><a href=\"#设置Clash-Meta的配置文件步骤（Debian）\" class=\"headerlink\" title=\"设置Clash Meta的配置文件步骤（Debian）\"></a>设置Clash Meta的配置文件步骤（Debian）</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 打开debian的/root/.config/clash</span><br><span class=\"line\"> ​\t\tdocker-compose中的映射 - /root/.config/clash:/root/.config/clash</span><br><span class=\"line\"> ​\t\t所以配置文件指向了：/root/.config/clash</span><br><span class=\"line\"> ​\t2. 替换config.yaml到最新版配置文件</span><br><span class=\"line\"> ​\t3. cd /www/server/panel/data/compose/metacubexd</span><br><span class=\"line\"> ​\t4. docker-compose restart</span><br><span class=\"line\"> ​\t5. 检测状态：http://192.168.6.116:9090/<span class=\"comment\">#/proxies</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">2. 维护新的Clash Meta的config.yaml配置文件步骤：</span><br><span class=\"line\"> \t1. (用途：剔除特定服务器，它的tcp可以通，但无法*墙)</span><br><span class=\"line\"> \t2. 进server 的ssh</span><br><span class=\"line\"> \t3.  vi /root/.config/clash/config.yaml</span><br><span class=\"line\"> \t4. cd /www/server/panel/data/compose/metacubexd</span><br><span class=\"line\"> \t5. docker-compose restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"维护Clash-Meta新的config-yaml配置\"><a href=\"#维护Clash-Meta新的config-yaml配置\" class=\"headerlink\" title=\"维护Clash Meta新的config.yaml配置\"></a>维护Clash Meta新的config.yaml配置</h2><p>操作步骤：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. (用途：剔除特定服务器，它的tcp可以通，但无法*墙)</span><br><span class=\"line\">2. 进server 的ssh</span><br><span class=\"line\">3. vi /root/.config/clash/config.yaml （或用BT等工具编辑文件内容，用以符合http://127.0.0.1:443/clash/proxies）</span><br><span class=\"line\">4. cd /www/server/panel/data/compose/metacubexd &amp;&amp; docker-compose restart</span><br><span class=\"line\">5. <span class=\"section\">[Optional]</span>打开web ui http://192.168.6.116:9090/<span class=\"comment\">#/proxies，点击测速按钮</span></span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\">也可以直接在BT中界面化手动操作：</span><br><span class=\"line\">1. 更新config.yaml文件内容 </span><br><span class=\"line\">\t1.1 界面 https://192.168.6.116:36430/files</span><br><span class=\"line\">\t1.2 目录路径 /root/.config/clash</span><br><span class=\"line\">\t1.3 替换config.yaml文件内容</span><br><span class=\"line\">2. 重启连个docker：meta 和 metacubexd</span><br><span class=\"line\">\t2.1 界面 https://192.168.6.116:36430/docker</span><br></pre></td></tr></table></figure>","categories":[{"name":"墙","path":"api/categories/墙.json"}],"tags":[{"name":"docker","path":"api/tags/docker.json"},{"name":"Clash","path":"api/tags/Clash.json"},{"name":"转载","path":"api/tags/转载.json"},{"name":"墙","path":"api/tags/墙.json"},{"name":"Mac","path":"api/tags/Mac.json"},{"name":"Windows","path":"api/tags/Windows.json"},{"name":"安卓","path":"api/tags/安卓.json"},{"name":"andriod","path":"api/tags/andriod.json"},{"name":"Clash for Windows","path":"api/tags/Clash for Windows.json"},{"name":"OpenWrt","path":"api/tags/OpenWrt.json"},{"name":"go","path":"api/tags/go.json"},{"name":"科学上网","path":"api/tags/科学上网.json"},{"name":"Clash Verge","path":"api/tags/Clash Verge.json"}]}