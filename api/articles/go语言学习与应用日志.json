{"title":"go语言学习与应用日志","slug":"go语言学习与应用日志","date":"2023-10-01T07:55:48.000Z","updated":"2023-11-10T02:30:40.369Z","comments":true,"path":"api/articles/go语言学习与应用日志.json","excerpt":"记录go语言学习与应用日志<br>","covers":null,"content":"<p>记录go语言学习与应用日志<br> <span id=\"more\"></span></p>\n<h1 id=\"Proxypool-WebFuzzSub\"><a href=\"#Proxypool-WebFuzzSub\" class=\"headerlink\" title=\"Proxypool - WebFuzzSub\"></a>Proxypool - WebFuzzSub</h1><p>审查所有使用这个类型的站点，需要定期去维护。</p>\n<h1 id=\"安装步骤：\"><a href=\"#安装步骤：\" class=\"headerlink\" title=\"安装步骤：\"></a>安装步骤：</h1><p>1.安装 go install github.com&#x2F;ssrlive&#x2F;proxypool@latest<br>2.将生成的proxypool 可执行文件，复制到整个项目的集体目录下. i.e. &#x2F;Users&#x2F;carlzeng&#x2F;go&#x2F;pkg&#x2F;mod&#x2F;github.com&#x2F;ssrlive&#x2F;<a href=\"mailto:&#x70;&#x72;&#x6f;&#120;&#x79;&#112;&#x6f;&#111;&#108;&#x40;&#x76;&#48;&#x2e;&#55;&#x2e;&#49;&#x32;\">&#x70;&#x72;&#x6f;&#120;&#x79;&#112;&#x6f;&#111;&#108;&#x40;&#x76;&#48;&#x2e;&#55;&#x2e;&#49;&#x32;</a><br>3.配置文件config.yaml 和 source.yaml<br>4.运行 .&#x2F;proxypool -c config_proxypool.yaml</p>\n<p>以后只要搜索proxypool的source.yaml即可，拓展爬虫目标列表，<br>i.e. <a href=\"https://github.com/newcastlecy/proxypool-1/blob/master/source.yaml\">https://github.com/newcastlecy/proxypool-1/blob/master/source.yaml</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxypool  -c config_proxypool.json</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkill -9 proxypool</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑go源文件后，重新编译\"><a href=\"#编辑go源文件后，重新编译\" class=\"headerlink\" title=\"编辑go源文件后，重新编译\"></a>编辑go源文件后，重新编译</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get</span><br><span class=\"line\">    # 仅需要在git pull获取了新的依赖包以后需要运行</span><br><span class=\"line\"></span><br><span class=\"line\">go build</span><br><span class=\"line\">    # it will generate NEW proxypool execution file</span><br></pre></td></tr></table></figure>\n\n\n<p>proxypool’s banchmark url:<br>    <a href=\"http://www.gstatic.com/generate_204\">http://www.gstatic.com/generate_204</a><br>    ttp:&#x2F;&#x2F;clients3.google.com&#x2F;generate_204</p>\n<h2 id=\"错误及解决\"><a href=\"#错误及解决\" class=\"headerlink\" title=\"错误及解决\"></a>错误及解决</h2><pre><code>internal/app/task.go:25:14: syntax error: unexpected :=, expected =\n写在函数最上方，外层的，请使用 =\n\n\ninternal/app/task.go:64:19: undefined: FuzzParseProxyFromString\n函数引用故障\n</code></pre>\n<h2 id=\"proxypool维护\"><a href=\"#proxypool维护\" class=\"headerlink\" title=\"proxypool维护\"></a>proxypool维护</h2><pre><code>proxypool 如何直接从yaml文件中抓取地址？\n    subscribe 是订阅的字符串 \n        比如：https://****.com/wp-content/uploads/2023/05/20230510.txt\n    webfuzz 模糊抓取是 抓取到一堆订阅字符串\n        比如：https://****.gitbook.io/123/\n\n    现在很多资源，直接给clash订阅url地址，里面包含服务器信息，我们要如何使用？\n        比如：https://raw.githubusercontent.com/****/main/clash.yaml\n\n网速低的情况，不要运行这个采集\n</code></pre>\n<h3 id=\"proxypool-无法抓取当前自己本机运行的可用的节点，\"><a href=\"#proxypool-无法抓取当前自己本机运行的可用的节点，\" class=\"headerlink\" title=\"proxypool 无法抓取当前自己本机运行的可用的节点，\"></a>proxypool 无法抓取当前自己本机运行的可用的节点，</h3><p>重新运行“.&#x2F;proxypool -c config_proxypool.yaml”导致浪费了当前可用节点的尴尬局面</p>\n<p>通过添加本机地址的方法是无效的，因为开始运行后，‘配置文件’内容马上被清空了<br><a href=\"http://127.0.0.1:443/clash/proxies\">http://127.0.0.1:443/clash/proxies</a></p>\n<p>在开始重新运行扫描&#x2F;抓取时，如何才能重用当前可用的节点？<br>    目前我无法从文件中载入<br>    但是由于配置文件有从远端同步的github配置文件，<br>    所以不需要这个功能了；需求优先级低，取消<br>转为优化：<br>    当输出：[0008]  INFO STATISTIC: WebFuzz count&#x3D;0 url&#x3D;https:&#x2F;&#x2F;********<br>    是已经抓取完成了，还是正要开始抓取？<br>        应该是抓取完成的输出，<br>    也就是说：如果INFO信息的跳跃值很大（时间长），<br>    说明这个抓取的站点（搭配抓取规则类型）花费太长的时间。<br>    该网址应为：重点优化对象。</p>\n<h2 id=\"Clash-load-balance-方案中，服务器群，如何对新连接，会优先选择测速最快的节点？\"><a href=\"#Clash-load-balance-方案中，服务器群，如何对新连接，会优先选择测速最快的节点？\" class=\"headerlink\" title=\"Clash load balance 方案中，服务器群，如何对新连接，会优先选择测速最快的节点？\"></a>Clash load balance 方案中，服务器群，如何对新连接，会优先选择测速最快的节点？</h2><pre><code>https://github.com/Fndroid/clash_for_windows_pkg/issues/1556\nhttps://lancellc.gitbook.io/clash/clash-config-file/proxy-groups/auto\n2.自动测速的type必须是url-test，写成auto应该是错了；\n本条目的名字也不该是auto，应该是url-test更恰当\n\n修改自动生成的.yaml文件，让proxy-groups的type为url-test, 可以实现：优先选择测速最快的节点.\ngo build.\n\n测试YouTube的视频，Connection Speed 3824 Kbps，自动1080P60HD，清洗流畅许多\n</code></pre>\n<p>实践测试表明，把interval设置成300，是最优解。<br>调整proxypool的refresh 300s, 每5分钟循环检测线路可用性<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/e0e9dbbe-1eb9-48cf-bbf5-30a8f370f3db/4I0jznSGW6ySfNUYKX3t9YZOFHxNIOQWVjzSMPQb5Z2Zv53Xh3VnfbI0xA/deep/0/image.png></p>\n","more":"</p>\n<h1 id=\"Proxypool-WebFuzzSub\"><a href=\"#Proxypool-WebFuzzSub\" class=\"headerlink\" title=\"Proxypool - WebFuzzSub\"></a>Proxypool - WebFuzzSub</h1><p>审查所有使用这个类型的站点，需要定期去维护。</p>\n<h1 id=\"安装步骤：\"><a href=\"#安装步骤：\" class=\"headerlink\" title=\"安装步骤：\"></a>安装步骤：</h1><p>1.安装 go install github.com&#x2F;ssrlive&#x2F;proxypool@latest<br>2.将生成的proxypool 可执行文件，复制到整个项目的集体目录下. i.e. &#x2F;Users&#x2F;carlzeng&#x2F;go&#x2F;pkg&#x2F;mod&#x2F;github.com&#x2F;ssrlive&#x2F;<a href=\"mailto:&#x70;&#x72;&#x6f;&#120;&#x79;&#112;&#x6f;&#111;&#108;&#x40;&#x76;&#48;&#x2e;&#55;&#x2e;&#49;&#x32;\">&#x70;&#x72;&#x6f;&#120;&#x79;&#112;&#x6f;&#111;&#108;&#x40;&#x76;&#48;&#x2e;&#55;&#x2e;&#49;&#x32;</a><br>3.配置文件config.yaml 和 source.yaml<br>4.运行 .&#x2F;proxypool -c config_proxypool.yaml</p>\n<p>以后只要搜索proxypool的source.yaml即可，拓展爬虫目标列表，<br>i.e. <a href=\"https://github.com/newcastlecy/proxypool-1/blob/master/source.yaml\">https://github.com/newcastlecy/proxypool-1/blob/master/source.yaml</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxypool  -c config_proxypool.json</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkill -9 proxypool</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑go源文件后，重新编译\"><a href=\"#编辑go源文件后，重新编译\" class=\"headerlink\" title=\"编辑go源文件后，重新编译\"></a>编辑go源文件后，重新编译</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get</span><br><span class=\"line\">    # 仅需要在git pull获取了新的依赖包以后需要运行</span><br><span class=\"line\"></span><br><span class=\"line\">go build</span><br><span class=\"line\">    # it will generate NEW proxypool execution file</span><br></pre></td></tr></table></figure>\n\n\n<p>proxypool’s banchmark url:<br>    <a href=\"http://www.gstatic.com/generate_204\">http://www.gstatic.com/generate_204</a><br>    ttp:&#x2F;&#x2F;clients3.google.com&#x2F;generate_204</p>\n<h2 id=\"错误及解决\"><a href=\"#错误及解决\" class=\"headerlink\" title=\"错误及解决\"></a>错误及解决</h2><pre><code>internal/app/task.go:25:14: syntax error: unexpected :=, expected =\n写在函数最上方，外层的，请使用 =\n\n\ninternal/app/task.go:64:19: undefined: FuzzParseProxyFromString\n函数引用故障\n</code></pre>\n<h2 id=\"proxypool维护\"><a href=\"#proxypool维护\" class=\"headerlink\" title=\"proxypool维护\"></a>proxypool维护</h2><pre><code>proxypool 如何直接从yaml文件中抓取地址？\n    subscribe 是订阅的字符串 \n        比如：https://****.com/wp-content/uploads/2023/05/20230510.txt\n    webfuzz 模糊抓取是 抓取到一堆订阅字符串\n        比如：https://****.gitbook.io/123/\n\n    现在很多资源，直接给clash订阅url地址，里面包含服务器信息，我们要如何使用？\n        比如：https://raw.githubusercontent.com/****/main/clash.yaml\n\n网速低的情况，不要运行这个采集\n</code></pre>\n<h3 id=\"proxypool-无法抓取当前自己本机运行的可用的节点，\"><a href=\"#proxypool-无法抓取当前自己本机运行的可用的节点，\" class=\"headerlink\" title=\"proxypool 无法抓取当前自己本机运行的可用的节点，\"></a>proxypool 无法抓取当前自己本机运行的可用的节点，</h3><p>重新运行“.&#x2F;proxypool -c config_proxypool.yaml”导致浪费了当前可用节点的尴尬局面</p>\n<p>通过添加本机地址的方法是无效的，因为开始运行后，‘配置文件’内容马上被清空了<br><a href=\"http://127.0.0.1:443/clash/proxies\">http://127.0.0.1:443/clash/proxies</a></p>\n<p>在开始重新运行扫描&#x2F;抓取时，如何才能重用当前可用的节点？<br>    目前我无法从文件中载入<br>    但是由于配置文件有从远端同步的github配置文件，<br>    所以不需要这个功能了；需求优先级低，取消<br>转为优化：<br>    当输出：[0008]  INFO STATISTIC: WebFuzz count&#x3D;0 url&#x3D;https:&#x2F;&#x2F;********<br>    是已经抓取完成了，还是正要开始抓取？<br>        应该是抓取完成的输出，<br>    也就是说：如果INFO信息的跳跃值很大（时间长），<br>    说明这个抓取的站点（搭配抓取规则类型）花费太长的时间。<br>    该网址应为：重点优化对象。</p>\n<h2 id=\"Clash-load-balance-方案中，服务器群，如何对新连接，会优先选择测速最快的节点？\"><a href=\"#Clash-load-balance-方案中，服务器群，如何对新连接，会优先选择测速最快的节点？\" class=\"headerlink\" title=\"Clash load balance 方案中，服务器群，如何对新连接，会优先选择测速最快的节点？\"></a>Clash load balance 方案中，服务器群，如何对新连接，会优先选择测速最快的节点？</h2><pre><code>https://github.com/Fndroid/clash_for_windows_pkg/issues/1556\nhttps://lancellc.gitbook.io/clash/clash-config-file/proxy-groups/auto\n2.自动测速的type必须是url-test，写成auto应该是错了；\n本条目的名字也不该是auto，应该是url-test更恰当\n\n修改自动生成的.yaml文件，让proxy-groups的type为url-test, 可以实现：优先选择测速最快的节点.\ngo build.\n\n测试YouTube的视频，Connection Speed 3824 Kbps，自动1080P60HD，清洗流畅许多\n</code></pre>\n<p>实践测试表明，把interval设置成300，是最优解。<br>调整proxypool的refresh 300s, 每5分钟循环检测线路可用性<br><img class=\"lozad\" data-src=https://www.evernote.com/shard/s122/sh/e0e9dbbe-1eb9-48cf-bbf5-30a8f370f3db/4I0jznSGW6ySfNUYKX3t9YZOFHxNIOQWVjzSMPQb5Z2Zv53Xh3VnfbI0xA/deep/0/image.png></p>","categories":[{"name":"go","path":"api/categories/go.json"}],"tags":[{"name":"Clash","path":"api/tags/Clash.json"},{"name":"墙","path":"api/tags/墙.json"},{"name":"go","path":"api/tags/go.json"},{"name":"proxypool","path":"api/tags/proxypool.json"}]}