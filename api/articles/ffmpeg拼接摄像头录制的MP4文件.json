{"title":"ffmpeg拼接摄像头录制的MP4文件","slug":"ffmpeg拼接摄像头录制的MP4文件","date":"2024-11-26T03:07:22.000Z","updated":"2024-12-02T11:36:27.476Z","comments":true,"path":"api/articles/ffmpeg拼接摄像头录制的MP4文件.json","excerpt":" [Figure] 学会如何拼接摄像头中的多个录像MP4文件, 成为一整段完整的录像MP4文件","covers":["https://img.carlzeng.com:3/i/2024/11/26/67453ebaf02d8.png","https://img.carlzeng.com:3/i/2024/11/26/67455327841e2.png","https://img.carlzeng.com:3/i/2024/11/26/67453f138ed94.png","https://img.carlzeng.com:3/i/2024/11/26/67455bb094599.png","https://img.carlzeng.com:3/i/2024/11/30/674b19a7339a7.png"],"content":"<img class=\"lozad\" data-src=\"https://img.carlzeng.com:3/i/2024/11/26/67453ebaf02d8.png\">\n\n<p>学会如何拼接摄像头中的多个录像MP4文件, 成为一整段完整的录像MP4文件</p>\n<span id=\"more\"></span>\n\n<div> \n<button onclick=\"synthesizeSpeech()\">朗读全文</button>\n</div>\n<audio controls id=\"audioPlayer\">Your browser does not support the audio element.</audio>      \n<script>\n  function synthesizeSpeech() { \n    var inputText = document.getElementsByClassName('post-block')[0].innerText;\n    var voice = \"ZH\";\n    var url = 'https://tts.carlzeng.com:3/speech?text=' + encodeURIComponent(inputText.substring(0,3000)) + '&voice=' + voice;\n    var audioPlayer = document.getElementById('audioPlayer');          \n    audioPlayer.src = url;\n    audioPlayer.load();\n    audioPlayer.play();\n  }\n</script>\n\n\n<h1 id=\"有什么用\"><a href=\"#有什么用\" class=\"headerlink\" title=\"有什么用\"></a>有什么用</h1><p>在苹果电脑中</p>\n<p>学会如何拼接摄像头中的多个录像MP4文件, 成为一整段完整的录像MP4文件</p>\n<p>学会如何拼接多张照片成视频</p>\n<h1 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h1><p>安装ffmpeg </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n\n<p>编辑和运行bash a.sh</p>\n<h1 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h1><iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://query.carlzeng.com:3/appsearch?q=ffmpeg\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"500\"></iframe>\n\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><h2 id=\"批量重命名文件\"><a href=\"#批量重命名文件\" class=\"headerlink\" title=\"批量重命名文件\"></a>批量重命名文件</h2><p>排序后, MAC中选中多个文件, 然后选重命名, </p>\n<p>会弹出一个对话框 如下图所示(这时修改完了的, 重新再重命名的界面)</p>\n<p><img data-src=\"https://img.carlzeng.com:3/i/2024/11/26/67455327841e2.png\" alt=\"image-20241126124837983\"></p>\n<p><img data-src=\"https://img.carlzeng.com:3/i/2024/11/26/67453f138ed94.png\" alt=\"image-20241126112257942\"></p>\n<h2 id=\"拼接出mp4文件\"><a href=\"#拼接出mp4文件\" class=\"headerlink\" title=\"拼接出mp4文件\"></a>拼接出mp4文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 将 mp4 文件封装为 ts 格式</span></span><br><span class=\"line\">ffmpeg -i a1.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 1.ts</span><br><span class=\"line\">ffmpeg -i a2.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 2.ts</span><br><span class=\"line\">ffmpeg -i a3.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 3.ts</span><br><span class=\"line\">ffmpeg -i a4.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 4.ts</span><br><span class=\"line\">ffmpeg -i a5.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 5.ts</span><br><span class=\"line\">ffmpeg -i a6.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 6.ts</span><br><span class=\"line\">ffmpeg -i a7.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 7.ts</span><br><span class=\"line\">ffmpeg -i a8.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 8.ts</span><br><span class=\"line\">ffmpeg -i a9.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 9.ts</span><br><span class=\"line\">ffmpeg -i a10.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 10.ts</span><br><span class=\"line\">ffmpeg -i a11.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 11.ts</span><br><span class=\"line\">ffmpeg -i a12.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 12.ts</span><br><span class=\"line\">ffmpeg -i a13.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 13.ts</span><br><span class=\"line\">ffmpeg -i a14.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 14.ts</span><br><span class=\"line\">ffmpeg -i a15.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 15.ts</span><br><span class=\"line\">ffmpeg -i a16.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 16.ts</span><br><span class=\"line\">ffmpeg -i a17.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 17.ts</span><br><span class=\"line\">ffmpeg -i a18.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 18.ts</span><br><span class=\"line\">ffmpeg -i a19.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 19.ts</span><br><span class=\"line\"><span class=\"comment\"># 拼接 ts 并导出最终 mp4 文件</span></span><br><span class=\"line\">ffmpeg -i <span class=\"string\">&quot;concat:1.ts|2.ts|3.ts|4.ts|5.ts|6.ts|7.ts|8.ts|9.ts|10.ts|11.ts|12.ts|13.ts|14.ts|15.ts|16.ts|17.ts|18.ts|19.ts&quot;</span> -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4</span><br><span class=\"line\"><span class=\"comment\"># 删除过程中生成的 ts 文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *.ts</span><br></pre></td></tr></table></figure>\n\n\n\n<p>终端中，cd 到 mp4 的目录，执行 bash a.sh，等待即可；</p>\n<h2 id=\"错误及解决办法\"><a href=\"#错误及解决办法\" class=\"headerlink\" title=\"错误及解决办法\"></a>错误及解决办法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i a1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts</span><br><span class=\"line\"></span><br><span class=\"line\">[h264_mp4toannexb @ 0x127f2e760] Codec <span class=\"string\">&#x27;hevc&#x27;</span> (173) is not supported by the bitstream filter <span class=\"string\">&#x27;h264_mp4toannexb&#x27;</span>. Supported codecs are: h264 (27)</span><br><span class=\"line\"></span><br><span class=\"line\">[vost<span class=\"comment\">#0:0/copy @ 0x145f07ec0] Error initializing bitstream filter: h264_mp4toannexb</span></span><br><span class=\"line\">Error opening output file 1.ts.</span><br><span class=\"line\">Error opening output files: Invalid argument</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>更换编码</p>\n<p>从 h264_mp4toannexb 改成: hevc_mp4toannexb</p>\n<p>成功拼接19个摄像头中的mp4文件: output.mp4, 一共19个文件, 合并后大小460MB, 约1小时时长.</p>\n<p>成功拼接38个摄像头中的mp4文件: output.mp4. 一共38个文件, 合并后900MB, 2.5小时</p>\n<h1 id=\"灵感来源\"><a href=\"#灵感来源\" class=\"headerlink\" title=\"灵感来源\"></a>灵感来源</h1><p><a href=\"https://www.yukapril.com/2020/05/31/mp4-combine.html\">使用 ffmpeg，完成多个 mp4 文件合并</a></p>\n<h1 id=\"拼接多张照片成视频\"><a href=\"#拼接多张照片成视频\" class=\"headerlink\" title=\"拼接多张照片成视频\"></a>拼接多张照片成视频</h1><h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 1 -f image2 -i 202411231%03d.jpg output202411231.mp4 </span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://img.carlzeng.com:3/i/2024/11/26/67455bb094599.png\" alt=\"image-20241126132503158\"></p>\n<p>下一步: 插入视频背景音乐</p>\n<h2 id=\"理论过程\"><a href=\"#理论过程\" class=\"headerlink\" title=\"理论过程\"></a>理论过程</h2><p>使用ffmpeg将图片拼接成视频前，需要将图片文件名做下预处理，文件名中必须有数字将其次序标记出来，这里我直接使用数字将图片重命名了，如下：</p>\n<p>直接使用命令<code>ffmpeg -f image2 -i %d.jpeg output.mp4</code> 就可以将其转为mp4视频，命令中的%d是数字编号占位符，ffmpeg会按次序加载1-250.jpeg做为输入。这里我们没有指定如何其他参数，所以ffmpeg使用了默认的参数，比如帧率是25fps，视频使用了h264编码，分辨率直接使用了图片原始分辨率……</p>\n<h3 id=\"r-调整帧率\"><a href=\"#r-调整帧率\" class=\"headerlink\" title=\"-r 调整帧率\"></a>-r 调整帧率</h3><p>不指定帧率的话，ffmpeg会使用默认的25帧，也就是1秒钟拼接25张图片，我们可以通过调整帧率的大小来控制最终生成视频的时长。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 10 -f image2 -i %d.jpeg output1.mp4</span><br></pre></td></tr></table></figure>\n\n<p>如上命令每秒会拼接10张图片，250张图片最终会生成25秒的视频。<br><strong>这里需要注意<code>-r 10</code> 参数的位置，在<code>-i %d.jpeg</code>前面和在后面的效果是不一样的。放在-i后面只会改变输出的视频帧率，而输入的还是默认值25</strong> ，比如<code>ffmpeg -f image2 -i %d.jpeg -r 10 output1.mp4</code>，250张图片依旧只会生成10s的视频，但视频的播放征率会减小到10。</p>\n<h3 id=\"b-v-调整视频码率\"><a href=\"#b-v-调整视频码率\" class=\"headerlink\" title=\"-b:v 调整视频码率\"></a>-b:v 调整视频码率</h3><p>-b:v bitrate of video。如果原始图片比较大，默认参数生成的视频大小会比较大。比如上文中我使用的图片都是2k的高清图，最终生成的10s视频就有35MB，码率有近30Mb&#x2F;s（码率是只1s播过的数据量，注意这里单位是小b）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 10 -f image2 -i %d.jpeg -b:v 4M output2.mp4</span><br></pre></td></tr></table></figure>\n\n<p>这里额外提醒下，改变码率会影响到视频清晰度，但并不意味着高码率的视频一定比低码率的视频清晰度更高，这还取决于视频编码格式，比如h265编码可以用更小的码率生成h264同等的视频质量，像av1、v8、v9等编码也优于h264。</p>\n<h3 id=\"crf-调整视频质量\"><a href=\"#crf-调整视频质量\" class=\"headerlink\" title=\"-crf 调整视频质量\"></a>-crf 调整视频质量</h3><p>-crf Constant Rate Factor，用以平衡视频质量和文件大小的参数，FFMPEG里取值范围为0-51，取值越高内容损失越多，视频质量更差。 ffmpeg的默认值是23，建议的取值范围是17-28。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 10 -f image2 -i %d.jpeg output3.mp4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"c-v-调整视频的编码格式\"><a href=\"#c-v-调整视频的编码格式\" class=\"headerlink\" title=\"-c:v 调整视频的编码格式\"></a>-c:v 调整视频的编码格式</h3><p>-c:v codec of video。目前ffmpeg针对于mp4默认使用的是h264，你可以使用<code>-c:v libx265</code>生成同等质量，但文件更小的h265视频。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -f image2 -i %d.jpeg -c:v libx265 output4.mp4</span><br></pre></td></tr></table></figure>\n\n<p>output4.mp4相比于上文中生成的output.mp4，视频文件大小减少了60%，但视频质量不变。你也可以使用<code>-c:v libvpx</code> <code>-c:v libvpx-vp9</code>分别生成v8和v9编码的webm文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -f image2 -i %d.jpeg -c:v libvpx output-v8.webm <span class=\"comment\">#注意webm默认生成的是低质量的视频，可使用-crf或者-b:v参数调整视频质量。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vf-scale-调整视频分辨率\"><a href=\"#vf-scale-调整视频分辨率\" class=\"headerlink\" title=\"-vf scale 调整视频分辨率\"></a>-vf scale 调整视频分辨率</h3><p>-vf scale: Video Filter Scale</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -f image2 -i %d.jpeg -s 640x480 output5.mp4</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令会将视频直接调整为640x480的分辨率，如果原始图片不是4:3 肯定是会对原始图像做拉伸的。可以使用下面的命令等比例缩放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -f image2 -i %d.jpeg -vf scale=-1:480 output5.mp4 <span class=\"comment\">#-1表示比例缩放，也可-vf scale=640:-1固定宽度缩放高度</span></span><br></pre></td></tr></table></figure>\n\n<p>以上就是几个常用的参数，这几个参数不仅限于图片转视频，视频转视频时也可以使用。</p>\n<h2 id=\"插入视频背景音乐\"><a href=\"#插入视频背景音乐\" class=\"headerlink\" title=\"插入视频背景音乐\"></a>插入视频背景音乐</h2><p>ffmpeg -an -i video.mp4 -stream_loop -1 -i bgm.mp3 -c:v copy -t 60 -y output_bgm.mp4</p>\n<p>-an -i   代表消除源视频中的音频</p>\n<p>-t 60 剪裁60秒</p>\n<p>实例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -an -i output.mp4 -stream_loop -1 -i bgm.mp3 -c:v copy -t 2400 -y output_bgm.mp4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#合并, 去除原声, 一共剪裁输出40分钟的视频</span></span><br><span class=\"line\"><span class=\"comment\">#-t 60 代表剪裁输出60秒视频</span></span><br><span class=\"line\"><span class=\"comment\">#-stream_loop -1  参数-1代表循环输入源</span></span><br><span class=\"line\"><span class=\"comment\">#-c:v copy 对视频流进行复制，不需要重新编解码（前提是输入流和输出流一致），速度极快</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>其他</p>\n<p>2、视频编辑 </p>\n<p>比如从第5秒的地方开始，往后截取10秒钟</p>\n<p>ffmpeg -ss 5 -t 10 -i output1.mp4 output2.mp4</p>\n<p>4、视频加速</p>\n<p>ffmpeg -i result.mp4 -vf setpts&#x3D;PTS&#x2F;2 -af atempo&#x3D;2 result01.mp4</p>\n<p>6、调整视频宽高</p>\n<p>ffmpeg -i result.mp4 -vf scale&#x3D;320*240 result02.mp4</p>\n<h1 id=\"实际用例模版\"><a href=\"#实际用例模版\" class=\"headerlink\" title=\"实际用例模版\"></a>实际用例模版</h1><h2 id=\"1-组合监控截图\"><a href=\"#1-组合监控截图\" class=\"headerlink\" title=\"1. 组合监控截图\"></a>1. 组合监控截图</h2><p>打开Terminal, cd 拉到NAS的目录中 cd &#x2F;Volumes&#x2F;homes&#x2F;13261977480&#x2F;Photos&#x2F; 生成视频:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 1 -f image2 -i 202411231%03d.jpg output202411231.mp4 </span><br></pre></td></tr></table></figure>\n\n<p>一条命令将特定一组的监控截图拼接&#x2F;合成成为视频mp4文件</p>\n<p>背景说明: 由于这一组的监控截图时通过以下的命令, 定时从监控摄像头中截取&#x2F;抽帧而来.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ffmpeg -i <span class=\"string\">&quot;rtsp://*:*@192.168.6.21:554&quot;</span> -y -f ima</span><br><span class=\"line\">ge2 -r 1/180 /volume2/homes/13261977480/Photos/202411231%03d.jpg &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"2-添加背景音乐\"><a href=\"#2-添加背景音乐\" class=\"headerlink\" title=\"2. 添加背景音乐\"></a>2. 添加背景音乐</h2><p>预览一下上面那个组合起来的视频, 看看总时长时多少(比如: 44秒)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -an -i output202411231.mp4 -stream_loop -1 -i bgm.mp3 -c:v copy -t 44 -y output_bgm.mp4</span><br></pre></td></tr></table></figure>\n\n<p>一条命令将mp4文件合成了背景音乐, 这第二条命令合并背景音乐, 并制定视频的总时长(如: 44秒)</p>\n<h2 id=\"3-发布到B站星球\"><a href=\"#3-发布到B站星球\" class=\"headerlink\" title=\"3. 发布到B站星球\"></a>3. 发布到B站星球</h2><p>打开Bilibili<a href=\"https://member.bilibili.com/platform/upload/video/frame?page_from=creative_home_top_upload\">创作中心 - 投稿</a>, 直接拉入在NAS中生成的视频文件(完成上传)</p>\n<p>填写基础及说明信息, 提交投稿</p>\n<p><img data-src=\"https://img.carlzeng.com:3/i/2024/11/30/674b19a7339a7.png\" alt=\"image-20241130215646973\"></p>\n","more":"<div> \n<button onclick=\"synthesizeSpeech()\">朗读全文</button>\n</div>\n<audio controls id=\"audioPlayer\">Your browser does not support the audio element.</audio>      \n<script>\n  function synthesizeSpeech() { \n    var inputText = document.getElementsByClassName('post-block')[0].innerText;\n    var voice = \"ZH\";\n    var url = 'https://tts.carlzeng.com:3/speech?text=' + encodeURIComponent(inputText.substring(0,3000)) + '&voice=' + voice;\n    var audioPlayer = document.getElementById('audioPlayer');          \n    audioPlayer.src = url;\n    audioPlayer.load();\n    audioPlayer.play();\n  }\n</script>\n\n\n<h1 id=\"有什么用\"><a href=\"#有什么用\" class=\"headerlink\" title=\"有什么用\"></a>有什么用</h1><p>在苹果电脑中</p>\n<p>学会如何拼接摄像头中的多个录像MP4文件, 成为一整段完整的录像MP4文件</p>\n<p>学会如何拼接多张照片成视频</p>\n<h1 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h1><p>安装ffmpeg </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n\n<p>编辑和运行bash a.sh</p>\n<h1 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h1><iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://query.carlzeng.com:3/appsearch?q=ffmpeg\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"500\"></iframe>\n\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><h2 id=\"批量重命名文件\"><a href=\"#批量重命名文件\" class=\"headerlink\" title=\"批量重命名文件\"></a>批量重命名文件</h2><p>排序后, MAC中选中多个文件, 然后选重命名, </p>\n<p>会弹出一个对话框 如下图所示(这时修改完了的, 重新再重命名的界面)</p>\n<p><img data-src=\"https://img.carlzeng.com:3/i/2024/11/26/67455327841e2.png\" alt=\"image-20241126124837983\"></p>\n<p><img data-src=\"https://img.carlzeng.com:3/i/2024/11/26/67453f138ed94.png\" alt=\"image-20241126112257942\"></p>\n<h2 id=\"拼接出mp4文件\"><a href=\"#拼接出mp4文件\" class=\"headerlink\" title=\"拼接出mp4文件\"></a>拼接出mp4文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 将 mp4 文件封装为 ts 格式</span></span><br><span class=\"line\">ffmpeg -i a1.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 1.ts</span><br><span class=\"line\">ffmpeg -i a2.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 2.ts</span><br><span class=\"line\">ffmpeg -i a3.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 3.ts</span><br><span class=\"line\">ffmpeg -i a4.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 4.ts</span><br><span class=\"line\">ffmpeg -i a5.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 5.ts</span><br><span class=\"line\">ffmpeg -i a6.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 6.ts</span><br><span class=\"line\">ffmpeg -i a7.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 7.ts</span><br><span class=\"line\">ffmpeg -i a8.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 8.ts</span><br><span class=\"line\">ffmpeg -i a9.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 9.ts</span><br><span class=\"line\">ffmpeg -i a10.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 10.ts</span><br><span class=\"line\">ffmpeg -i a11.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 11.ts</span><br><span class=\"line\">ffmpeg -i a12.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 12.ts</span><br><span class=\"line\">ffmpeg -i a13.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 13.ts</span><br><span class=\"line\">ffmpeg -i a14.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 14.ts</span><br><span class=\"line\">ffmpeg -i a15.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 15.ts</span><br><span class=\"line\">ffmpeg -i a16.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 16.ts</span><br><span class=\"line\">ffmpeg -i a17.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 17.ts</span><br><span class=\"line\">ffmpeg -i a18.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 18.ts</span><br><span class=\"line\">ffmpeg -i a19.mp4 -vcodec copy -acodec copy -vbsf hevc_mp4toannexb 19.ts</span><br><span class=\"line\"><span class=\"comment\"># 拼接 ts 并导出最终 mp4 文件</span></span><br><span class=\"line\">ffmpeg -i <span class=\"string\">&quot;concat:1.ts|2.ts|3.ts|4.ts|5.ts|6.ts|7.ts|8.ts|9.ts|10.ts|11.ts|12.ts|13.ts|14.ts|15.ts|16.ts|17.ts|18.ts|19.ts&quot;</span> -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4</span><br><span class=\"line\"><span class=\"comment\"># 删除过程中生成的 ts 文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *.ts</span><br></pre></td></tr></table></figure>\n\n\n\n<p>终端中，cd 到 mp4 的目录，执行 bash a.sh，等待即可；</p>\n<h2 id=\"错误及解决办法\"><a href=\"#错误及解决办法\" class=\"headerlink\" title=\"错误及解决办法\"></a>错误及解决办法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i a1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts</span><br><span class=\"line\"></span><br><span class=\"line\">[h264_mp4toannexb @ 0x127f2e760] Codec <span class=\"string\">&#x27;hevc&#x27;</span> (173) is not supported by the bitstream filter <span class=\"string\">&#x27;h264_mp4toannexb&#x27;</span>. Supported codecs are: h264 (27)</span><br><span class=\"line\"></span><br><span class=\"line\">[vost<span class=\"comment\">#0:0/copy @ 0x145f07ec0] Error initializing bitstream filter: h264_mp4toannexb</span></span><br><span class=\"line\">Error opening output file 1.ts.</span><br><span class=\"line\">Error opening output files: Invalid argument</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>更换编码</p>\n<p>从 h264_mp4toannexb 改成: hevc_mp4toannexb</p>\n<p>成功拼接19个摄像头中的mp4文件: output.mp4, 一共19个文件, 合并后大小460MB, 约1小时时长.</p>\n<p>成功拼接38个摄像头中的mp4文件: output.mp4. 一共38个文件, 合并后900MB, 2.5小时</p>\n<h1 id=\"灵感来源\"><a href=\"#灵感来源\" class=\"headerlink\" title=\"灵感来源\"></a>灵感来源</h1><p><a href=\"https://www.yukapril.com/2020/05/31/mp4-combine.html\">使用 ffmpeg，完成多个 mp4 文件合并</a></p>\n<h1 id=\"拼接多张照片成视频\"><a href=\"#拼接多张照片成视频\" class=\"headerlink\" title=\"拼接多张照片成视频\"></a>拼接多张照片成视频</h1><h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 1 -f image2 -i 202411231%03d.jpg output202411231.mp4 </span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://img.carlzeng.com:3/i/2024/11/26/67455bb094599.png\" alt=\"image-20241126132503158\"></p>\n<p>下一步: 插入视频背景音乐</p>\n<h2 id=\"理论过程\"><a href=\"#理论过程\" class=\"headerlink\" title=\"理论过程\"></a>理论过程</h2><p>使用ffmpeg将图片拼接成视频前，需要将图片文件名做下预处理，文件名中必须有数字将其次序标记出来，这里我直接使用数字将图片重命名了，如下：</p>\n<p>直接使用命令<code>ffmpeg -f image2 -i %d.jpeg output.mp4</code> 就可以将其转为mp4视频，命令中的%d是数字编号占位符，ffmpeg会按次序加载1-250.jpeg做为输入。这里我们没有指定如何其他参数，所以ffmpeg使用了默认的参数，比如帧率是25fps，视频使用了h264编码，分辨率直接使用了图片原始分辨率……</p>\n<h3 id=\"r-调整帧率\"><a href=\"#r-调整帧率\" class=\"headerlink\" title=\"-r 调整帧率\"></a>-r 调整帧率</h3><p>不指定帧率的话，ffmpeg会使用默认的25帧，也就是1秒钟拼接25张图片，我们可以通过调整帧率的大小来控制最终生成视频的时长。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 10 -f image2 -i %d.jpeg output1.mp4</span><br></pre></td></tr></table></figure>\n\n<p>如上命令每秒会拼接10张图片，250张图片最终会生成25秒的视频。<br><strong>这里需要注意<code>-r 10</code> 参数的位置，在<code>-i %d.jpeg</code>前面和在后面的效果是不一样的。放在-i后面只会改变输出的视频帧率，而输入的还是默认值25</strong> ，比如<code>ffmpeg -f image2 -i %d.jpeg -r 10 output1.mp4</code>，250张图片依旧只会生成10s的视频，但视频的播放征率会减小到10。</p>\n<h3 id=\"b-v-调整视频码率\"><a href=\"#b-v-调整视频码率\" class=\"headerlink\" title=\"-b:v 调整视频码率\"></a>-b:v 调整视频码率</h3><p>-b:v bitrate of video。如果原始图片比较大，默认参数生成的视频大小会比较大。比如上文中我使用的图片都是2k的高清图，最终生成的10s视频就有35MB，码率有近30Mb&#x2F;s（码率是只1s播过的数据量，注意这里单位是小b）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 10 -f image2 -i %d.jpeg -b:v 4M output2.mp4</span><br></pre></td></tr></table></figure>\n\n<p>这里额外提醒下，改变码率会影响到视频清晰度，但并不意味着高码率的视频一定比低码率的视频清晰度更高，这还取决于视频编码格式，比如h265编码可以用更小的码率生成h264同等的视频质量，像av1、v8、v9等编码也优于h264。</p>\n<h3 id=\"crf-调整视频质量\"><a href=\"#crf-调整视频质量\" class=\"headerlink\" title=\"-crf 调整视频质量\"></a>-crf 调整视频质量</h3><p>-crf Constant Rate Factor，用以平衡视频质量和文件大小的参数，FFMPEG里取值范围为0-51，取值越高内容损失越多，视频质量更差。 ffmpeg的默认值是23，建议的取值范围是17-28。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 10 -f image2 -i %d.jpeg output3.mp4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"c-v-调整视频的编码格式\"><a href=\"#c-v-调整视频的编码格式\" class=\"headerlink\" title=\"-c:v 调整视频的编码格式\"></a>-c:v 调整视频的编码格式</h3><p>-c:v codec of video。目前ffmpeg针对于mp4默认使用的是h264，你可以使用<code>-c:v libx265</code>生成同等质量，但文件更小的h265视频。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -f image2 -i %d.jpeg -c:v libx265 output4.mp4</span><br></pre></td></tr></table></figure>\n\n<p>output4.mp4相比于上文中生成的output.mp4，视频文件大小减少了60%，但视频质量不变。你也可以使用<code>-c:v libvpx</code> <code>-c:v libvpx-vp9</code>分别生成v8和v9编码的webm文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -f image2 -i %d.jpeg -c:v libvpx output-v8.webm <span class=\"comment\">#注意webm默认生成的是低质量的视频，可使用-crf或者-b:v参数调整视频质量。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vf-scale-调整视频分辨率\"><a href=\"#vf-scale-调整视频分辨率\" class=\"headerlink\" title=\"-vf scale 调整视频分辨率\"></a>-vf scale 调整视频分辨率</h3><p>-vf scale: Video Filter Scale</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -f image2 -i %d.jpeg -s 640x480 output5.mp4</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令会将视频直接调整为640x480的分辨率，如果原始图片不是4:3 肯定是会对原始图像做拉伸的。可以使用下面的命令等比例缩放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -f image2 -i %d.jpeg -vf scale=-1:480 output5.mp4 <span class=\"comment\">#-1表示比例缩放，也可-vf scale=640:-1固定宽度缩放高度</span></span><br></pre></td></tr></table></figure>\n\n<p>以上就是几个常用的参数，这几个参数不仅限于图片转视频，视频转视频时也可以使用。</p>\n<h2 id=\"插入视频背景音乐\"><a href=\"#插入视频背景音乐\" class=\"headerlink\" title=\"插入视频背景音乐\"></a>插入视频背景音乐</h2><p>ffmpeg -an -i video.mp4 -stream_loop -1 -i bgm.mp3 -c:v copy -t 60 -y output_bgm.mp4</p>\n<p>-an -i   代表消除源视频中的音频</p>\n<p>-t 60 剪裁60秒</p>\n<p>实例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -an -i output.mp4 -stream_loop -1 -i bgm.mp3 -c:v copy -t 2400 -y output_bgm.mp4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#合并, 去除原声, 一共剪裁输出40分钟的视频</span></span><br><span class=\"line\"><span class=\"comment\">#-t 60 代表剪裁输出60秒视频</span></span><br><span class=\"line\"><span class=\"comment\">#-stream_loop -1  参数-1代表循环输入源</span></span><br><span class=\"line\"><span class=\"comment\">#-c:v copy 对视频流进行复制，不需要重新编解码（前提是输入流和输出流一致），速度极快</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>其他</p>\n<p>2、视频编辑 </p>\n<p>比如从第5秒的地方开始，往后截取10秒钟</p>\n<p>ffmpeg -ss 5 -t 10 -i output1.mp4 output2.mp4</p>\n<p>4、视频加速</p>\n<p>ffmpeg -i result.mp4 -vf setpts&#x3D;PTS&#x2F;2 -af atempo&#x3D;2 result01.mp4</p>\n<p>6、调整视频宽高</p>\n<p>ffmpeg -i result.mp4 -vf scale&#x3D;320*240 result02.mp4</p>\n<h1 id=\"实际用例模版\"><a href=\"#实际用例模版\" class=\"headerlink\" title=\"实际用例模版\"></a>实际用例模版</h1><h2 id=\"1-组合监控截图\"><a href=\"#1-组合监控截图\" class=\"headerlink\" title=\"1. 组合监控截图\"></a>1. 组合监控截图</h2><p>打开Terminal, cd 拉到NAS的目录中 cd &#x2F;Volumes&#x2F;homes&#x2F;13261977480&#x2F;Photos&#x2F; 生成视频:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -r 1 -f image2 -i 202411231%03d.jpg output202411231.mp4 </span><br></pre></td></tr></table></figure>\n\n<p>一条命令将特定一组的监控截图拼接&#x2F;合成成为视频mp4文件</p>\n<p>背景说明: 由于这一组的监控截图时通过以下的命令, 定时从监控摄像头中截取&#x2F;抽帧而来.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ffmpeg -i <span class=\"string\">&quot;rtsp://*:*@192.168.6.21:554&quot;</span> -y -f ima</span><br><span class=\"line\">ge2 -r 1/180 /volume2/homes/13261977480/Photos/202411231%03d.jpg &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"2-添加背景音乐\"><a href=\"#2-添加背景音乐\" class=\"headerlink\" title=\"2. 添加背景音乐\"></a>2. 添加背景音乐</h2><p>预览一下上面那个组合起来的视频, 看看总时长时多少(比如: 44秒)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -an -i output202411231.mp4 -stream_loop -1 -i bgm.mp3 -c:v copy -t 44 -y output_bgm.mp4</span><br></pre></td></tr></table></figure>\n\n<p>一条命令将mp4文件合成了背景音乐, 这第二条命令合并背景音乐, 并制定视频的总时长(如: 44秒)</p>\n<h2 id=\"3-发布到B站星球\"><a href=\"#3-发布到B站星球\" class=\"headerlink\" title=\"3. 发布到B站星球\"></a>3. 发布到B站星球</h2><p>打开Bilibili<a href=\"https://member.bilibili.com/platform/upload/video/frame?page_from=creative_home_top_upload\">创作中心 - 投稿</a>, 直接拉入在NAS中生成的视频文件(完成上传)</p>\n<p>填写基础及说明信息, 提交投稿</p>\n<p><img data-src=\"https://img.carlzeng.com:3/i/2024/11/30/674b19a7339a7.png\" alt=\"image-20241130215646973\"></p>","categories":[{"name":"ffmpeg","path":"api/categories/ffmpeg.json"}],"tags":[{"name":"ffmpeg","path":"api/tags/ffmpeg.json"},{"name":"mp4","path":"api/tags/mp4.json"}]}