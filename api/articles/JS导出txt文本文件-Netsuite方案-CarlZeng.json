{"title":"JS导出txt文本文件,Netsuite方案-CarlZeng","slug":"JS导出txt文本文件-Netsuite方案-CarlZeng","date":"2008-12-08T04:10:00.000Z","updated":"2023-10-08T13:38:52.658Z","comments":true,"path":"api/articles/JS导出txt文本文件-Netsuite方案-CarlZeng.json","excerpt":"//传入一个table的id，将table的全部内容导出excel文件function AutomateExcel(objTable){// Start Excel and get Application object.var oXL = new ActiveXObject(\"Excel.Application\");// Get a new workbook.var oWB = oXL.Workb...","covers":null,"content":"<p>&#x2F;&#x2F;传入一个table的id，将table的全部内容导出excel文件function AutomateExcel(objTable){&#x2F;&#x2F; Start Excel and get Application object.var oXL &#x3D; new ActiveXObject(“Excel.Application”);&#x2F;&#x2F; Get a new workbook.var oWB &#x3D; oXL.Workb…</p>\n<!-- more -->\n<p>&#x2F;&#x2F;传入一个table的id，将table的全部内容导出excel文件<br>function AutomateExcel(objTable)<br>{<br>&#x2F;&#x2F; Start Excel and get Application object.<br>var oXL &#x3D; new ActiveXObject(“Excel.Application”);<br>&#x2F;&#x2F; Get a new workbook.<br>var oWB &#x3D; oXL.Workbooks.Add();<br>var oSheet &#x3D; oWB.ActiveSheet;<br>var hang &#x3D; objTable.rows.length;  </p>\n<p>var lie &#x3D; objTable.rows(0).cells.length;  </p>\n<p>&#x2F;&#x2F; Add table headers going cell by cell.<br>for (var i&#x3D;0;i&lt;hang;i++)<br>{<br>for (var j&#x3D;0;j&lt;lie;j++)<br>{<br>oSheet.Cells(i+1,j+1).value &#x3D; objTable.rows(i).cells(j).innerText;<br>}  </p>\n<p>}<br>oXL.Visible &#x3D; true;<br>oXL.UserControl &#x3D; true;<br>}  </p>\n<p>&#x2F;&#x2F;描述：将固定格式的xml文件导出excel文件<br>&#x2F;&#x2F;strXml：传入的xml字符串，一般为dataset直接getxml得到的就可以；<br>&#x2F;&#x2F;xmlField：要导入的字段和对应的中文名称，格式如下：<br>&#x2F;&#x2F;var xmlField&#x3D;”&amp; lt;FIELDLIST&gt;<TITLE>主题</TITLE><KEYWORD>关键词&lt; &#x2F;KEYWORD&gt;<TYPE>报题来源</TYPE>&lt;CREATE_DATE&gt;创建日期&lt; &#x2F;CREATE_DATE&gt;&lt;COLUMN_NAME&gt;所属栏目&lt;&#x2F;COLUMN_NAME&gt;&lt; &#x2F;FIELDLIST&gt;”;<br>function ExpXmlToExcel(strXml,xmlField)<br>{<br>&#x2F;&#x2F;导入xml字符串<br>var xmlDoc &#x3D; new XmlDoc();<br>xmlDoc.loadXML(strXml);<br>var nodesList &#x3D; xmlDoc.documentElement.childNodes;  </p>\n<p>&#x2F;&#x2F;导入字段列表；<br>var xmlDocField &#x3D; new XmlDoc();<br>xmlDocField.loadXML(xmlField);<br>var fieldList &#x3D; xmlDocField.documentElement.childNodes;  </p>\n<p>&#x2F;&#x2F; Start Excel and get Application object.<br>var oXL &#x3D; new ActiveXObject(“Excel.Application”);<br>&#x2F;&#x2F; Get a new workbook.<br>var oWB &#x3D; oXL.Workbooks.Add();<br>var oSheet &#x3D; oWB.ActiveSheet;<br>var hang &#x3D; nodesList.length;<br>var lie &#x3D; fieldList.length;<br>&#x2F;&#x2F;插入表头  </p>\n<p>for (var j&#x3D;0;j&lt;lie;j++)<br>{<br>oSheet.Cells(1,j+1).value &#x3D;fieldList[j].text;<br>}  </p>\n<p>&#x2F;&#x2F; Add table headers going cell by cell.<br>for (var i&#x3D;0;i&lt;hang;i++)<br>{<br>for (var j&#x3D;0;j&lt;lie;j++)<br>{<br>oSheet.Cells(i+2,j+1).value &#x3D; nodesList[i].selectSingleNode(fieldList[j].nodeName).text;<br>}<br>}<br>oXL.Visible &#x3D; true;<br>oXL.UserControl &#x3D; true;<br>}  </p>\n<p>&#x2F;&#x2F;指定页面区域内容导入Word<br>&#x2F;&#x2F;eDiv：要导出具体内容的div<br>function ExpHtmlToWord(eDiv)<br>{<br>var oWD &#x3D; new ActiveXObject(“Word.Application”);<br>var oDC &#x3D; oWD.Documents.Add(“”,0,1);<br>var oRange &#x3D;oDC.Range(0,1);<br>var sel &#x3D; document.body.createTextRange();  </p>\n<p>sel.moveToElementText(eDiv);<br>sel.select();<br>sel.execCommand(“Copy”);<br>oRange.Paste();<br>oWD.Application.Visible &#x3D; true;<br>}</p>\n<p>-———————————————————————————————————</p>\n<p>var fso &#x3D; new ActiveXObject(“Scripting.FileSystemObject”);<br>var a &#x3D; fso.CreateTextFile(“c:\\\\testfile.txt”, true);<br>a.WriteLine(“This is a test.”);<br>a.Close();</p>\n<p>FileSystemObject</p>\n<p>直接在服务端生成excel,<strong>txt</strong>,<strong>html</strong>发送给客户端下载岂不省事？ 何必多此一举非要到客户端转个圈圈呢.</p>\n<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<p>两种方案都可以实现，在netsuite中，我们可以使用nlapiPrintRecord(type, id, mode, properties)</p>\n<p>Parameters<br>? type {string} [required] - Print operation type: TRANSACTION|STATMENT<br>? id {string} [required] - The internal ID of the transaction or statement being printed<br>? mode {string} [optional] - The output type: PDF|HTML|DEFAULT. DEFAULT uses<br>the user&#x2F;company preference for print output<br>? properties {string} [optional] - Name&#x2F;value pairs used to configure the print operation.<br>Currently only supported for STATEMENT. Note that even if type is set to<br>STATEMENT, properties is still an optional argument.<br>? STATEMENT: openonly (T|F), statementdate, startdate</p>\n<p>Returns<br>? nlobjFile object</p>\n<p>Example</p>\n<p>function printTrans()<br>{<br>&#x2F;&#x2F;print the transaction to a PDF file object<br>var file &#x3D; nlapiPrintRecord(‘TRANSACTION’, 1799, ‘DEFAULT’, null);<br>&#x2F;&#x2F;send the PDF as an attachment<br>nlapiSendEmail(‘-5’, <a href=\"mailto:'test@totemsuite.com'\">‘test@totemsuite.com'</a>, ‘Incoming Transaction’, ‘Please see attached transaction’, null,<br>null, null, file);<br>}</p>\n<p>This sample shows how to create a PDF of a particular transaction. First the file variable is set<br>to a PDF file object. This PDF is then returned as an nlobjResponse object. The response object<br>content type is set to PDF (using the nlobjFile.getType() method). Finally, the the output of<br>the response object is written to the server.<br>var file &#x3D; nlapiPrintRecord(‘TRANSACTION’, 1799, ‘PDF’, null);<br>response.setContentType(file.getType());<br>response.write(file.getValue());</p>\n<p>直接在服务端生成相应的文件来给用户下载等动作的思路：</p>\n<p>nlobjFile<br>Primary object used to encapsulate files (attachments). Note that the following functions<br>return a reference to this object:<br>? nlapiCreateFile(name, type, contents)&#x2F;&#x2F;用来创建文件<br>? nlapiLoadFile(id)<br>? nlapiMergeRecord(id, baseType, baseId, altType, altId, fields)<br>? nlapiPrintRecord(type, id, mode, properties)<br>nlobjFile Methods<br>? “getId()” on page 1<br>? “getName()” on page 1<br>? “getSize()” on page 1<br>? “getType()” on page 1<br>? “getURL()” on page 1<br>? “getValue()” on page 1<br>? “setName(name)” on page 1</p>\n<p>nlapiCreateFile(name, type, contents) &#x2F;&#x2F;服务端专用<br>Instantiates and returns an nlobjFile object.<br>Use this API to create ad-hoc, non-binary virtual files for use as email or fax attachments. Note<br>that ad-hoc attachments created using nlapiCreateFile are “virtual” documents&#x2F;attachments<br>They are not actual file objects that can be stored in the NetSuite file cabinet.<br>The nlapiCreateFile API can also be used for streaming to clients (via Suitelets). For streaming<br>or attaching binary content, you can call the following:<br>? nlapiLoadRecord(type, id)<br>? nlapiPrintRecord(type, id, mode, properties)<br>? nlapiMergeRecord(id, baseType, baseId, altType, altId, fields)<br>Each of these APIs can load or generate binary content.<br><strong>Important: nlapiCreateFile is a server-side-only function.</strong><br>Parameters<br>? name {string} [required] - The name of the file<br>? type {string} [required] - The file type. For a list of supported file types, see Supported<br>File Types in the SuiteScript Reference Guide. Note that when specifiying the type for<br>an ad-hoc email or fax attachment, only non-binary types are supported (for example<br>PLAINTEXT, HTML, XML)<br>? contents {string} [required] - The contents of the file</p>\n<p>function sendAttachment()<br>{<br>var newAttachment &#x3D; nlapiCreateFile(‘helloworld.txt’, ‘PLAINTEXT’, ‘Hello World\\nHello World’);</p>\n<p>var pdfcontents &#x3D; nlapiMergeTemplate(…..)<br>var fileObj &#x3D; nlapiCreateFile(‘mypdf.pdf’, ‘PDF’, pdfcontents)</p>\n","more":"<p>&#x2F;&#x2F;传入一个table的id，将table的全部内容导出excel文件function AutomateExcel(objTable){&#x2F;&#x2F; Start Excel and get Application object.var oXL &#x3D; new ActiveXObject(“Excel.Application”);&#x2F;&#x2F; Get a new workbook.var oWB &#x3D; oXL.Workb…</p>\n<!-- more -->\n<p>&#x2F;&#x2F;传入一个table的id，将table的全部内容导出excel文件<br>function AutomateExcel(objTable)<br>{<br>&#x2F;&#x2F; Start Excel and get Application object.<br>var oXL &#x3D; new ActiveXObject(“Excel.Application”);<br>&#x2F;&#x2F; Get a new workbook.<br>var oWB &#x3D; oXL.Workbooks.Add();<br>var oSheet &#x3D; oWB.ActiveSheet;<br>var hang &#x3D; objTable.rows.length;  </p>\n<p>var lie &#x3D; objTable.rows(0).cells.length;  </p>\n<p>&#x2F;&#x2F; Add table headers going cell by cell.<br>for (var i&#x3D;0;i&lt;hang;i++)<br>{<br>for (var j&#x3D;0;j&lt;lie;j++)<br>{<br>oSheet.Cells(i+1,j+1).value &#x3D; objTable.rows(i).cells(j).innerText;<br>}  </p>\n<p>}<br>oXL.Visible &#x3D; true;<br>oXL.UserControl &#x3D; true;<br>}  </p>\n<p>&#x2F;&#x2F;描述：将固定格式的xml文件导出excel文件<br>&#x2F;&#x2F;strXml：传入的xml字符串，一般为dataset直接getxml得到的就可以；<br>&#x2F;&#x2F;xmlField：要导入的字段和对应的中文名称，格式如下：<br>&#x2F;&#x2F;var xmlField&#x3D;”&amp; lt;FIELDLIST&gt;<TITLE>主题</TITLE><KEYWORD>关键词&lt; &#x2F;KEYWORD&gt;<TYPE>报题来源</TYPE>&lt;CREATE_DATE&gt;创建日期&lt; &#x2F;CREATE_DATE&gt;&lt;COLUMN_NAME&gt;所属栏目&lt;&#x2F;COLUMN_NAME&gt;&lt; &#x2F;FIELDLIST&gt;”;<br>function ExpXmlToExcel(strXml,xmlField)<br>{<br>&#x2F;&#x2F;导入xml字符串<br>var xmlDoc &#x3D; new XmlDoc();<br>xmlDoc.loadXML(strXml);<br>var nodesList &#x3D; xmlDoc.documentElement.childNodes;  </p>\n<p>&#x2F;&#x2F;导入字段列表；<br>var xmlDocField &#x3D; new XmlDoc();<br>xmlDocField.loadXML(xmlField);<br>var fieldList &#x3D; xmlDocField.documentElement.childNodes;  </p>\n<p>&#x2F;&#x2F; Start Excel and get Application object.<br>var oXL &#x3D; new ActiveXObject(“Excel.Application”);<br>&#x2F;&#x2F; Get a new workbook.<br>var oWB &#x3D; oXL.Workbooks.Add();<br>var oSheet &#x3D; oWB.ActiveSheet;<br>var hang &#x3D; nodesList.length;<br>var lie &#x3D; fieldList.length;<br>&#x2F;&#x2F;插入表头  </p>\n<p>for (var j&#x3D;0;j&lt;lie;j++)<br>{<br>oSheet.Cells(1,j+1).value &#x3D;fieldList[j].text;<br>}  </p>\n<p>&#x2F;&#x2F; Add table headers going cell by cell.<br>for (var i&#x3D;0;i&lt;hang;i++)<br>{<br>for (var j&#x3D;0;j&lt;lie;j++)<br>{<br>oSheet.Cells(i+2,j+1).value &#x3D; nodesList[i].selectSingleNode(fieldList[j].nodeName).text;<br>}<br>}<br>oXL.Visible &#x3D; true;<br>oXL.UserControl &#x3D; true;<br>}  </p>\n<p>&#x2F;&#x2F;指定页面区域内容导入Word<br>&#x2F;&#x2F;eDiv：要导出具体内容的div<br>function ExpHtmlToWord(eDiv)<br>{<br>var oWD &#x3D; new ActiveXObject(“Word.Application”);<br>var oDC &#x3D; oWD.Documents.Add(“”,0,1);<br>var oRange &#x3D;oDC.Range(0,1);<br>var sel &#x3D; document.body.createTextRange();  </p>\n<p>sel.moveToElementText(eDiv);<br>sel.select();<br>sel.execCommand(“Copy”);<br>oRange.Paste();<br>oWD.Application.Visible &#x3D; true;<br>}</p>\n<p>-———————————————————————————————————</p>\n<p>var fso &#x3D; new ActiveXObject(“Scripting.FileSystemObject”);<br>var a &#x3D; fso.CreateTextFile(“c:\\\\testfile.txt”, true);<br>a.WriteLine(“This is a test.”);<br>a.Close();</p>\n<p>FileSystemObject</p>\n<p>直接在服务端生成excel,<strong>txt</strong>,<strong>html</strong>发送给客户端下载岂不省事？ 何必多此一举非要到客户端转个圈圈呢.</p>\n<p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<p>两种方案都可以实现，在netsuite中，我们可以使用nlapiPrintRecord(type, id, mode, properties)</p>\n<p>Parameters<br>? type {string} [required] - Print operation type: TRANSACTION|STATMENT<br>? id {string} [required] - The internal ID of the transaction or statement being printed<br>? mode {string} [optional] - The output type: PDF|HTML|DEFAULT. DEFAULT uses<br>the user&#x2F;company preference for print output<br>? properties {string} [optional] - Name&#x2F;value pairs used to configure the print operation.<br>Currently only supported for STATEMENT. Note that even if type is set to<br>STATEMENT, properties is still an optional argument.<br>? STATEMENT: openonly (T|F), statementdate, startdate</p>\n<p>Returns<br>? nlobjFile object</p>\n<p>Example</p>\n<p>function printTrans()<br>{<br>&#x2F;&#x2F;print the transaction to a PDF file object<br>var file &#x3D; nlapiPrintRecord(‘TRANSACTION’, 1799, ‘DEFAULT’, null);<br>&#x2F;&#x2F;send the PDF as an attachment<br>nlapiSendEmail(‘-5’, <a href=\"mailto:'test@totemsuite.com'\">‘test@totemsuite.com'</a>, ‘Incoming Transaction’, ‘Please see attached transaction’, null,<br>null, null, file);<br>}</p>\n<p>This sample shows how to create a PDF of a particular transaction. First the file variable is set<br>to a PDF file object. This PDF is then returned as an nlobjResponse object. The response object<br>content type is set to PDF (using the nlobjFile.getType() method). Finally, the the output of<br>the response object is written to the server.<br>var file &#x3D; nlapiPrintRecord(‘TRANSACTION’, 1799, ‘PDF’, null);<br>response.setContentType(file.getType());<br>response.write(file.getValue());</p>\n<p>直接在服务端生成相应的文件来给用户下载等动作的思路：</p>\n<p>nlobjFile<br>Primary object used to encapsulate files (attachments). Note that the following functions<br>return a reference to this object:<br>? nlapiCreateFile(name, type, contents)&#x2F;&#x2F;用来创建文件<br>? nlapiLoadFile(id)<br>? nlapiMergeRecord(id, baseType, baseId, altType, altId, fields)<br>? nlapiPrintRecord(type, id, mode, properties)<br>nlobjFile Methods<br>? “getId()” on page 1<br>? “getName()” on page 1<br>? “getSize()” on page 1<br>? “getType()” on page 1<br>? “getURL()” on page 1<br>? “getValue()” on page 1<br>? “setName(name)” on page 1</p>\n<p>nlapiCreateFile(name, type, contents) &#x2F;&#x2F;服务端专用<br>Instantiates and returns an nlobjFile object.<br>Use this API to create ad-hoc, non-binary virtual files for use as email or fax attachments. Note<br>that ad-hoc attachments created using nlapiCreateFile are “virtual” documents&#x2F;attachments<br>They are not actual file objects that can be stored in the NetSuite file cabinet.<br>The nlapiCreateFile API can also be used for streaming to clients (via Suitelets). For streaming<br>or attaching binary content, you can call the following:<br>? nlapiLoadRecord(type, id)<br>? nlapiPrintRecord(type, id, mode, properties)<br>? nlapiMergeRecord(id, baseType, baseId, altType, altId, fields)<br>Each of these APIs can load or generate binary content.<br><strong>Important: nlapiCreateFile is a server-side-only function.</strong><br>Parameters<br>? name {string} [required] - The name of the file<br>? type {string} [required] - The file type. For a list of supported file types, see Supported<br>File Types in the SuiteScript Reference Guide. Note that when specifiying the type for<br>an ad-hoc email or fax attachment, only non-binary types are supported (for example<br>PLAINTEXT, HTML, XML)<br>? contents {string} [required] - The contents of the file</p>\n<p>function sendAttachment()<br>{<br>var newAttachment &#x3D; nlapiCreateFile(‘helloworld.txt’, ‘PLAINTEXT’, ‘Hello World\\nHello World’);</p>\n<p>var pdfcontents &#x3D; nlapiMergeTemplate(…..)<br>var fileObj &#x3D; nlapiCreateFile(‘mypdf.pdf’, ‘PDF’, pdfcontents)</p>\n","categories":[{"name":"NetSuite","path":"api/categories/NetSuite.json"}],"tags":[{"name":"NetSuite","path":"api/tags/NetSuite.json"}]}