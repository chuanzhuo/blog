{"title":"Hexo多语言解决方案实践记录","slug":"Hexo多语言解决方案实践记录","date":"2023-12-28T02:13:47.000Z","updated":"2023-12-31T01:11:46.619Z","comments":true,"path":"api/articles/Hexo多语言解决方案实践记录.json","excerpt":" [Figure] ","covers":null,"content":"<img class=\"lozad\" data-src=\"\">\n\n<span id=\"more\"></span>\n\n<h1 id=\"有什么用\"><a href=\"#有什么用\" class=\"headerlink\" title=\"有什么用\"></a>有什么用</h1><p>这个自定义方案结合了：</p>\n<p>1、利用<code>hexo-generator-i18n</code>插件，在文章中加入<code>lang</code>标识来区分，然后在渲染的时候在利用模版程序判断生成</p>\n<p>2、直接部署两套Hexo，上传到不同的库当中，然后页面上添加手动切换</p>\n<h1 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h1><p>cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd ~&#x2F;AppTesting&#x2F;article_en &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; cp -r ~&#x2F;AppTesting&#x2F;article_en&#x2F;public&#x2F;. ~&#x2F;AppTesting&#x2F;blog&#x2F;public&#x2F;en&#x2F; &amp;&amp; HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” hexo d</p>\n<h1 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h1><iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://query.carlzeng.top:3/appsearch?q=hexo\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"500\"></iframe>\n\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><h3 id=\"创建-Github-Workflow\"><a href=\"#创建-Github-Workflow\" class=\"headerlink\" title=\"创建 Github Workflow\"></a>创建 Github Workflow</h3><blockquote>\n<p>简单解释一下，当我们推送内容到远程 <code>master</code> 分支的时候，就会触发这个 Workflow。</p>\n</blockquote>\n<p>我的发布都是直接 hexo d的，没有额外&#x2F;单独有git push的动作。</p>\n<h4 id=\"利用skip-render排除不同的文件\"><a href=\"#利用skip-render排除不同的文件\" class=\"headerlink\" title=\"利用skip_render排除不同的文件\"></a>利用skip_render排除不同的文件</h4><p>在<code>source/_posts</code>下面新建两个文件<code>cn</code>和<code>en</code>里面放中文和英文的文章，然后在系统配置文件当中利用<code>skip_render</code>来区分：</p>\n<p>在<code>_config.yml</code>里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render:</span><br><span class=\"line\">  - _posts/en/**</span><br></pre></td></tr></table></figure>\n\n<p>在<code>_config_en.yml</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render:</span><br><span class=\"line\">  - _posts/cn/**</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>先实现，手动的把两个目录下生成的md文件；都上传到两个不同的github repository</p>\n<p>11:27am 如何让不同的文件夹下的md 生成到不同的目标文件夹中去？</p>\n<p>实现了article_en下独立的hexo的运行</p>\n<p>复制出一个article_en文件夹下的内容之后：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf node_modules &amp;&amp; npm install      </span><br></pre></td></tr></table></figure>\n\n\n\n<p>下一步打算的deploy流程（单个命令实现）</p>\n<p>cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp;cd ~&#x2F;AppTesting&#x2F;article_en &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; cp -r ~&#x2F;AppTesting&#x2F;article_en&#x2F;public&#x2F;. ~&#x2F;AppTesting&#x2F;blog&#x2F;public&#x2F;en&#x2F; &amp;&amp; hexo d</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录结构：</span><br><span class=\"line\">AppTesting</span><br><span class=\"line\">\t- blog</span><br><span class=\"line\">\t- article_en</span><br></pre></td></tr></table></figure>\n\n\n\n<p>需要一个node的程序，或接口，可以简易的把blog下的某个.md文件全文翻译成英语（或其他语言），然后将生成的心的文件放到article_en的子文件夹下</p>\n<h1 id=\"灵感来源\"><a href=\"#灵感来源\" class=\"headerlink\" title=\"灵感来源\"></a>灵感来源</h1><p><a href=\"https://www.igerm.ee/experience/%E5%AE%8C%E7%BE%8E%E7%9A%84Hexo%E5%A4%9A%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">https://www.igerm.ee/experience/%E5%AE%8C%E7%BE%8E%E7%9A%84Hexo%E5%A4%9A%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88</a></p>\n<hr>\n<p><a href=\"https://github.com/CrazyMayfly/Free-Markdown-Translator/tree/master\">https://github.com/CrazyMayfly/Free-Markdown-Translator/tree/master</a></p>\n<p>如何让python的运行在有proxy的状态下？</p>\n<p>又下载测试了这个方案：<a href=\"https://github.com/soimort/translate-shell\">https://github.com/soimort/translate-shell</a><br>    homebrew下了半天，运行 翻译，也是无效了。</p>\n<p>还是用自己架设的chat gpt吧；<br>    复制黏贴回车，在复制结果，粘贴进Typora；<br>    格式还都保留了（html也保留了，很漂亮）</p>\n<p>cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp;cd ~&#x2F;AppTesting&#x2F;article_en &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; cp -r ~&#x2F;AppTesting&#x2F;article_en&#x2F;public&#x2F;. ~&#x2F;AppTesting&#x2F;blog&#x2F;public&#x2F;en&#x2F; &amp;&amp; hexo d</p>\n<pre><code>目录结构\nAppTesting\n    - blog\n    - article_en\n</code></pre>\n<p>Updates：<br>en站的footer<br>把hexo-server&#x2F;index.js改到本地4001端口，这样两个站点可以同时打开调试。<br>post详细页面中所有包含中文的模版部分</p>\n","more":"<h1 id=\"有什么用\"><a href=\"#有什么用\" class=\"headerlink\" title=\"有什么用\"></a>有什么用</h1><p>这个自定义方案结合了：</p>\n<p>1、利用<code>hexo-generator-i18n</code>插件，在文章中加入<code>lang</code>标识来区分，然后在渲染的时候在利用模版程序判断生成</p>\n<p>2、直接部署两套Hexo，上传到不同的库当中，然后页面上添加手动切换</p>\n<h1 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h1><p>cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd ~&#x2F;AppTesting&#x2F;article_en &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; cp -r ~&#x2F;AppTesting&#x2F;article_en&#x2F;public&#x2F;. ~&#x2F;AppTesting&#x2F;blog&#x2F;public&#x2F;en&#x2F; &amp;&amp; HTTPS_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7890” hexo d</p>\n<h1 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h1><iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://query.carlzeng.top:3/appsearch?q=hexo\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"500\"></iframe>\n\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><h3 id=\"创建-Github-Workflow\"><a href=\"#创建-Github-Workflow\" class=\"headerlink\" title=\"创建 Github Workflow\"></a>创建 Github Workflow</h3><blockquote>\n<p>简单解释一下，当我们推送内容到远程 <code>master</code> 分支的时候，就会触发这个 Workflow。</p>\n</blockquote>\n<p>我的发布都是直接 hexo d的，没有额外&#x2F;单独有git push的动作。</p>\n<h4 id=\"利用skip-render排除不同的文件\"><a href=\"#利用skip-render排除不同的文件\" class=\"headerlink\" title=\"利用skip_render排除不同的文件\"></a>利用skip_render排除不同的文件</h4><p>在<code>source/_posts</code>下面新建两个文件<code>cn</code>和<code>en</code>里面放中文和英文的文章，然后在系统配置文件当中利用<code>skip_render</code>来区分：</p>\n<p>在<code>_config.yml</code>里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render:</span><br><span class=\"line\">  - _posts/en/**</span><br></pre></td></tr></table></figure>\n\n<p>在<code>_config_en.yml</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render:</span><br><span class=\"line\">  - _posts/cn/**</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>先实现，手动的把两个目录下生成的md文件；都上传到两个不同的github repository</p>\n<p>11:27am 如何让不同的文件夹下的md 生成到不同的目标文件夹中去？</p>\n<p>实现了article_en下独立的hexo的运行</p>\n<p>复制出一个article_en文件夹下的内容之后：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf node_modules &amp;&amp; npm install      </span><br></pre></td></tr></table></figure>\n\n\n\n<p>下一步打算的deploy流程（单个命令实现）</p>\n<p>cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp;cd ~&#x2F;AppTesting&#x2F;article_en &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; cp -r ~&#x2F;AppTesting&#x2F;article_en&#x2F;public&#x2F;. ~&#x2F;AppTesting&#x2F;blog&#x2F;public&#x2F;en&#x2F; &amp;&amp; hexo d</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录结构：</span><br><span class=\"line\">AppTesting</span><br><span class=\"line\">\t- blog</span><br><span class=\"line\">\t- article_en</span><br></pre></td></tr></table></figure>\n\n\n\n<p>需要一个node的程序，或接口，可以简易的把blog下的某个.md文件全文翻译成英语（或其他语言），然后将生成的心的文件放到article_en的子文件夹下</p>\n<h1 id=\"灵感来源\"><a href=\"#灵感来源\" class=\"headerlink\" title=\"灵感来源\"></a>灵感来源</h1><p><a href=\"https://www.igerm.ee/experience/%E5%AE%8C%E7%BE%8E%E7%9A%84Hexo%E5%A4%9A%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">https://www.igerm.ee/experience/%E5%AE%8C%E7%BE%8E%E7%9A%84Hexo%E5%A4%9A%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88</a></p>\n<hr>\n<p><a href=\"https://github.com/CrazyMayfly/Free-Markdown-Translator/tree/master\">https://github.com/CrazyMayfly/Free-Markdown-Translator/tree/master</a></p>\n<p>如何让python的运行在有proxy的状态下？</p>\n<p>又下载测试了这个方案：<a href=\"https://github.com/soimort/translate-shell\">https://github.com/soimort/translate-shell</a><br>    homebrew下了半天，运行 翻译，也是无效了。</p>\n<p>还是用自己架设的chat gpt吧；<br>    复制黏贴回车，在复制结果，粘贴进Typora；<br>    格式还都保留了（html也保留了，很漂亮）</p>\n<p>cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp;cd ~&#x2F;AppTesting&#x2F;article_en &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd ~&#x2F;AppTesting&#x2F;blog &amp;&amp; cp -r ~&#x2F;AppTesting&#x2F;article_en&#x2F;public&#x2F;. ~&#x2F;AppTesting&#x2F;blog&#x2F;public&#x2F;en&#x2F; &amp;&amp; hexo d</p>\n<pre><code>目录结构\nAppTesting\n    - blog\n    - article_en\n</code></pre>\n<p>Updates：<br>en站的footer<br>把hexo-server&#x2F;index.js改到本地4001端口，这样两个站点可以同时打开调试。<br>post详细页面中所有包含中文的模版部分</p>","categories":[{"name":"Hexo","path":"api/categories/Hexo.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"},{"name":"language","path":"api/tags/language.json"},{"name":"i18n","path":"api/tags/i18n.json"}]}