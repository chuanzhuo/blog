{"title":"Hexo之相关内容CORS跨域实现方案","slug":"Hexo之相关内容CORS跨域实现方案","date":"2023-12-10T06:05:51.000Z","updated":"2023-12-28T06:38:03.127Z","comments":true,"path":"api/articles/Hexo之相关内容CORS跨域实现方案.json","excerpt":" [Figure] ","covers":null,"content":"<img class=\"lozad\" data-src=\"\">\n\n<span id=\"more\"></span>\n\n<p>下一步：在本地服务器上开放一个特定的端口，让它处理跨域的请求</p>\n<p>返回HTML或者xml或者json。。。</p>\n<p>然后相关内容就可以展现在不同的域名下（网站各个平台）</p>\n<p>选一个framework来处理这样的请求：</p>\n<h1 id=\"有什么用\"><a href=\"#有什么用\" class=\"headerlink\" title=\"有什么用\"></a>有什么用</h1><p>讨论CORS</p>\n<h1 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h1><iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://query.carlzeng.top:3/appsearch?q=cors\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"500\"></iframe>\n\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><p>hexo new page ‘interest’<br>    no</p>\n<p>我曾经有试着拓展 Hexo 的功能性，诸如 hexo-generator-restful 和 hexo-generator-json-content 这些插件可以生成出 JSON，以供其他的功能需求。</p>\n<p>Strapi 提供了后端和一个方便数据模型和内容管理的后台，支持国际化，具有插件 API，更好的是，它有更加完善的账号的鉴权和权限管理。除此之外，它还能用 RESTful (是真的 RESTful) 和 GraphQL 两种方式来提供 API。<br>11:29am 不是用rest api的方式来解决，<br>    直接使用js ajax的方式，操作dom.div来展示html内容<br>    对于相关内容，足够用了！</p>\n<p>Access to XMLHttpRequest at ‘<a href=\"https://www.carlzeng.top/search.xml\">https://www.carlzeng.top/search.xml</a>‘ from origin ‘<a href=\"http://localhost:4000/\">http://localhost:4000</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p>\n<p><a href=\"https://github.com/AiYooooo/hexo-blog/blob/master/source/_posts/JS%E8%B7%A8%E5%9F%9F%E7%AC%94%E8%AE%B0.md\">JS跨域笔记.md</a></p>\n<p>​\t</p>\n<p>​\t<br>当发送网络请求时，如果同一协议、同一域名、同一端口三个条件有一个不满足，浏览器就会报错。 No ‘Access-Control-Allow-Origin’ header is present on the requested resource</p>\n<p>总结一下常见的几种跨域方法。</p>\n<p>12:23pm<br>    为 Hexo 博客创建本地搜索引擎<br> <a href=\"https://liam.page/2017/09/21/local-search-engine-in-Hexo-site/\">https://liam.page/2017/09/21/local-search-engine-in-Hexo-site/</a></p>\n<p><a href=\"https://github.com/fun90/hexo/blob/master/source/_posts/Ajax%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98(HTTP,HTTPS).md\">Ajax跨域问题(HTTP,HTTPS).md</a></p>\n<p>​\t</p>\n<p> hexo 如何瘦身search.xml<br>     无法解决，属于是hexo的局限性<br>     <a href=\"https://github.com/iissnan/hexo-theme-next/issues/1146\">https://github.com/iissnan/hexo-theme-next/issues/1146</a><br>     可以把模版修改成search.xml仅包含标题，技术上可行，可实际上不科学，更希望是截取多少个字符内的内容作为搜索的范围</p>\n<p>可以写一个自己的接口在，另外一台服务器上，然后缓存最新的search.xml文件；这样搜索都提交到新的WS服务器节点，这个节点在服务端全文检索之后，给出记过即可！<br>    调用的服务不要去呼叫<a href=\"http://www.carlzeng.top,去呼叫本地映射到外网的服务;/\">www.carlzeng.top,去呼叫本地映射到外网的服务；</a><br>    需要一个framework来处理这样的请求；返回json或者html即可（然后本身就携带http Access-Control-Allow-Origin *）<br>        搭配方案：<a href=\"https://github.com/AiYooooo/hexo-blog/blob/master/source/_posts/JS%E8%B7%A8%E5%9F%9F%E7%AC%94%E8%AE%B0.md#cors\">https://github.com/AiYooooo/hexo-blog/blob/master/source/_posts/JS%E8%B7%A8%E5%9F%9F%E7%AC%94%E8%AE%B0.md#cors</a></p>\n<blockquote>\n<p>12:30pm</p>\n</blockquote>\n<p>1:50pm nodeJS对服务端的实现案例：<a href=\"https://superdeng3.github.io/2019/04/03/%E8%B7%A8%E5%9F%9F/\">跨域</a></p>\n<hr>\n<p>node.js 处理ajax并发效率如何<br>    <a href=\"https://103.211.124.110/article/175407.html\">轻松创建nodejs服务器(8):非阻塞是如何实现的_node.js</a><br>    ws：是nodejs的一个WebSocket库，可以用来创建服务。<br>    <a href=\"https://github.com/websockets/ws\">https://github.com/websockets/ws</a><br>    Web端，browser：<br>        <a href=\"https://github.com/heineiuo/isomorphic-ws\">https://github.com/heineiuo/isomorphic-ws</a></p>\n","more":"<p>下一步：在本地服务器上开放一个特定的端口，让它处理跨域的请求</p>\n<p>返回HTML或者xml或者json。。。</p>\n<p>然后相关内容就可以展现在不同的域名下（网站各个平台）</p>\n<p>选一个framework来处理这样的请求：</p>\n<h1 id=\"有什么用\"><a href=\"#有什么用\" class=\"headerlink\" title=\"有什么用\"></a>有什么用</h1><p>讨论CORS</p>\n<h1 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h1><iframe style=\"box-shadow: 0px 0px 20px -10px;\" src=\"https://query.carlzeng.top:3/appsearch?q=cors\" frameborder=\"0\" scrolling=\"auto\" width=\"100%\" height=\"500\"></iframe>\n\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><p>hexo new page ‘interest’<br>    no</p>\n<p>我曾经有试着拓展 Hexo 的功能性，诸如 hexo-generator-restful 和 hexo-generator-json-content 这些插件可以生成出 JSON，以供其他的功能需求。</p>\n<p>Strapi 提供了后端和一个方便数据模型和内容管理的后台，支持国际化，具有插件 API，更好的是，它有更加完善的账号的鉴权和权限管理。除此之外，它还能用 RESTful (是真的 RESTful) 和 GraphQL 两种方式来提供 API。<br>11:29am 不是用rest api的方式来解决，<br>    直接使用js ajax的方式，操作dom.div来展示html内容<br>    对于相关内容，足够用了！</p>\n<p>Access to XMLHttpRequest at ‘<a href=\"https://www.carlzeng.top/search.xml\">https://www.carlzeng.top/search.xml</a>‘ from origin ‘<a href=\"http://localhost:4000/\">http://localhost:4000</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p>\n<p><a href=\"https://github.com/AiYooooo/hexo-blog/blob/master/source/_posts/JS%E8%B7%A8%E5%9F%9F%E7%AC%94%E8%AE%B0.md\">JS跨域笔记.md</a></p>\n<p>​\t</p>\n<p>​\t<br>当发送网络请求时，如果同一协议、同一域名、同一端口三个条件有一个不满足，浏览器就会报错。 No ‘Access-Control-Allow-Origin’ header is present on the requested resource</p>\n<p>总结一下常见的几种跨域方法。</p>\n<p>12:23pm<br>    为 Hexo 博客创建本地搜索引擎<br> <a href=\"https://liam.page/2017/09/21/local-search-engine-in-Hexo-site/\">https://liam.page/2017/09/21/local-search-engine-in-Hexo-site/</a></p>\n<p><a href=\"https://github.com/fun90/hexo/blob/master/source/_posts/Ajax%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98(HTTP,HTTPS).md\">Ajax跨域问题(HTTP,HTTPS).md</a></p>\n<p>​\t</p>\n<p> hexo 如何瘦身search.xml<br>     无法解决，属于是hexo的局限性<br>     <a href=\"https://github.com/iissnan/hexo-theme-next/issues/1146\">https://github.com/iissnan/hexo-theme-next/issues/1146</a><br>     可以把模版修改成search.xml仅包含标题，技术上可行，可实际上不科学，更希望是截取多少个字符内的内容作为搜索的范围</p>\n<p>可以写一个自己的接口在，另外一台服务器上，然后缓存最新的search.xml文件；这样搜索都提交到新的WS服务器节点，这个节点在服务端全文检索之后，给出记过即可！<br>    调用的服务不要去呼叫<a href=\"http://www.carlzeng.top,去呼叫本地映射到外网的服务;/\">www.carlzeng.top,去呼叫本地映射到外网的服务；</a><br>    需要一个framework来处理这样的请求；返回json或者html即可（然后本身就携带http Access-Control-Allow-Origin *）<br>        搭配方案：<a href=\"https://github.com/AiYooooo/hexo-blog/blob/master/source/_posts/JS%E8%B7%A8%E5%9F%9F%E7%AC%94%E8%AE%B0.md#cors\">https://github.com/AiYooooo/hexo-blog/blob/master/source/_posts/JS%E8%B7%A8%E5%9F%9F%E7%AC%94%E8%AE%B0.md#cors</a></p>\n<blockquote>\n<p>12:30pm</p>\n</blockquote>\n<p>1:50pm nodeJS对服务端的实现案例：<a href=\"https://superdeng3.github.io/2019/04/03/%E8%B7%A8%E5%9F%9F/\">跨域</a></p>\n<hr>\n<p>node.js 处理ajax并发效率如何<br>    <a href=\"https://103.211.124.110/article/175407.html\">轻松创建nodejs服务器(8):非阻塞是如何实现的_node.js</a><br>    ws：是nodejs的一个WebSocket库，可以用来创建服务。<br>    <a href=\"https://github.com/websockets/ws\">https://github.com/websockets/ws</a><br>    Web端，browser：<br>        <a href=\"https://github.com/heineiuo/isomorphic-ws\">https://github.com/heineiuo/isomorphic-ws</a></p>","categories":[{"name":"CORS","path":"api/categories/CORS.json"}],"tags":[{"name":"hexo","path":"api/tags/hexo.json"},{"name":"Javascript","path":"api/tags/Javascript.json"},{"name":"CORS","path":"api/tags/CORS.json"},{"name":"跨域","path":"api/tags/跨域.json"}]}