{"title":"Js MD5加密问题-CarlZeng","slug":"Js-MD5加密问题-CarlZeng","date":"2009-01-05T03:13:00.000Z","updated":"2023-10-08T14:21:10.120Z","comments":true,"path":"api/articles/Js-MD5加密问题-CarlZeng.json","excerpt":"在说MD5前先说两种编码：1、escape加密解密，将下面代码保存为escape.htm。运行后，就会看到效果：简单吧？这里加密用到escape函数，解密用到unescape函数。2、URL加密解密，将下面代码保存为url.htm。运行后，就会看到效果：这里加密用到encodeURI函数，解密用到decodeURI函数。---------------------------------------...","covers":null,"content":"<p>在说MD5前先说两种编码：1、escape加密解密，将下面代码保存为escape.htm。运行后，就会看到效果：简单吧？这里加密用到escape函数，解密用到unescape函数。2、URL加密解密，将下面代码保存为url.htm。运行后，就会看到效果：这里加密用到encodeURI函数，解密用到decodeURI函数。—————————————…</p>\n<!-- more -->\n<p>在说MD5前先说两种编码：</p>\n<p>1、escape加密解密，将下面代码保存为escape.htm。运行后，就会看到效果：  </p>\n<Script language=\"javascript\">  \nstr = \"blog:余弦函数\"  \nalert(\"待加密的字符串：\" + str)  \nvar e = escape(str);  \nalert(\"escape加密后: \" + e);  \nvar u = unescape(e);  \nalert(\"unescape解密后: \" + u);  \n</script>  \n<p>简单吧？这里加密用到escape函数，解密用到unescape函数。  </p>\n<p>2、URL加密解密，将下面代码保存为url.htm。运行后，就会看到效果：  </p>\n<Script language=\"javascript\">  \nurl = \"http://hi.baidu.com/余弦函数\"  \nvar e = encodeURI(url);  \nalert(\"加密后的URL：\" + e);  \nvar d = decodeURI(e);  \nalert(\"解密后的URL：\" + d);  \n</script>  \n<p>这里加密用到encodeURI函数，解密用到decodeURI函数。—————————————————–</p>\n<p>首先你要去  </p>\n<p><a href=\"http://pajhome.org.uk/crypt/md5/\">md5的js下载地址&#x2F;</a>  </p>\n<p>下载一个js的使用代码  </p>\n<p>调用：  </p>\n<p>CODE:</p>\n<p><a href=\"http://www.phpchina.com/html/70/3870-2186.html###\">[Copy to clipboard]</a></p>\n<script type=\"text/javascript\" src=\"md5.js\"></script>\n\n<p>实现加密：  </p>\n<p>CODE:</p>\n<p><a href=\"http://www.phpchina.com/html/70/3870-2186.html###\">[Copy to clipboard]</a></p>\n<script type=\"text/javascript\" >  \nhash = hex\\_md5(\"input string\");  \n</script>\n\n<p>或者只要在  </p>\n<p>CODE:</p>\n<p><a href=\"http://www.phpchina.com/html/70/3870-2186.html###\">[Copy to clipboard]</a></p>\n<form onsubmit=\"pwd.value =hex\\_md5(pwd.value)\">\n\n<p>这样做的好处是  </p>\n<p>CODE:</p>\n<p><a href=\"http://www.phpchina.com/html/70/3870-2186.html###\">[Copy to clipboard]</a></p>\n<p>1.通过这个md5的js生成的代码和php的是一样，减少服务器在md5加密的负担  </p>\n<p>2.因为密码是直接在客户端就进行加密，不像php要传到服务器端才加密，这样传输过程的安全也得到进一步的加强</p>\n<p>具体计算的代码如下：</p>\n<p>＜script＞<br>&#x2F;* MD5 Message-Digest Algorithm - JavaScript<br>MODIFICATION HISTORY:<br>1.0 16-Feb-2001 - Phil Fresle (＜A href&#x3D;”mailto:<a href=\"mailto:&#115;&#x61;&#x6c;&#101;&#115;&#x40;&#102;&#x72;&#101;&#x7a;&#x2e;&#x63;&#x6f;&#46;&#117;&#x6b;\">&#115;&#x61;&#x6c;&#101;&#115;&#x40;&#102;&#x72;&#101;&#x7a;&#x2e;&#x63;&#x6f;&#46;&#117;&#x6b;</a>“＞<a href=\"mailto:&#115;&#97;&#x6c;&#101;&#x73;&#x40;&#x66;&#114;&#101;&#122;&#x2e;&#x63;&#x6f;&#46;&#x75;&#x6b;\">&#115;&#97;&#x6c;&#101;&#x73;&#x40;&#x66;&#114;&#101;&#122;&#x2e;&#x63;&#x6f;&#46;&#x75;&#x6b;</a>＜&#x2F;A＞) - Initial Version (VB&#x2F;ASP code)<br>1.0 21-Feb-2001 - Enrico Mosanghini (＜A href&#x3D;”mailto:<a href=\"mailto:&#x65;&#114;&#x69;&#107;&#x35;&#x30;&#52;&#64;&#x79;&#x61;&#x68;&#x6f;&#111;&#x2e;&#x63;&#111;&#x6d;\">&#x65;&#114;&#x69;&#107;&#x35;&#x30;&#52;&#64;&#x79;&#x61;&#x68;&#x6f;&#111;&#x2e;&#x63;&#111;&#x6d;</a>“＞<a href=\"mailto:&#x65;&#114;&#x69;&#x6b;&#53;&#48;&#x34;&#64;&#121;&#97;&#104;&#x6f;&#111;&#46;&#x63;&#x6f;&#x6d;\">&#x65;&#114;&#x69;&#x6b;&#53;&#48;&#x34;&#64;&#121;&#97;&#104;&#x6f;&#111;&#46;&#x63;&#x6f;&#x6d;</a>＜&#x2F;A＞) - JavaScript porting<br>*&#x2F;<br>function MD5(sMessage) {<br>function RotateLeft(lValue, iShiftBits) { return (lValue＜＜iShiftBits) | (lValue＞＞＞(32-iShiftBits)); }<br>function AddUnsigned(lX,lY) {<br>var lX4,lY4,lX8,lY8,lResult;<br>lX8 &#x3D; (lX &amp; 0x80000000);<br>lY8 &#x3D; (lY &amp; 0x80000000);<br>lX4 &#x3D; (lX &amp; 0x40000000);<br>lY4 &#x3D; (lY &amp; 0x40000000);<br>lResult &#x3D; (lX &amp; 0x3FFFFFFF)+(lY &amp; 0x3FFFFFFF);<br>if (lX4 &amp; lY4) return (lResult ^ 0x80000000 ^ lX8 ^ lY8);<br>if (lX4 | lY4) {<br>if (lResult &amp; 0x40000000) return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);<br>else return (lResult ^ 0x40000000 ^ lX8 ^ lY8);<br>} else return (lResult ^ lX8 ^ lY8);<br>}<br>function F(x,y,z) { return (x &amp; y) | ((<del>x) &amp; z); }<br>function G(x,y,z) { return (x &amp; z) | (y &amp; (</del>z)); }<br>function H(x,y,z) { return (x ^ y ^ z); }<br>function I(x,y,z) { return (y ^ (x | (~z))); }<br>function FF(a,b,c,d,x,s,ac) {<br>a &#x3D; AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));<br>return AddUnsigned(RotateLeft(a, s), b);<br>}<br>function GG(a,b,c,d,x,s,ac) {<br>a &#x3D; AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));<br>return AddUnsigned(RotateLeft(a, s), b);<br>}<br>function HH(a,b,c,d,x,s,ac) {<br>a &#x3D; AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));<br>return AddUnsigned(RotateLeft(a, s), b);<br>}<br>function II(a,b,c,d,x,s,ac) {<br>a &#x3D; AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));<br>return AddUnsigned(RotateLeft(a, s), b);<br>}<br>function ConvertToWordArray(sMessage) {<br>var lWordCount;<br>var lMessageLength &#x3D; sMessage.length;<br>var lNumberOfWords_temp1&#x3D;lMessageLength + 8;<br>var lNumberOfWords_temp2&#x3D;(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))&#x2F;64;<br>var lNumberOfWords &#x3D; (lNumberOfWords_temp2+1)*16;<br>var lWordArray&#x3D;Array(lNumberOfWords-1);<br>var lBytePosition &#x3D; 0;<br>var lByteCount &#x3D; 0;<br>while ( lByteCount ＜ lMessageLength ) {<br>lWordCount &#x3D; (lByteCount-(lByteCount % 4))&#x2F;4;<br>lBytePosition &#x3D; (lByteCount % 4)*8;<br>lWordArray[lWordCount] &#x3D; (lWordArray[lWordCount] | (sMessage.charCodeAt(lByteCount)＜＜lBytePosition));<br>lByteCount++;<br>}<br>lWordCount &#x3D; (lByteCount-(lByteCount % 4))&#x2F;4;<br>lBytePosition &#x3D; (lByteCount % 4)*8;<br>lWordArray[lWordCount] &#x3D; lWordArray[lWordCount] | (0x80＜＜lBytePosition);<br>lWordArray[lNumberOfWords-2] &#x3D; lMessageLength＜＜3;<br>lWordArray[lNumberOfWords-1] &#x3D; lMessageLength＞＞＞29;<br>return lWordArray;<br>}<br>function WordToHex(lValue) {<br>var WordToHexValue&#x3D;””,WordToHexValue_temp&#x3D;””,lByte,lCount;<br>for (lCount &#x3D; 0;lCount＜&#x3D;3;lCount++) {<br>lByte &#x3D; (lValue＞＞＞(lCount*8)) &amp; 255;<br>WordToHexValue_temp &#x3D; “0” + lByte.toString(16);<br>WordToHexValue &#x3D; WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);<br>}<br>return WordToHexValue;<br>}<br>var x&#x3D;Array();<br>var k,AA,BB,CC,DD,a,b,c,d<br>var S11&#x3D;7, S12&#x3D;12, S13&#x3D;17, S14&#x3D;22;<br>var S21&#x3D;5, S22&#x3D;9 , S23&#x3D;14, S24&#x3D;20;<br>var S31&#x3D;4, S32&#x3D;11, S33&#x3D;16, S34&#x3D;23;<br>var S41&#x3D;6, S42&#x3D;10, S43&#x3D;15, S44&#x3D;21;<br>&#x2F;&#x2F; Steps 1 and 2. Append padding bits and length and convert to words<br>x &#x3D; ConvertToWordArray(sMessage);<br>&#x2F;&#x2F; Step 3. Initialise<br>a &#x3D; 0x67452301; b &#x3D; 0xEFCDAB89; c &#x3D; 0x98BADCFE; d &#x3D; 0x10325476;<br>&#x2F;&#x2F; Step 4. Process the message in 16-word blocks<br>for (k&#x3D;0;k＜x.length;k+&#x3D;16) {<br>AA&#x3D;a; BB&#x3D;b; CC&#x3D;c; DD&#x3D;d;<br>a&#x3D;FF(a,b,c,d,x[k+0], S11,0xD76AA478);<br>d&#x3D;FF(d,a,b,c,x[k+1], S12,0xE8C7B756);<br>c&#x3D;FF(c,d,a,b,x[k+2], S13,0x242070DB);<br>b&#x3D;FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);<br>a&#x3D;FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);<br>d&#x3D;FF(d,a,b,c,x[k+5], S12,0x4787C62A);<br>c&#x3D;FF(c,d,a,b,x[k+6], S13,0xA8304613);<br>b&#x3D;FF(b,c,d,a,x[k+7], S14,0xFD469501);<br>a&#x3D;FF(a,b,c,d,x[k+8], S11,0x698098D8);<br>d&#x3D;FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);<br>c&#x3D;FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);<br>b&#x3D;FF(b,c,d,a,x[k+11],S14,0x895CD7BE);<br>a&#x3D;FF(a,b,c,d,x[k+12],S11,0x6B901122);<br>d&#x3D;FF(d,a,b,c,x[k+13],S12,0xFD987193);<br>c&#x3D;FF(c,d,a,b,x[k+14],S13,0xA679438E);<br>b&#x3D;FF(b,c,d,a,x[k+15],S14,0x49B40821);<br>a&#x3D;GG(a,b,c,d,x[k+1], S21,0xF61E2562);<br>d&#x3D;GG(d,a,b,c,x[k+6], S22,0xC040B340);<br>c&#x3D;GG(c,d,a,b,x[k+11],S23,0x265E5A51);<br>b&#x3D;GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);<br>a&#x3D;GG(a,b,c,d,x[k+5], S21,0xD62F105D);<br>d&#x3D;GG(d,a,b,c,x[k+10],S22,0x2441453);<br>c&#x3D;GG(c,d,a,b,x[k+15],S23,0xD8A1E681);<br>b&#x3D;GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);<br>a&#x3D;GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);<br>d&#x3D;GG(d,a,b,c,x[k+14],S22,0xC33707D6);<br>c&#x3D;GG(c,d,a,b,x[k+3], S23,0xF4D50D87);<br>b&#x3D;GG(b,c,d,a,x[k+8], S24,0x455A14ED);<br>a&#x3D;GG(a,b,c,d,x[k+13],S21,0xA9E3E905);<br>d&#x3D;GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);<br>c&#x3D;GG(c,d,a,b,x[k+7], S23,0x676F02D9);<br>b&#x3D;GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);<br>a&#x3D;HH(a,b,c,d,x[k+5], S31,0xFFFA3942);<br>d&#x3D;HH(d,a,b,c,x[k+8], S32,0x8771F681);<br>c&#x3D;HH(c,d,a,b,x[k+11],S33,0x6D9D6122);<br>b&#x3D;HH(b,c,d,a,x[k+14],S34,0xFDE5380C);<br>a&#x3D;HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);<br>d&#x3D;HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);<br>c&#x3D;HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);<br>b&#x3D;HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);<br>a&#x3D;HH(a,b,c,d,x[k+13],S31,0x289B7EC6);<br>d&#x3D;HH(d,a,b,c,x[k+0], S32,0xEAA127FA);<br>c&#x3D;HH(c,d,a,b,x[k+3], S33,0xD4EF3085);<br>b&#x3D;HH(b,c,d,a,x[k+6], S34,0x4881D05);<br>a&#x3D;HH(a,b,c,d,x[k+9], S31,0xD9D4D039);<br>d&#x3D;HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);<br>c&#x3D;HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);<br>b&#x3D;HH(b,c,d,a,x[k+2], S34,0xC4AC5665);<br>a&#x3D;II(a,b,c,d,x[k+0], S41,0xF4292244);<br>d&#x3D;II(d,a,b,c,x[k+7], S42,0x432AFF97);<br>c&#x3D;II(c,d,a,b,x[k+14],S43,0xAB9423A7);<br>b&#x3D;II(b,c,d,a,x[k+5], S44,0xFC93A039);<br>a&#x3D;II(a,b,c,d,x[k+12],S41,0x655B59C3);<br>d&#x3D;II(d,a,b,c,x[k+3], S42,0x8F0CCC92);<br>c&#x3D;II(c,d,a,b,x[k+10],S43,0xFFEFF47D);<br>b&#x3D;II(b,c,d,a,x[k+1], S44,0x85845DD1);<br>a&#x3D;II(a,b,c,d,x[k+8], S41,0x6FA87E4F);<br>d&#x3D;II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);<br>c&#x3D;II(c,d,a,b,x[k+6], S43,0xA3014314);<br>b&#x3D;II(b,c,d,a,x[k+13],S44,0x4E0811A1);<br>a&#x3D;II(a,b,c,d,x[k+4], S41,0xF7537E82);<br>d&#x3D;II(d,a,b,c,x[k+11],S42,0xBD3AF235);<br>c&#x3D;II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);<br>b&#x3D;II(b,c,d,a,x[k+9], S44,0xEB86D391);<br>a&#x3D;AddUnsigned(a,AA); b&#x3D;AddUnsigned(b,BB); c&#x3D;AddUnsigned(c,CC); d&#x3D;AddUnsigned(d,DD);<br>}<br>&#x2F;&#x2F; Step 5. Output the 128 bit digest<br>var temp&#x3D; WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);<br>return temp.toLowerCase();<br>}<br>＜&#x2F;script＞</p>\n<p>＜input type&#x3D;text id&#x3D;myinput＞＜input type&#x3D;text ondblclick&#x3D;’this.value&#x3D;MD5(myinput.value)’＞</p>\n<p>与DELPHI实现的MD5加密相比较，英文数字的加密结果一样，中文就不相同了，可能与对中文字符的处理不同有关。</p>\n<p>函数的版权声明在最上面。</p>\n<p>其他的算法：<a href=\"http://files.cnblogs.com/tuyile006/md5.rar\" title=\"md5.js\">md5.js</a> <a href=\"http://files.cnblogs.com/tuyile006/md4.rar\" title=\"md4.js\">md4.js</a> <a href=\"http://files.cnblogs.com/tuyile006/sha1.rar\" title=\"sha1.js\">sha1.js</a></p>\n<p>中文字符和字符编码的问题，我希望我的下一遍我提到处理办法</p>\n<p>zeng.cz</p>\n","more":"<p>在说MD5前先说两种编码：1、escape加密解密，将下面代码保存为escape.htm。运行后，就会看到效果：简单吧？这里加密用到escape函数，解密用到unescape函数。2、URL加密解密，将下面代码保存为url.htm。运行后，就会看到效果：这里加密用到encodeURI函数，解密用到decodeURI函数。—————————————…</p>\n<!-- more -->\n<p>在说MD5前先说两种编码：</p>\n<p>1、escape加密解密，将下面代码保存为escape.htm。运行后，就会看到效果：  </p>\n<Script language=\"javascript\">  \nstr = \"blog:余弦函数\"  \nalert(\"待加密的字符串：\" + str)  \nvar e = escape(str);  \nalert(\"escape加密后: \" + e);  \nvar u = unescape(e);  \nalert(\"unescape解密后: \" + u);  \n</script>  \n<p>简单吧？这里加密用到escape函数，解密用到unescape函数。  </p>\n<p>2、URL加密解密，将下面代码保存为url.htm。运行后，就会看到效果：  </p>\n<Script language=\"javascript\">  \nurl = \"http://hi.baidu.com/余弦函数\"  \nvar e = encodeURI(url);  \nalert(\"加密后的URL：\" + e);  \nvar d = decodeURI(e);  \nalert(\"解密后的URL：\" + d);  \n</script>  \n<p>这里加密用到encodeURI函数，解密用到decodeURI函数。—————————————————–</p>\n<p>首先你要去  </p>\n<p><a href=\"http://pajhome.org.uk/crypt/md5/\">md5的js下载地址&#x2F;</a>  </p>\n<p>下载一个js的使用代码  </p>\n<p>调用：  </p>\n<p>CODE:</p>\n<p><a href=\"http://www.phpchina.com/html/70/3870-2186.html###\">[Copy to clipboard]</a></p>\n<script type=\"text/javascript\" src=\"md5.js\"></script>\n\n<p>实现加密：  </p>\n<p>CODE:</p>\n<p><a href=\"http://www.phpchina.com/html/70/3870-2186.html###\">[Copy to clipboard]</a></p>\n<script type=\"text/javascript\" >  \nhash = hex\\_md5(\"input string\");  \n</script>\n\n<p>或者只要在  </p>\n<p>CODE:</p>\n<p><a href=\"http://www.phpchina.com/html/70/3870-2186.html###\">[Copy to clipboard]</a></p>\n<form onsubmit=\"pwd.value =hex\\_md5(pwd.value)\">\n\n<p>这样做的好处是  </p>\n<p>CODE:</p>\n<p><a href=\"http://www.phpchina.com/html/70/3870-2186.html###\">[Copy to clipboard]</a></p>\n<p>1.通过这个md5的js生成的代码和php的是一样，减少服务器在md5加密的负担  </p>\n<p>2.因为密码是直接在客户端就进行加密，不像php要传到服务器端才加密，这样传输过程的安全也得到进一步的加强</p>\n<p>具体计算的代码如下：</p>\n<p>＜script＞<br>&#x2F;* MD5 Message-Digest Algorithm - JavaScript<br>MODIFICATION HISTORY:<br>1.0 16-Feb-2001 - Phil Fresle (＜A href&#x3D;”mailto:<a href=\"mailto:&#115;&#x61;&#x6c;&#101;&#115;&#x40;&#102;&#x72;&#101;&#x7a;&#x2e;&#x63;&#x6f;&#46;&#117;&#x6b;\">&#115;&#x61;&#x6c;&#101;&#115;&#x40;&#102;&#x72;&#101;&#x7a;&#x2e;&#x63;&#x6f;&#46;&#117;&#x6b;</a>“＞<a href=\"mailto:&#115;&#97;&#x6c;&#101;&#x73;&#x40;&#x66;&#114;&#101;&#122;&#x2e;&#x63;&#x6f;&#46;&#x75;&#x6b;\">&#115;&#97;&#x6c;&#101;&#x73;&#x40;&#x66;&#114;&#101;&#122;&#x2e;&#x63;&#x6f;&#46;&#x75;&#x6b;</a>＜&#x2F;A＞) - Initial Version (VB&#x2F;ASP code)<br>1.0 21-Feb-2001 - Enrico Mosanghini (＜A href&#x3D;”mailto:<a href=\"mailto:&#x65;&#114;&#x69;&#107;&#x35;&#x30;&#52;&#64;&#x79;&#x61;&#x68;&#x6f;&#111;&#x2e;&#x63;&#111;&#x6d;\">&#x65;&#114;&#x69;&#107;&#x35;&#x30;&#52;&#64;&#x79;&#x61;&#x68;&#x6f;&#111;&#x2e;&#x63;&#111;&#x6d;</a>“＞<a href=\"mailto:&#x65;&#114;&#x69;&#x6b;&#53;&#48;&#x34;&#64;&#121;&#97;&#104;&#x6f;&#111;&#46;&#x63;&#x6f;&#x6d;\">&#x65;&#114;&#x69;&#x6b;&#53;&#48;&#x34;&#64;&#121;&#97;&#104;&#x6f;&#111;&#46;&#x63;&#x6f;&#x6d;</a>＜&#x2F;A＞) - JavaScript porting<br>*&#x2F;<br>function MD5(sMessage) {<br>function RotateLeft(lValue, iShiftBits) { return (lValue＜＜iShiftBits) | (lValue＞＞＞(32-iShiftBits)); }<br>function AddUnsigned(lX,lY) {<br>var lX4,lY4,lX8,lY8,lResult;<br>lX8 &#x3D; (lX &amp; 0x80000000);<br>lY8 &#x3D; (lY &amp; 0x80000000);<br>lX4 &#x3D; (lX &amp; 0x40000000);<br>lY4 &#x3D; (lY &amp; 0x40000000);<br>lResult &#x3D; (lX &amp; 0x3FFFFFFF)+(lY &amp; 0x3FFFFFFF);<br>if (lX4 &amp; lY4) return (lResult ^ 0x80000000 ^ lX8 ^ lY8);<br>if (lX4 | lY4) {<br>if (lResult &amp; 0x40000000) return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);<br>else return (lResult ^ 0x40000000 ^ lX8 ^ lY8);<br>} else return (lResult ^ lX8 ^ lY8);<br>}<br>function F(x,y,z) { return (x &amp; y) | ((<del>x) &amp; z); }<br>function G(x,y,z) { return (x &amp; z) | (y &amp; (</del>z)); }<br>function H(x,y,z) { return (x ^ y ^ z); }<br>function I(x,y,z) { return (y ^ (x | (~z))); }<br>function FF(a,b,c,d,x,s,ac) {<br>a &#x3D; AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));<br>return AddUnsigned(RotateLeft(a, s), b);<br>}<br>function GG(a,b,c,d,x,s,ac) {<br>a &#x3D; AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));<br>return AddUnsigned(RotateLeft(a, s), b);<br>}<br>function HH(a,b,c,d,x,s,ac) {<br>a &#x3D; AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));<br>return AddUnsigned(RotateLeft(a, s), b);<br>}<br>function II(a,b,c,d,x,s,ac) {<br>a &#x3D; AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));<br>return AddUnsigned(RotateLeft(a, s), b);<br>}<br>function ConvertToWordArray(sMessage) {<br>var lWordCount;<br>var lMessageLength &#x3D; sMessage.length;<br>var lNumberOfWords_temp1&#x3D;lMessageLength + 8;<br>var lNumberOfWords_temp2&#x3D;(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))&#x2F;64;<br>var lNumberOfWords &#x3D; (lNumberOfWords_temp2+1)*16;<br>var lWordArray&#x3D;Array(lNumberOfWords-1);<br>var lBytePosition &#x3D; 0;<br>var lByteCount &#x3D; 0;<br>while ( lByteCount ＜ lMessageLength ) {<br>lWordCount &#x3D; (lByteCount-(lByteCount % 4))&#x2F;4;<br>lBytePosition &#x3D; (lByteCount % 4)*8;<br>lWordArray[lWordCount] &#x3D; (lWordArray[lWordCount] | (sMessage.charCodeAt(lByteCount)＜＜lBytePosition));<br>lByteCount++;<br>}<br>lWordCount &#x3D; (lByteCount-(lByteCount % 4))&#x2F;4;<br>lBytePosition &#x3D; (lByteCount % 4)*8;<br>lWordArray[lWordCount] &#x3D; lWordArray[lWordCount] | (0x80＜＜lBytePosition);<br>lWordArray[lNumberOfWords-2] &#x3D; lMessageLength＜＜3;<br>lWordArray[lNumberOfWords-1] &#x3D; lMessageLength＞＞＞29;<br>return lWordArray;<br>}<br>function WordToHex(lValue) {<br>var WordToHexValue&#x3D;””,WordToHexValue_temp&#x3D;””,lByte,lCount;<br>for (lCount &#x3D; 0;lCount＜&#x3D;3;lCount++) {<br>lByte &#x3D; (lValue＞＞＞(lCount*8)) &amp; 255;<br>WordToHexValue_temp &#x3D; “0” + lByte.toString(16);<br>WordToHexValue &#x3D; WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);<br>}<br>return WordToHexValue;<br>}<br>var x&#x3D;Array();<br>var k,AA,BB,CC,DD,a,b,c,d<br>var S11&#x3D;7, S12&#x3D;12, S13&#x3D;17, S14&#x3D;22;<br>var S21&#x3D;5, S22&#x3D;9 , S23&#x3D;14, S24&#x3D;20;<br>var S31&#x3D;4, S32&#x3D;11, S33&#x3D;16, S34&#x3D;23;<br>var S41&#x3D;6, S42&#x3D;10, S43&#x3D;15, S44&#x3D;21;<br>&#x2F;&#x2F; Steps 1 and 2. Append padding bits and length and convert to words<br>x &#x3D; ConvertToWordArray(sMessage);<br>&#x2F;&#x2F; Step 3. Initialise<br>a &#x3D; 0x67452301; b &#x3D; 0xEFCDAB89; c &#x3D; 0x98BADCFE; d &#x3D; 0x10325476;<br>&#x2F;&#x2F; Step 4. Process the message in 16-word blocks<br>for (k&#x3D;0;k＜x.length;k+&#x3D;16) {<br>AA&#x3D;a; BB&#x3D;b; CC&#x3D;c; DD&#x3D;d;<br>a&#x3D;FF(a,b,c,d,x[k+0], S11,0xD76AA478);<br>d&#x3D;FF(d,a,b,c,x[k+1], S12,0xE8C7B756);<br>c&#x3D;FF(c,d,a,b,x[k+2], S13,0x242070DB);<br>b&#x3D;FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);<br>a&#x3D;FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);<br>d&#x3D;FF(d,a,b,c,x[k+5], S12,0x4787C62A);<br>c&#x3D;FF(c,d,a,b,x[k+6], S13,0xA8304613);<br>b&#x3D;FF(b,c,d,a,x[k+7], S14,0xFD469501);<br>a&#x3D;FF(a,b,c,d,x[k+8], S11,0x698098D8);<br>d&#x3D;FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);<br>c&#x3D;FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);<br>b&#x3D;FF(b,c,d,a,x[k+11],S14,0x895CD7BE);<br>a&#x3D;FF(a,b,c,d,x[k+12],S11,0x6B901122);<br>d&#x3D;FF(d,a,b,c,x[k+13],S12,0xFD987193);<br>c&#x3D;FF(c,d,a,b,x[k+14],S13,0xA679438E);<br>b&#x3D;FF(b,c,d,a,x[k+15],S14,0x49B40821);<br>a&#x3D;GG(a,b,c,d,x[k+1], S21,0xF61E2562);<br>d&#x3D;GG(d,a,b,c,x[k+6], S22,0xC040B340);<br>c&#x3D;GG(c,d,a,b,x[k+11],S23,0x265E5A51);<br>b&#x3D;GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);<br>a&#x3D;GG(a,b,c,d,x[k+5], S21,0xD62F105D);<br>d&#x3D;GG(d,a,b,c,x[k+10],S22,0x2441453);<br>c&#x3D;GG(c,d,a,b,x[k+15],S23,0xD8A1E681);<br>b&#x3D;GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);<br>a&#x3D;GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);<br>d&#x3D;GG(d,a,b,c,x[k+14],S22,0xC33707D6);<br>c&#x3D;GG(c,d,a,b,x[k+3], S23,0xF4D50D87);<br>b&#x3D;GG(b,c,d,a,x[k+8], S24,0x455A14ED);<br>a&#x3D;GG(a,b,c,d,x[k+13],S21,0xA9E3E905);<br>d&#x3D;GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);<br>c&#x3D;GG(c,d,a,b,x[k+7], S23,0x676F02D9);<br>b&#x3D;GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);<br>a&#x3D;HH(a,b,c,d,x[k+5], S31,0xFFFA3942);<br>d&#x3D;HH(d,a,b,c,x[k+8], S32,0x8771F681);<br>c&#x3D;HH(c,d,a,b,x[k+11],S33,0x6D9D6122);<br>b&#x3D;HH(b,c,d,a,x[k+14],S34,0xFDE5380C);<br>a&#x3D;HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);<br>d&#x3D;HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);<br>c&#x3D;HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);<br>b&#x3D;HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);<br>a&#x3D;HH(a,b,c,d,x[k+13],S31,0x289B7EC6);<br>d&#x3D;HH(d,a,b,c,x[k+0], S32,0xEAA127FA);<br>c&#x3D;HH(c,d,a,b,x[k+3], S33,0xD4EF3085);<br>b&#x3D;HH(b,c,d,a,x[k+6], S34,0x4881D05);<br>a&#x3D;HH(a,b,c,d,x[k+9], S31,0xD9D4D039);<br>d&#x3D;HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);<br>c&#x3D;HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);<br>b&#x3D;HH(b,c,d,a,x[k+2], S34,0xC4AC5665);<br>a&#x3D;II(a,b,c,d,x[k+0], S41,0xF4292244);<br>d&#x3D;II(d,a,b,c,x[k+7], S42,0x432AFF97);<br>c&#x3D;II(c,d,a,b,x[k+14],S43,0xAB9423A7);<br>b&#x3D;II(b,c,d,a,x[k+5], S44,0xFC93A039);<br>a&#x3D;II(a,b,c,d,x[k+12],S41,0x655B59C3);<br>d&#x3D;II(d,a,b,c,x[k+3], S42,0x8F0CCC92);<br>c&#x3D;II(c,d,a,b,x[k+10],S43,0xFFEFF47D);<br>b&#x3D;II(b,c,d,a,x[k+1], S44,0x85845DD1);<br>a&#x3D;II(a,b,c,d,x[k+8], S41,0x6FA87E4F);<br>d&#x3D;II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);<br>c&#x3D;II(c,d,a,b,x[k+6], S43,0xA3014314);<br>b&#x3D;II(b,c,d,a,x[k+13],S44,0x4E0811A1);<br>a&#x3D;II(a,b,c,d,x[k+4], S41,0xF7537E82);<br>d&#x3D;II(d,a,b,c,x[k+11],S42,0xBD3AF235);<br>c&#x3D;II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);<br>b&#x3D;II(b,c,d,a,x[k+9], S44,0xEB86D391);<br>a&#x3D;AddUnsigned(a,AA); b&#x3D;AddUnsigned(b,BB); c&#x3D;AddUnsigned(c,CC); d&#x3D;AddUnsigned(d,DD);<br>}<br>&#x2F;&#x2F; Step 5. Output the 128 bit digest<br>var temp&#x3D; WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);<br>return temp.toLowerCase();<br>}<br>＜&#x2F;script＞</p>\n<p>＜input type&#x3D;text id&#x3D;myinput＞＜input type&#x3D;text ondblclick&#x3D;’this.value&#x3D;MD5(myinput.value)’＞</p>\n<p>与DELPHI实现的MD5加密相比较，英文数字的加密结果一样，中文就不相同了，可能与对中文字符的处理不同有关。</p>\n<p>函数的版权声明在最上面。</p>\n<p>其他的算法：<a href=\"http://files.cnblogs.com/tuyile006/md5.rar\" title=\"md5.js\">md5.js</a> <a href=\"http://files.cnblogs.com/tuyile006/md4.rar\" title=\"md4.js\">md4.js</a> <a href=\"http://files.cnblogs.com/tuyile006/sha1.rar\" title=\"sha1.js\">sha1.js</a></p>\n<p>中文字符和字符编码的问题，我希望我的下一遍我提到处理办法</p>\n<p>zeng.cz</p>\n","categories":[{"name":"Javascript","path":"api/categories/Javascript.json"}],"tags":[{"name":"Javascript","path":"api/tags/Javascript.json"},{"name":"JS","path":"api/tags/JS.json"}]}