{"title":"Node.js Development Environment and Application Examples","slug":"Node.js开发环境及应用实例","date":"2023-10-08T00:55:48.000Z","updated":"2024-10-25T14:42:55.240Z","comments":true,"path":"api/articles/Node.js开发环境及应用实例.json","excerpt":" [Figure] Node.js: concise and refreshing","covers":["https://www.evernote.com/shard/s122/sh/dc99b8af-2a8b-4c92-80ae-53c85662c84e/EAOQ4Tvjt3XR_wnOW7aoUNhkXRSFxKDw74NLFTaMLLVKv_XDfXX-Lz2wOw/deep/0/image.png"],"content":"<p><img data-src=\"https://www.evernote.com/shard/s122/sh/dc99b8af-2a8b-4c92-80ae-53c85662c84e/EAOQ4Tvjt3XR_wnOW7aoUNhkXRSFxKDw74NLFTaMLLVKv_XDfXX-Lz2wOw/deep/0/image.png\" alt=\"node.jsnpmrundev\"></p>\n<p>Node.js: concise and refreshing</p>\n<span id=\"more\"></span>\n\n<p>How to enable auto-completion for default&#x2F;builtin functions in IDEA<br>IDEA node.js function autocomplete</p>\n<h1 id=\"Batch-Editing-of-Files-Containing-“Netsuite”-in-Their-Names-Adding-Tags-and-Categories\"><a href=\"#Batch-Editing-of-Files-Containing-“Netsuite”-in-Their-Names-Adding-Tags-and-Categories\" class=\"headerlink\" title=\"Batch Editing of Files Containing “Netsuite” in Their Names, Adding Tags and Categories\"></a>Batch Editing of Files Containing “Netsuite” in Their Names, Adding Tags and Categories</h1><p>Successful solution for the monthly requirement: seeking a batch categorization solution. The code below can be easily expanded and applied to modify content within disk directories.</p>\n<p>The Node.js source code is as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Viewing the _posts directory&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> strPostDir = <span class=\"string\">&quot;/Users/carlzeng/AppTesting/blog/source/_posts&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> intUpdatedCnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readdir</span>(strPostDir, <span class=\"keyword\">function</span> (<span class=\"params\">err, files</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        files.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log( file );</span></span><br><span class=\"line\">            <span class=\"comment\">// if (file == &#x27;0模版.md&#x27;)&#123;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (file.<span class=\"title function_\">toLowerCase</span>().<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;netsuite&#x27;</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(file);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Read a file and replace specific strings within it</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> replaceFile = <span class=\"keyword\">function</span> (<span class=\"params\">filePath, sourceRegx, targetStr</span>) &#123;</span><br><span class=\"line\">                    fs.<span class=\"title function_\">readFile</span>(filePath, <span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> str = data.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// console.info(str);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        str = str.<span class=\"title function_\">replace</span>(sourceRegx, targetStr);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// console.info(&quot;AFTER: \\n&quot; + str);</span></span><br><span class=\"line\">                        fs.<span class=\"title function_\">writeFile</span>(filePath, str, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"title function_\">replaceFile</span>(strPostDir + <span class=\"string\">&#x27;/&#x27;</span> + file, <span class=\"regexp\">/tags: \\[\\]/</span>, <span class=\"string\">&quot;tags: [NetSuite] \\ncategories: NetSuite&quot;</span>)</span><br><span class=\"line\">                intUpdatedCnt++;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (intUpdatedCnt == <span class=\"number\">2000</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;EndIterative&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.<span class=\"property\">message</span> != <span class=\"string\">&quot;EndIterative&quot;</span>) <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sublime-Text-Editor-Opening-a-Directory\"><a href=\"#Sublime-Text-Editor-Opening-a-Directory\" class=\"headerlink\" title=\"Sublime Text Editor: Opening a Directory\"></a>Sublime Text Editor: Opening a Directory</h2><p>When opening a directory in the Sublime Text editor, it automatically loads all files within the folder (a convenient way to update articles). Then, utilize the “Find” menu and select “Replace” to search for specific strings. The search content also supports regular expressions.</p>\n<h1 id=\"Node-js-Development-Steps\"><a href=\"#Node-js-Development-Steps\" class=\"headerlink\" title=\"Node.js Development Steps\"></a>Node.js Development Steps</h1><ol>\n<li><p>Git clone</p>\n<ol>\n<li>Clone using an IDE editor (e.g., WebStorm)</li>\n</ol>\n</li>\n<li><p>Open the IDE, the Terminal Tab will automatically switch to the current nodejs directory from the clone</p>\n<ol>\n<li>npm install<ol>\n<li>If encountering version issues (e.g., local runtime environment version too low), download and install a newer version, or directly place the node executable file in the &#x2F;usr&#x2F;local&#x2F;bin directory (for Mac environment, I placed four file versions: node, npm, npx, corepack, and it upgraded)</li>\n</ol>\n</li>\n<li>npm run dev<ol>\n<li>If issues arise, specific packages might need installation, for example: npx patch-package</li>\n</ol>\n</li>\n<li>[Optional] npx vite build</li>\n</ol>\n</li>\n<li><p>Directly edit Node.js code</p>\n</li>\n<li><p>In a network environment, it may be necessary to bypass firewalls before npm commands:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTPS_PROXY=&quot;http://127.0.0.1:7890&quot; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Debugging</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">On MacOS or Linux, run the app with this <span class=\"built_in\">command</span>:</span></span><br><span class=\"line\">DEBUG=myapp:* npm start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">On Windows Command Prompt, use this <span class=\"built_in\">command</span>:</span></span><br><span class=\"line\">set DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n<h1 id=\"Node-js-Build-Steps\"><a href=\"#Node-js-Build-Steps\" class=\"headerlink\" title=\"Node.js Build Steps\"></a>Node.js Build Steps</h1><p>Compile to the current project’s dist directory: npm run build</p>\n<p>Detailed steps can be found in the article <a href=\"https://21xrx.com/Articles/read_article/233702\">Node.js Project Packaging and Deployment Implementation</a></p>\n<h2 id=\"Docker-Compilation\"><a href=\"#Docker-Compilation\" class=\"headerlink\" title=\"Docker Compilation\"></a>Docker Compilation</h2><p>docker build -t ipserver .</p>\n<h1 id=\"Node-js-Docker-Container\"><a href=\"#Node-js-Docker-Container\" class=\"headerlink\" title=\"Node.js Docker Container\"></a>Node.js Docker Container</h1><p>Currently, I’m not familiar with building an entire Docker package, so I will first create a Node.js Docker container for better management.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">    <span class=\"attr\">node:</span></span><br><span class=\"line\">        <span class=\"attr\">stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">container_name:</span> <span class=\"string\">nodejs</span></span><br><span class=\"line\">        <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">        <span class=\"attr\">volumes:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;./app:/home/app&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"number\">3001</span><span class=\"string\">:3000</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">node</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> <span class=\"string\">bash</span></span><br></pre></td></tr></table></figure>\n\n<p>This section is based on ideas from the article <a href=\"https://21xrx.com/Articles/read_article/184856\">Installing Node.js Docker Container on Mac</a></p>\n<h2 id=\"Node-js-Docker-Deployment-Steps\"><a href=\"#Node-js-Docker-Deployment-Steps\" class=\"headerlink\" title=\"Node.js Docker Deployment Steps\"></a>Node.js Docker Deployment Steps</h2><ol>\n<li>docker exec -it nodejs bash</li>\n<li>[Optional steps, applicable only for upgrade deployment]<ol>\n<li>ps -falx | head -1; ps -falx | grep ‘npm|node’</li>\n<li>kill -9 「node process id, PPID value」</li>\n</ol>\n</li>\n<li>node &#x2F;home&#x2F;app&#x2F;blogsearch&#x2F;bin&#x2F;www</li>\n</ol>\n<p>Question: How can we ensure that this node persistently runs in the background, meaning that when exiting the current docker exec -it nodejs bash by pressing control+c, the process does not terminate?</p>\n<hr>\n<h1 id=\"Upcoming-Release\"><a href=\"#Upcoming-Release\" class=\"headerlink\" title=\"Upcoming Release\"></a>Upcoming Release</h1><p>Tested: Adding full text Search via FlexSearch to a Blog</p>\n<p>To begin: <a href=\"https://expressjs.com/en/starter/installing.html\">https://expressjs.com/en/starter/installing.html</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir blogsearch</span><br><span class=\"line\"></span><br><span class=\"line\">cd blogsearch</span><br><span class=\"line\"></span><br><span class=\"line\">npm init</span><br><span class=\"line\">  entry point: (index.js) server.js</span><br><span class=\"line\"></span><br><span class=\"line\">HTTPS_PROXY=&quot;http://127.0.0.1:7890&quot; npm install express</span><br><span class=\"line\">  added 62 packages, and audited 63 packages in 10s</span><br><span class=\"line\"></span><br><span class=\"line\">HTTPS_PROXY=&quot;http://127.0.0.1:7890&quot; npm install --save flexsearch</span><br><span class=\"line\">  added 1 package, and audited 64 packages in 3s</span><br><span class=\"line\">const &#123; Index, Document, Worker &#125; = require(&quot;flexsearch&quot;);</span><br><span class=\"line\">const index = new Index();</span><br></pre></td></tr></table></figure>\n\n<p>This idea is based on <a href=\"https://tnickel.de/2020/12/21/2020-12-Adding-full-text-search-via-flexSearch-to-a-blog/\">Adding full text Search via FlexSearch to a Blog</a></p>\n","more":"<p>How to enable auto-completion for default&#x2F;builtin functions in IDEA<br>IDEA node.js function autocomplete</p>\n<h1 id=\"Batch-Editing-of-Files-Containing-“Netsuite”-in-Their-Names-Adding-Tags-and-Categories\"><a href=\"#Batch-Editing-of-Files-Containing-“Netsuite”-in-Their-Names-Adding-Tags-and-Categories\" class=\"headerlink\" title=\"Batch Editing of Files Containing “Netsuite” in Their Names, Adding Tags and Categories\"></a>Batch Editing of Files Containing “Netsuite” in Their Names, Adding Tags and Categories</h1><p>Successful solution for the monthly requirement: seeking a batch categorization solution. The code below can be easily expanded and applied to modify content within disk directories.</p>\n<p>The Node.js source code is as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Viewing the _posts directory&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> strPostDir = <span class=\"string\">&quot;/Users/carlzeng/AppTesting/blog/source/_posts&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> intUpdatedCnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readdir</span>(strPostDir, <span class=\"keyword\">function</span> (<span class=\"params\">err, files</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        files.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log( file );</span></span><br><span class=\"line\">            <span class=\"comment\">// if (file == &#x27;0模版.md&#x27;)&#123;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (file.<span class=\"title function_\">toLowerCase</span>().<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;netsuite&#x27;</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(file);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Read a file and replace specific strings within it</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> replaceFile = <span class=\"keyword\">function</span> (<span class=\"params\">filePath, sourceRegx, targetStr</span>) &#123;</span><br><span class=\"line\">                    fs.<span class=\"title function_\">readFile</span>(filePath, <span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> str = data.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// console.info(str);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        str = str.<span class=\"title function_\">replace</span>(sourceRegx, targetStr);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// console.info(&quot;AFTER: \\n&quot; + str);</span></span><br><span class=\"line\">                        fs.<span class=\"title function_\">writeFile</span>(filePath, str, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"title function_\">replaceFile</span>(strPostDir + <span class=\"string\">&#x27;/&#x27;</span> + file, <span class=\"regexp\">/tags: \\[\\]/</span>, <span class=\"string\">&quot;tags: [NetSuite] \\ncategories: NetSuite&quot;</span>)</span><br><span class=\"line\">                intUpdatedCnt++;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (intUpdatedCnt == <span class=\"number\">2000</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;EndIterative&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.<span class=\"property\">message</span> != <span class=\"string\">&quot;EndIterative&quot;</span>) <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sublime-Text-Editor-Opening-a-Directory\"><a href=\"#Sublime-Text-Editor-Opening-a-Directory\" class=\"headerlink\" title=\"Sublime Text Editor: Opening a Directory\"></a>Sublime Text Editor: Opening a Directory</h2><p>When opening a directory in the Sublime Text editor, it automatically loads all files within the folder (a convenient way to update articles). Then, utilize the “Find” menu and select “Replace” to search for specific strings. The search content also supports regular expressions.</p>\n<h1 id=\"Node-js-Development-Steps\"><a href=\"#Node-js-Development-Steps\" class=\"headerlink\" title=\"Node.js Development Steps\"></a>Node.js Development Steps</h1><ol>\n<li><p>Git clone</p>\n<ol>\n<li>Clone using an IDE editor (e.g., WebStorm)</li>\n</ol>\n</li>\n<li><p>Open the IDE, the Terminal Tab will automatically switch to the current nodejs directory from the clone</p>\n<ol>\n<li>npm install<ol>\n<li>If encountering version issues (e.g., local runtime environment version too low), download and install a newer version, or directly place the node executable file in the &#x2F;usr&#x2F;local&#x2F;bin directory (for Mac environment, I placed four file versions: node, npm, npx, corepack, and it upgraded)</li>\n</ol>\n</li>\n<li>npm run dev<ol>\n<li>If issues arise, specific packages might need installation, for example: npx patch-package</li>\n</ol>\n</li>\n<li>[Optional] npx vite build</li>\n</ol>\n</li>\n<li><p>Directly edit Node.js code</p>\n</li>\n<li><p>In a network environment, it may be necessary to bypass firewalls before npm commands:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTPS_PROXY=&quot;http://127.0.0.1:7890&quot; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Debugging</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">On MacOS or Linux, run the app with this <span class=\"built_in\">command</span>:</span></span><br><span class=\"line\">DEBUG=myapp:* npm start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">On Windows Command Prompt, use this <span class=\"built_in\">command</span>:</span></span><br><span class=\"line\">set DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n<h1 id=\"Node-js-Build-Steps\"><a href=\"#Node-js-Build-Steps\" class=\"headerlink\" title=\"Node.js Build Steps\"></a>Node.js Build Steps</h1><p>Compile to the current project’s dist directory: npm run build</p>\n<p>Detailed steps can be found in the article <a href=\"https://21xrx.com/Articles/read_article/233702\">Node.js Project Packaging and Deployment Implementation</a></p>\n<h2 id=\"Docker-Compilation\"><a href=\"#Docker-Compilation\" class=\"headerlink\" title=\"Docker Compilation\"></a>Docker Compilation</h2><p>docker build -t ipserver .</p>\n<h1 id=\"Node-js-Docker-Container\"><a href=\"#Node-js-Docker-Container\" class=\"headerlink\" title=\"Node.js Docker Container\"></a>Node.js Docker Container</h1><p>Currently, I’m not familiar with building an entire Docker package, so I will first create a Node.js Docker container for better management.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">    <span class=\"attr\">node:</span></span><br><span class=\"line\">        <span class=\"attr\">stdin_open:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">container_name:</span> <span class=\"string\">nodejs</span></span><br><span class=\"line\">        <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">        <span class=\"attr\">volumes:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;./app:/home/app&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"number\">3001</span><span class=\"string\">:3000</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">node</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> <span class=\"string\">bash</span></span><br></pre></td></tr></table></figure>\n\n<p>This section is based on ideas from the article <a href=\"https://21xrx.com/Articles/read_article/184856\">Installing Node.js Docker Container on Mac</a></p>\n<h2 id=\"Node-js-Docker-Deployment-Steps\"><a href=\"#Node-js-Docker-Deployment-Steps\" class=\"headerlink\" title=\"Node.js Docker Deployment Steps\"></a>Node.js Docker Deployment Steps</h2><ol>\n<li>docker exec -it nodejs bash</li>\n<li>[Optional steps, applicable only for upgrade deployment]<ol>\n<li>ps -falx | head -1; ps -falx | grep ‘npm|node’</li>\n<li>kill -9 「node process id, PPID value」</li>\n</ol>\n</li>\n<li>node &#x2F;home&#x2F;app&#x2F;blogsearch&#x2F;bin&#x2F;www</li>\n</ol>\n<p>Question: How can we ensure that this node persistently runs in the background, meaning that when exiting the current docker exec -it nodejs bash by pressing control+c, the process does not terminate?</p>\n<hr>\n<h1 id=\"Upcoming-Release\"><a href=\"#Upcoming-Release\" class=\"headerlink\" title=\"Upcoming Release\"></a>Upcoming Release</h1><p>Tested: Adding full text Search via FlexSearch to a Blog</p>\n<p>To begin: <a href=\"https://expressjs.com/en/starter/installing.html\">https://expressjs.com/en/starter/installing.html</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir blogsearch</span><br><span class=\"line\"></span><br><span class=\"line\">cd blogsearch</span><br><span class=\"line\"></span><br><span class=\"line\">npm init</span><br><span class=\"line\">  entry point: (index.js) server.js</span><br><span class=\"line\"></span><br><span class=\"line\">HTTPS_PROXY=&quot;http://127.0.0.1:7890&quot; npm install express</span><br><span class=\"line\">  added 62 packages, and audited 63 packages in 10s</span><br><span class=\"line\"></span><br><span class=\"line\">HTTPS_PROXY=&quot;http://127.0.0.1:7890&quot; npm install --save flexsearch</span><br><span class=\"line\">  added 1 package, and audited 64 packages in 3s</span><br><span class=\"line\">const &#123; Index, Document, Worker &#125; = require(&quot;flexsearch&quot;);</span><br><span class=\"line\">const index = new Index();</span><br></pre></td></tr></table></figure>\n\n<p>This idea is based on <a href=\"https://tnickel.de/2020/12/21/2020-12-Adding-full-text-search-via-flexSearch-to-a-blog/\">Adding full text Search via FlexSearch to a Blog</a></p>","categories":[{"name":"Node.js","path":"api/categories/Node.js.json"}],"tags":[{"name":"Javascript","path":"api/tags/Javascript.json"},{"name":"Node.js","path":"api/tags/Node.js.json"},{"name":"node","path":"api/tags/node.json"},{"name":"Debian","path":"api/tags/Debian.json"},{"name":"Linux","path":"api/tags/Linux.json"}]}