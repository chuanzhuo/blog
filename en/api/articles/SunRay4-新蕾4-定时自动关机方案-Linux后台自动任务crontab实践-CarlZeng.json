{"title":"SunRay4(新蕾4) 定时自动关机方案, Linux后台自动任务crontab实践-CarlZeng","slug":"SunRay4-新蕾4-定时自动关机方案-Linux后台自动任务crontab实践-CarlZeng","date":"2015-04-07T11:19:00.000Z","updated":"2023-10-02T02:27:29.030Z","comments":true,"path":"api/articles/SunRay4-新蕾4-定时自动关机方案-Linux后台自动任务crontab实践-CarlZeng.json","excerpt":"目录：需求和思路分析具体实现步骤理解CrontabCrontab具体参数详细说明最近碰到一个想要实现定时自动关机的功能，关机的指令无非就是:shutdown -h time调用openwebif的指令 wget -q -O - \"http://127.0.0.1/web/powerstate?new...","covers":null,"content":"<p>目录：需求和思路分析具体实现步骤理解CrontabCrontab具体参数详细说明最近碰到一个想要实现定时自动关机的功能，关机的指令无非就是:shutdown -h time调用openwebif的指令 wget -q -O - “<a href=\"http://127.0.0.1/web/powerstate?new\">http://127.0.0.1/web/powerstate?new</a>…</p>\n<!-- more -->\n<p>目录：</p>\n<ol>\n<li>需求和思路分析</li>\n<li>具体实现步骤</li>\n<li>理解Crontab</li>\n<li>Crontab具体参数详细说明</li>\n</ol>\n<hr>\n<p>最近碰到一个想要实现定时自动关机的功能，关机的指令无非就是:</p>\n<ul>\n<li>shutdown -h time</li>\n<li>调用openwebif的指令  wget -q -O - “<a href=\"http://127.0.0.1/web/powerstate?newstate=1\">http://127.0.0.1/web/powerstate?newstate=1</a>“ &gt;&#x2F;dev&#x2F;null</li>\n<li>halt，reboot</li>\n</ul>\n<p>自动调用方式:</p>\n<ul>\n<li>shutdown 的定时时间参数</li>\n<li>crontab 添加定时任务 （Prefer）</li>\n<li>打开&#x2F;etc目录，在rc0.d rc1.d rc2.d rc3.d rc4.d rc5.d rc6.d这几个文件夹内添加开机自动执行的脚本(.sh文件)</li>\n</ul>\n<p>SunRay的linux中集成了enigma2的很多东西，单单执行shutdown -h 容易让SR4的面板不动而后台其实已经shutdown，这时建议先要 killall -9 enigma2 &gt; dev&#x2F;null。</p>\n<p>这个时候shutdown就无法满足需求了，需要使用crontab添加定时任务。</p>\n<hr>\n<ul>\n<li>1. 得出sh文件内容：</li>\n</ul>\n<p>#!&#x2F;bin&#x2F;sh<br>killall -9 enigma2 &gt; &#x2F;dev&#x2F;null 2 shutdown -h now</p>\n<ul>\n<li><p>2. 创建sh文件。</p>\n<ul>\n<li>输入命令</li>\n<li>1 cd &#x2F;usr&#x2F;script 2 vi shutdown.sh<br>3 输入e 4 &lt;输入上面那3行代码&gt;<br>5 按esc 6 输入 :wq 保存</li>\n</ul>\n</li>\n<li><p>3. 添加权限 (赋予执行权限)。</p>\n<ul>\n<li>chmod +x &#x2F;usr&#x2F;script&#x2F;shutdown.sh</li>\n</ul>\n</li>\n<li><p>4. 添加到定时任务</p>\n<ul>\n<li>1 crontab -c &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs -e 2 &lt;添加如下内容：&gt;<br>3 0 23 * * * &#x2F;usr&#x2F;script&#x2F;shutdown.sh<br>4 按esc 5 输入 :wq 保存</li>\n</ul>\n</li>\n</ul>\n<p>上面的步骤就可以实现定时执行关机任务（每天夜里11点关机），当然其他的定时任务也是一样的道理。</p>\n<p>下面分析一下具体的原理，核心命令解释：</p>\n<hr>\n<p>特定介绍一下crontab的理解（来源：<a href=\"http://blog.csdn.net/suer0101/article/details/8052592%EF%BC%89\">http://blog.csdn.net/suer0101/article/details/8052592）</a></p>\n<p>crond是一个服务，一个守护进程。crond 是linux用来定期执行程序的命令，crond命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p>\n<p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p>\n<p>按照网上查找的资料执行时经常会碰到这种错误：</p>\n<p>crontab: chdir(&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs): No such file or directory</p>\n<p>所以首先创建这样一个目录吧！</p>\n<p>#mkdir -p &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs</p>\n<p>然后编辑要执行的任务</p>\n<p>#crontab -e</p>\n<p>0 *&#x2F;1 * * * &#x2F;sbin&#x2F;ntpdate 192.168.1.67 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 每隔一个小时更新下时间，不打印任何信息</p>\n<p>最后，执行下</p>\n<p>#crond</p>\n<p>此时你会发现&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs下有一个跟用户名相同的文件，保存着要执行的任务。</p>\n<p>ps下会发现cron进程已经启动！</p>\n<p>我在SR4中的测试结果是，当-e 添加计划任务碰到错误‘crontab: chdir(&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs): No such file or directory’</p>\n<p>请使用命令(手工指定一个正确的目录)</p>\n<p>crontab -c &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs -e</p>\n<p>在紧接着其中的vi界面内，添加 比如（代表每天的23点0分执行）：</p>\n<p>0 23 * * * &#x2F;usr&#x2F;script&#x2F;shutdown.sh</p>\n<hr>\n<p> 具体参数说明（来源：<a href=\"http://blog.hexu.org/archives/703.shtml%EF%BC%89\">http://blog.hexu.org/archives/703.shtml）</a></p>\n<p>名称 : crontab<br>使用权限 : 所有使用者<br>使用方式 : crontab [ -u user ] file crontab [ -u user ] { -l | -r | -e }<br>说明 : crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。 -u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。 -e : 编辑，执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe) -r : 删除目前的时程表 -l : 列出目前的已经设置的列表，格式如下:f1 f2 f3 f4 f5 program 其中f1&#x2F;f2&#x2F;f3&#x2F;f4&#x2F;f5 分别表示分钟&#x2F;小时&#x2F;一个月的第几日&#x2F;月&#x2F;一个星期中的第几天。program 表示要执行的程序。</p>\n<p>当 f1 为 * 时表示每分钟都要执行 program，<br>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，<br>当 f1 为 *&#x2F;n 时表示每 n 分钟个时间间隔执行一次，<br>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，</p>\n<p>当 f2 为 * 时表示每小时都要执行程序，其余类推.<br>当 f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其余类推<br>当 f2 为 *&#x2F;n 表示每 n 小时个时间间隔执行一次，其余类推<br>当 f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其余类推</p>\n<p>例子 : 每月每天每小时的第 0 分钟执行一次  # program: &#x2F;bin&#x2F;ls<br>0 * * * * &#x2F;bin&#x2F;ls 在 12 月内, 每天的早上 6 点到 12 点中，每隔 20 分钟执行一次&#x2F;usr&#x2F;bin&#x2F;backup :<br>0 6-12&#x2F;3 * 12 * &#x2F;usr&#x2F;bin&#x2F;backup</p>\n<p>周一到周五每天下午 5:00 寄一封信给 <a href=\"mailto:&#x61;&#x6c;&#x65;&#120;&#x40;&#x64;&#x6f;&#x6d;&#97;&#x69;&#x6e;&#x2e;&#x6e;&#x61;&#109;&#101;\">&#x61;&#x6c;&#x65;&#120;&#x40;&#x64;&#x6f;&#x6d;&#97;&#x69;&#x6e;&#x2e;&#x6e;&#x61;&#109;&#101;</a> :<br>0 17 * * 1-5 mail -s “hi” <a href=\"mailto:&#x61;&#x6c;&#x65;&#120;&#x40;&#x64;&#111;&#109;&#x61;&#105;&#110;&#x2e;&#x6e;&#x61;&#x6d;&#x65;\">&#x61;&#x6c;&#x65;&#120;&#x40;&#x64;&#111;&#109;&#x61;&#105;&#110;&#x2e;&#x6e;&#x61;&#x6d;&#x65;</a> &lt; &#x2F;tmp&#x2F;maildata</p>\n<p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”<br>20 0-23&#x2F;2 * * * echo “haha”</p>\n","more":"<p>目录：需求和思路分析具体实现步骤理解CrontabCrontab具体参数详细说明最近碰到一个想要实现定时自动关机的功能，关机的指令无非就是:shutdown -h time调用openwebif的指令 wget -q -O - “<a href=\"http://127.0.0.1/web/powerstate?new\">http://127.0.0.1/web/powerstate?new</a>…</p>\n<!-- more -->\n<p>目录：</p>\n<ol>\n<li>需求和思路分析</li>\n<li>具体实现步骤</li>\n<li>理解Crontab</li>\n<li>Crontab具体参数详细说明</li>\n</ol>\n<hr>\n<p>最近碰到一个想要实现定时自动关机的功能，关机的指令无非就是:</p>\n<ul>\n<li>shutdown -h time</li>\n<li>调用openwebif的指令  wget -q -O - “<a href=\"http://127.0.0.1/web/powerstate?newstate=1\">http://127.0.0.1/web/powerstate?newstate=1</a>“ &gt;&#x2F;dev&#x2F;null</li>\n<li>halt，reboot</li>\n</ul>\n<p>自动调用方式:</p>\n<ul>\n<li>shutdown 的定时时间参数</li>\n<li>crontab 添加定时任务 （Prefer）</li>\n<li>打开&#x2F;etc目录，在rc0.d rc1.d rc2.d rc3.d rc4.d rc5.d rc6.d这几个文件夹内添加开机自动执行的脚本(.sh文件)</li>\n</ul>\n<p>SunRay的linux中集成了enigma2的很多东西，单单执行shutdown -h 容易让SR4的面板不动而后台其实已经shutdown，这时建议先要 killall -9 enigma2 &gt; dev&#x2F;null。</p>\n<p>这个时候shutdown就无法满足需求了，需要使用crontab添加定时任务。</p>\n<hr>\n<ul>\n<li>1. 得出sh文件内容：</li>\n</ul>\n<p>#!&#x2F;bin&#x2F;sh<br>killall -9 enigma2 &gt; &#x2F;dev&#x2F;null 2 shutdown -h now</p>\n<ul>\n<li><p>2. 创建sh文件。</p>\n<ul>\n<li>输入命令</li>\n<li>1 cd &#x2F;usr&#x2F;script 2 vi shutdown.sh<br>3 输入e 4 &lt;输入上面那3行代码&gt;<br>5 按esc 6 输入 :wq 保存</li>\n</ul>\n</li>\n<li><p>3. 添加权限 (赋予执行权限)。</p>\n<ul>\n<li>chmod +x &#x2F;usr&#x2F;script&#x2F;shutdown.sh</li>\n</ul>\n</li>\n<li><p>4. 添加到定时任务</p>\n<ul>\n<li>1 crontab -c &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs -e 2 &lt;添加如下内容：&gt;<br>3 0 23 * * * &#x2F;usr&#x2F;script&#x2F;shutdown.sh<br>4 按esc 5 输入 :wq 保存</li>\n</ul>\n</li>\n</ul>\n<p>上面的步骤就可以实现定时执行关机任务（每天夜里11点关机），当然其他的定时任务也是一样的道理。</p>\n<p>下面分析一下具体的原理，核心命令解释：</p>\n<hr>\n<p>特定介绍一下crontab的理解（来源：<a href=\"http://blog.csdn.net/suer0101/article/details/8052592%EF%BC%89\">http://blog.csdn.net/suer0101/article/details/8052592）</a></p>\n<p>crond是一个服务，一个守护进程。crond 是linux用来定期执行程序的命令，crond命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p>\n<p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p>\n<p>按照网上查找的资料执行时经常会碰到这种错误：</p>\n<p>crontab: chdir(&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs): No such file or directory</p>\n<p>所以首先创建这样一个目录吧！</p>\n<p>#mkdir -p &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs</p>\n<p>然后编辑要执行的任务</p>\n<p>#crontab -e</p>\n<p>0 *&#x2F;1 * * * &#x2F;sbin&#x2F;ntpdate 192.168.1.67 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 每隔一个小时更新下时间，不打印任何信息</p>\n<p>最后，执行下</p>\n<p>#crond</p>\n<p>此时你会发现&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs下有一个跟用户名相同的文件，保存着要执行的任务。</p>\n<p>ps下会发现cron进程已经启动！</p>\n<p>我在SR4中的测试结果是，当-e 添加计划任务碰到错误‘crontab: chdir(&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs): No such file or directory’</p>\n<p>请使用命令(手工指定一个正确的目录)</p>\n<p>crontab -c &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs -e</p>\n<p>在紧接着其中的vi界面内，添加 比如（代表每天的23点0分执行）：</p>\n<p>0 23 * * * &#x2F;usr&#x2F;script&#x2F;shutdown.sh</p>\n<hr>\n<p> 具体参数说明（来源：<a href=\"http://blog.hexu.org/archives/703.shtml%EF%BC%89\">http://blog.hexu.org/archives/703.shtml）</a></p>\n<p>名称 : crontab<br>使用权限 : 所有使用者<br>使用方式 : crontab [ -u user ] file crontab [ -u user ] { -l | -r | -e }<br>说明 : crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。 -u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。 -e : 编辑，执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe) -r : 删除目前的时程表 -l : 列出目前的已经设置的列表，格式如下:f1 f2 f3 f4 f5 program 其中f1&#x2F;f2&#x2F;f3&#x2F;f4&#x2F;f5 分别表示分钟&#x2F;小时&#x2F;一个月的第几日&#x2F;月&#x2F;一个星期中的第几天。program 表示要执行的程序。</p>\n<p>当 f1 为 * 时表示每分钟都要执行 program，<br>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，<br>当 f1 为 *&#x2F;n 时表示每 n 分钟个时间间隔执行一次，<br>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，</p>\n<p>当 f2 为 * 时表示每小时都要执行程序，其余类推.<br>当 f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其余类推<br>当 f2 为 *&#x2F;n 表示每 n 小时个时间间隔执行一次，其余类推<br>当 f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其余类推</p>\n<p>例子 : 每月每天每小时的第 0 分钟执行一次  # program: &#x2F;bin&#x2F;ls<br>0 * * * * &#x2F;bin&#x2F;ls 在 12 月内, 每天的早上 6 点到 12 点中，每隔 20 分钟执行一次&#x2F;usr&#x2F;bin&#x2F;backup :<br>0 6-12&#x2F;3 * 12 * &#x2F;usr&#x2F;bin&#x2F;backup</p>\n<p>周一到周五每天下午 5:00 寄一封信给 <a href=\"mailto:&#x61;&#x6c;&#x65;&#120;&#x40;&#x64;&#x6f;&#x6d;&#97;&#x69;&#x6e;&#x2e;&#x6e;&#x61;&#109;&#101;\">&#x61;&#x6c;&#x65;&#120;&#x40;&#x64;&#x6f;&#x6d;&#97;&#x69;&#x6e;&#x2e;&#x6e;&#x61;&#109;&#101;</a> :<br>0 17 * * 1-5 mail -s “hi” <a href=\"mailto:&#x61;&#x6c;&#x65;&#120;&#x40;&#x64;&#111;&#109;&#x61;&#105;&#110;&#x2e;&#x6e;&#x61;&#x6d;&#x65;\">&#x61;&#x6c;&#x65;&#120;&#x40;&#x64;&#111;&#109;&#x61;&#105;&#110;&#x2e;&#x6e;&#x61;&#x6d;&#x65;</a> &lt; &#x2F;tmp&#x2F;maildata</p>\n<p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”<br>20 0-23&#x2F;2 * * * echo “haha”</p>\n","categories":[],"tags":[]}