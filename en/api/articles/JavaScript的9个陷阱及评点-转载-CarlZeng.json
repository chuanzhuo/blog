{"title":"JavaScript的9个陷阱及评点  -转载-CarlZeng","slug":"JavaScript的9个陷阱及评点-转载-CarlZeng","date":"2009-03-23T06:37:00.000Z","updated":"2023-10-02T02:27:28.971Z","comments":true,"path":"api/articles/JavaScript的9个陷阱及评点-转载-CarlZeng.json","excerpt":"来自Nine Javascript Gotchas, 以下是JavaScript容易犯错的九个陷阱。虽然不是什么很高深的技术问题，但注意一下，会使您的编程轻松些，即所谓make life easier. 笔者对某些陷阱会混杂一些评点。最后一个逗号如这段代码，注意最后一个逗号，按语言学角度来说应该是不错的（python的类似数据类型辞典dictionary就允许如此）。IE会报语法错误，但语焉不详，...","covers":null,"content":"<p>来自Nine Javascript Gotchas, 以下是JavaScript容易犯错的九个陷阱。虽然不是什么很高深的技术问题，但注意一下，会使您的编程轻松些，即所谓make life easier. 笔者对某些陷阱会混杂一些评点。最后一个逗号如这段代码，注意最后一个逗号，按语言学角度来说应该是不错的（python的类似数据类型辞典dictionary就允许如此）。IE会报语法错误，但语焉不详，…</p>\n<!-- more -->\n<p>来自<a href=\"http://www.fitzblog.com/tabid/17782/bid/2127/Nine-Javascript-Gotchas.aspx\">Nine Javascript Gotchas</a>, 以下是JavaScript容易犯错的九个陷阱。虽然不是什么很高深的技术问题，但注意一下，会使您的编程轻松些，即所谓make life easier. 笔者对某些陷阱会混杂一些评点。</p>\n<ol>\n<li><h4 id=\"最后一个逗号\"><a href=\"#最后一个逗号\" class=\"headerlink\" title=\"最后一个逗号\"></a>最后一个逗号</h4><p>如这段代码，注意最后一个逗号，按语言学角度来说应该是不错的（python的类似数据类型辞典dictionary就允许如此）。IE会报语法错误，但语焉不详，你只能用人眼从几千行代码中扫描。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var theObj = &#123;</span><br><span class=\"line\">    city : &quot;Boston&quot;,</span><br><span class=\"line\">    state : &quot;MA&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;/script&gt; </span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"this的引用会改变\"><a href=\"#this的引用会改变\" class=\"headerlink\" title=\"this的引用会改变\"></a><code>this</code>的引用会改变</h4><p>如这段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;Gotcha!&quot; id=&quot;MyButton&quot; &gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    var MyObject = function () &#123;</span><br><span class=\"line\">    this.alertMessage = &quot;Javascript rules&quot;;</span><br><span class=\"line\">    this.ClickHandler = function() &#123;</span><br><span class=\"line\">    alert(this.alertMessage );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;();</span><br><span class=\"line\">    document.getElementById(&quot;theText&quot;).onclick =  MyObject.ClickHandler</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>并不如你所愿，答案并不是”JavaScript rules”。在执行<code>MyObject.ClickHandler</code>时，代码中红色这行，<code>this</code>的引用实际上指向的是<code>document.getElementById(&quot;theText&quot;)</code>的引用。可以这么解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;Gotcha!&quot; id=&quot;theText&quot; &gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    var MyObject = function () &#123;</span><br><span class=\"line\">    var self = this;</span><br></pre></td></tr></table></figure>\n\n<p>实质上，这就是<a href=\"http://realazy.org/blog/2007/07/18/scope-in-javascript/\">JavaScript作用域的问题</a>。如果你看过，你会发现解决方案不止一种。</p>\n</li>\n<li><h4 id=\"标识盗贼\"><a href=\"#标识盗贼\" class=\"headerlink\" title=\"标识盗贼\"></a>标识盗贼</h4><p>在JavaScript中不要使用跟HTML的id一样的变量名。如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; id=&quot;TheButton&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    TheButton = get(&quot;TheButton&quot;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>IE会报对象未定义的错误。我只能说：IE sucks.</p>\n</li>\n<li><h4 id=\"字符串只替换第一个匹配\"><a href=\"#字符串只替换第一个匹配\" class=\"headerlink\" title=\"字符串只替换第一个匹配\"></a>字符串只替换第一个匹配</h4><p>如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var fileName = &quot;This is a title&quot;.replace(&quot; &quot;,&quot;_&quot;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>而实际上，结果是”<code>This_is a title</code>“. 在JavaScript中，<code>String.replace</code>的第一个参数应该是正则表达式。所以，正确的做法是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fileName = &quot;This is a title&quot;.replace(/ /g,&quot;_&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"mouseout意味着mousein\"><a href=\"#mouseout意味着mousein\" class=\"headerlink\" title=\"mouseout意味着mousein\"></a>mouseout意味着mousein</h4><p>事实上，这是由于事件冒泡导致的。IE中有<code>mouseenter</code>和<code>mouseleave</code>，但不是标准的。作者在此建议大家使用库比如YUI来解决问题。</p>\n</li>\n<li><h4 id=\"parseInt是基于进制体系的\"><a href=\"#parseInt是基于进制体系的\" class=\"headerlink\" title=\"parseInt是基于进制体系的\"></a><code>parseInt</code>是基于进制体系的</h4><p>这个是常识，可是很多人给忽略了<code>parseInt</code>还有第二个参数，用以指明进制。比如，<code>parseInt(&quot;09&quot;)</code>，如果你认为答案是9，那就错了。因为，在此，字符串以0开头，<code>parseInt</code>以八进制来处理它，在八进制中，<code>09</code>是非法，返回<code>false</code>，布尔值<code>false</code>转化成数值就是0. 因此，正确的做法是<code>parseInt(&quot;09&quot;, 10)</code>.</p>\n</li>\n<li><h4 id=\"for-in-会遍历所有的东西\"><a href=\"#for-in-会遍历所有的东西\" class=\"headerlink\" title=\"for...in...会遍历所有的东西\"></a><code>for...in...</code>会遍历所有的东西</h4><p>有一段这样的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [5,10,15]</span><br><span class=\"line\">    var total = 1;</span><br><span class=\"line\">    for ( var x in arr) &#123;</span><br><span class=\"line\">    total = total * arr[x];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行得好好的，不是吗？但是有一天它不干了，给我返回的值变成了<code>NaN</code>, 晕。我只不过引入了一个库而已啊。原来是这个库改写了<code>Array</code>的<code>prototype</code>，这样，我们的<code>arr</code>平白无过多出了一个属性（方法），而<code>for...in...</code>会把它给遍历出来。所以这样做才是比较安全的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ( var x = 0; x &lt; arr.length; x++) &#123;</span><br><span class=\"line\">    total = total * arr[x];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实，这也是污染基本类的<code>prototype</code>会带来危害的一个例证。</p>\n</li>\n<li><h4 id=\"事件处理器的陷阱\"><a href=\"#事件处理器的陷阱\" class=\"headerlink\" title=\"事件处理器的陷阱\"></a>事件处理器的陷阱</h4><p>这其实只会存在使用作为对象属性的事件处理器才会存在的问题。比如<code>window.onclick = MyOnClickMethod``这样的代码，这会复写掉之前的``window.onclick</code>事件，还可能导致IE的内容泄露（sucks again）。在IE还没有支持DOM 2的事件注册之前，作者建议使用库来解决问题，比如使用YUI:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAHOO.util.Event.addListener(window, &quot;click&quot;, MyOnClickMethod);</span><br></pre></td></tr></table></figure>\n\n<p>这应该也属于常识问题，但新手可能容易犯错。</p>\n</li>\n<li><h4 id=\"Focus-Pocus\"><a href=\"#Focus-Pocus\" class=\"headerlink\" title=\"Focus Pocus\"></a>Focus Pocus</h4><p>新建一个<code>input</code>文本元素，然后把焦点挪到它上面，按理说，这样的代码应该很自然：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newInput = document.createElement(&quot;input&quot;);</span><br><span class=\"line\">    document.body.appendChild(newInput);</span><br><span class=\"line\">    newInput.focus();</span><br><span class=\"line\">    newInput.select();</span><br></pre></td></tr></table></figure>\n\n<p>但是IE会报错（sucks again and again）。理由可能是当你执行<code>fouce()</code>的时候，元素尚未可用。因此，我们可以延迟执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newInput = document.createElement(&quot;input&quot;);</span><br><span class=\"line\">    newInput.id = &quot;TheNewInput&quot;;</span><br><span class=\"line\">    document.body.appendChild(newInput);</span><br><span class=\"line\">    setTimeout(function()&#123; //这里我使用闭包改写过，若有兴趣可以对比原文</span><br><span class=\"line\">    document.getElementById(&#x27;TheNewInput&#x27;).focus();</span><br><span class=\"line\">    document.getElementById(&#x27;TheNewInput&#x27;).select();&#125;, 10);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在实践中，JavaScript的陷阱还有很多很多，大多是由于解析器的实现不到位而引起。这些东西一般都不会在教科书中出现，只能靠开发者之间的经验分享。谢天谢地，我们生活在网络时代，很多碰到的问题，一般都可以在Google中找到答案。</p>\n<p>-——————————–</p>\n<p>有些问题已经碰到了。很经典的文章！！</p>\n","more":"<p>来自Nine Javascript Gotchas, 以下是JavaScript容易犯错的九个陷阱。虽然不是什么很高深的技术问题，但注意一下，会使您的编程轻松些，即所谓make life easier. 笔者对某些陷阱会混杂一些评点。最后一个逗号如这段代码，注意最后一个逗号，按语言学角度来说应该是不错的（python的类似数据类型辞典dictionary就允许如此）。IE会报语法错误，但语焉不详，…</p>\n<!-- more -->\n<p>来自<a href=\"http://www.fitzblog.com/tabid/17782/bid/2127/Nine-Javascript-Gotchas.aspx\">Nine Javascript Gotchas</a>, 以下是JavaScript容易犯错的九个陷阱。虽然不是什么很高深的技术问题，但注意一下，会使您的编程轻松些，即所谓make life easier. 笔者对某些陷阱会混杂一些评点。</p>\n<ol>\n<li><h4 id=\"最后一个逗号\"><a href=\"#最后一个逗号\" class=\"headerlink\" title=\"最后一个逗号\"></a>最后一个逗号</h4><p>如这段代码，注意最后一个逗号，按语言学角度来说应该是不错的（python的类似数据类型辞典dictionary就允许如此）。IE会报语法错误，但语焉不详，你只能用人眼从几千行代码中扫描。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var theObj = &#123;</span><br><span class=\"line\">    city : &quot;Boston&quot;,</span><br><span class=\"line\">    state : &quot;MA&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;/script&gt; </span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"this的引用会改变\"><a href=\"#this的引用会改变\" class=\"headerlink\" title=\"this的引用会改变\"></a><code>this</code>的引用会改变</h4><p>如这段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;Gotcha!&quot; id=&quot;MyButton&quot; &gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    var MyObject = function () &#123;</span><br><span class=\"line\">    this.alertMessage = &quot;Javascript rules&quot;;</span><br><span class=\"line\">    this.ClickHandler = function() &#123;</span><br><span class=\"line\">    alert(this.alertMessage );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;();</span><br><span class=\"line\">    document.getElementById(&quot;theText&quot;).onclick =  MyObject.ClickHandler</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>并不如你所愿，答案并不是”JavaScript rules”。在执行<code>MyObject.ClickHandler</code>时，代码中红色这行，<code>this</code>的引用实际上指向的是<code>document.getElementById(&quot;theText&quot;)</code>的引用。可以这么解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;Gotcha!&quot; id=&quot;theText&quot; &gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    var MyObject = function () &#123;</span><br><span class=\"line\">    var self = this;</span><br></pre></td></tr></table></figure>\n\n<p>实质上，这就是<a href=\"http://realazy.org/blog/2007/07/18/scope-in-javascript/\">JavaScript作用域的问题</a>。如果你看过，你会发现解决方案不止一种。</p>\n</li>\n<li><h4 id=\"标识盗贼\"><a href=\"#标识盗贼\" class=\"headerlink\" title=\"标识盗贼\"></a>标识盗贼</h4><p>在JavaScript中不要使用跟HTML的id一样的变量名。如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; id=&quot;TheButton&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    TheButton = get(&quot;TheButton&quot;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>IE会报对象未定义的错误。我只能说：IE sucks.</p>\n</li>\n<li><h4 id=\"字符串只替换第一个匹配\"><a href=\"#字符串只替换第一个匹配\" class=\"headerlink\" title=\"字符串只替换第一个匹配\"></a>字符串只替换第一个匹配</h4><p>如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var fileName = &quot;This is a title&quot;.replace(&quot; &quot;,&quot;_&quot;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>而实际上，结果是”<code>This_is a title</code>“. 在JavaScript中，<code>String.replace</code>的第一个参数应该是正则表达式。所以，正确的做法是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fileName = &quot;This is a title&quot;.replace(/ /g,&quot;_&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"mouseout意味着mousein\"><a href=\"#mouseout意味着mousein\" class=\"headerlink\" title=\"mouseout意味着mousein\"></a>mouseout意味着mousein</h4><p>事实上，这是由于事件冒泡导致的。IE中有<code>mouseenter</code>和<code>mouseleave</code>，但不是标准的。作者在此建议大家使用库比如YUI来解决问题。</p>\n</li>\n<li><h4 id=\"parseInt是基于进制体系的\"><a href=\"#parseInt是基于进制体系的\" class=\"headerlink\" title=\"parseInt是基于进制体系的\"></a><code>parseInt</code>是基于进制体系的</h4><p>这个是常识，可是很多人给忽略了<code>parseInt</code>还有第二个参数，用以指明进制。比如，<code>parseInt(&quot;09&quot;)</code>，如果你认为答案是9，那就错了。因为，在此，字符串以0开头，<code>parseInt</code>以八进制来处理它，在八进制中，<code>09</code>是非法，返回<code>false</code>，布尔值<code>false</code>转化成数值就是0. 因此，正确的做法是<code>parseInt(&quot;09&quot;, 10)</code>.</p>\n</li>\n<li><h4 id=\"for-in-会遍历所有的东西\"><a href=\"#for-in-会遍历所有的东西\" class=\"headerlink\" title=\"for...in...会遍历所有的东西\"></a><code>for...in...</code>会遍历所有的东西</h4><p>有一段这样的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [5,10,15]</span><br><span class=\"line\">    var total = 1;</span><br><span class=\"line\">    for ( var x in arr) &#123;</span><br><span class=\"line\">    total = total * arr[x];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行得好好的，不是吗？但是有一天它不干了，给我返回的值变成了<code>NaN</code>, 晕。我只不过引入了一个库而已啊。原来是这个库改写了<code>Array</code>的<code>prototype</code>，这样，我们的<code>arr</code>平白无过多出了一个属性（方法），而<code>for...in...</code>会把它给遍历出来。所以这样做才是比较安全的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ( var x = 0; x &lt; arr.length; x++) &#123;</span><br><span class=\"line\">    total = total * arr[x];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实，这也是污染基本类的<code>prototype</code>会带来危害的一个例证。</p>\n</li>\n<li><h4 id=\"事件处理器的陷阱\"><a href=\"#事件处理器的陷阱\" class=\"headerlink\" title=\"事件处理器的陷阱\"></a>事件处理器的陷阱</h4><p>这其实只会存在使用作为对象属性的事件处理器才会存在的问题。比如<code>window.onclick = MyOnClickMethod``这样的代码，这会复写掉之前的``window.onclick</code>事件，还可能导致IE的内容泄露（sucks again）。在IE还没有支持DOM 2的事件注册之前，作者建议使用库来解决问题，比如使用YUI:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YAHOO.util.Event.addListener(window, &quot;click&quot;, MyOnClickMethod);</span><br></pre></td></tr></table></figure>\n\n<p>这应该也属于常识问题，但新手可能容易犯错。</p>\n</li>\n<li><h4 id=\"Focus-Pocus\"><a href=\"#Focus-Pocus\" class=\"headerlink\" title=\"Focus Pocus\"></a>Focus Pocus</h4><p>新建一个<code>input</code>文本元素，然后把焦点挪到它上面，按理说，这样的代码应该很自然：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newInput = document.createElement(&quot;input&quot;);</span><br><span class=\"line\">    document.body.appendChild(newInput);</span><br><span class=\"line\">    newInput.focus();</span><br><span class=\"line\">    newInput.select();</span><br></pre></td></tr></table></figure>\n\n<p>但是IE会报错（sucks again and again）。理由可能是当你执行<code>fouce()</code>的时候，元素尚未可用。因此，我们可以延迟执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newInput = document.createElement(&quot;input&quot;);</span><br><span class=\"line\">    newInput.id = &quot;TheNewInput&quot;;</span><br><span class=\"line\">    document.body.appendChild(newInput);</span><br><span class=\"line\">    setTimeout(function()&#123; //这里我使用闭包改写过，若有兴趣可以对比原文</span><br><span class=\"line\">    document.getElementById(&#x27;TheNewInput&#x27;).focus();</span><br><span class=\"line\">    document.getElementById(&#x27;TheNewInput&#x27;).select();&#125;, 10);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在实践中，JavaScript的陷阱还有很多很多，大多是由于解析器的实现不到位而引起。这些东西一般都不会在教科书中出现，只能靠开发者之间的经验分享。谢天谢地，我们生活在网络时代，很多碰到的问题，一般都可以在Google中找到答案。</p>\n<p>-——————————–</p>\n<p>有些问题已经碰到了。很经典的文章！！</p>\n","categories":[],"tags":[]}